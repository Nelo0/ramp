{
  "openapi": "3.0.2",
  "info": {
    "title": "Bridge API",
    "description": "APIs to move into, out of, and between any form of a dollar",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.bridge.xyz/v0",
      "description": "The base path for all resources"
    }
  ],
  "tags": [
    {
      "name": "Customers"
    },
    {
      "name": "External Accounts"
    },
    {
      "name": "Transfers"
    },
    {
      "name": "Prefunded Accounts"
    },
    {
      "name": "Balances"
    },
    {
      "name": "Liquidation Addresses"
    },
    {
      "name": "Developers"
    },
    {
      "name": "Plaid"
    },
    {
      "name": "Virtual Accounts"
    },
    {
      "name": "Static Memos"
    },
    {
      "name": "Webhooks"
    }
  ],
  "paths": {
    "/customers": {
      "get": {
        "summary": "Get all customers",
        "description": "Get the full list of all customers created on Bridge",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "starting_after",
            "schema": {
              "type": "string"
            },
            "description": "This is a customer id. If this is specified, the next page that starts with a customer right AFTER the specified customer id on the customer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that customers older than the specified customer id will be returned (shouldn't be set if ending_before is set)"
          },
          {
            "in": "query",
            "name": "ending_before",
            "schema": {
              "type": "string"
            },
            "description": "This is a customer id. If this is specified, the previous page that ends with a customer right BEFORE the specified customer id on the customer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that customers newer than the specified customer id will be returned (shouldn't be set if starting_after is set)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of items to return (default of 10, max of 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of customers (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Customers",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "properties": {
                          "id": {
                            "readOnly": true,
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42
                          },
                          "first_name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "last_name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "email": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the customer. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
                            "enum": [
                              "not_started",
                              "pending",
                              "incomplete",
                              "awaiting_ubo",
                              "manual_review",
                              "under_review",
                              "active",
                              "rejected"
                            ]
                          },
                          "capabilities": {
                            "type": "object",
                            "properties": {
                              "payin_crypto": {
                                "type": "string",
                                "description": "State of the customer capability",
                                "enum": [
                                  "pending",
                                  "active",
                                  "inactive",
                                  "rejected"
                                ]
                              },
                              "payout_crypto": {
                                "type": "string",
                                "description": "State of the customer capability",
                                "enum": [
                                  "pending",
                                  "active",
                                  "inactive",
                                  "rejected"
                                ]
                              },
                              "payin_fiat": {
                                "type": "string",
                                "description": "State of the customer capability",
                                "enum": [
                                  "pending",
                                  "active",
                                  "inactive",
                                  "rejected"
                                ]
                              },
                              "payout_fiat": {
                                "type": "string",
                                "description": "State of the customer capability",
                                "enum": [
                                  "pending",
                                  "active",
                                  "inactive",
                                  "rejected"
                                ]
                              }
                            }
                          },
                          "future_requirements_due": {
                            "readOnly": true,
                            "description": "Information about requirements that may be needed in the future for the customer (eg. enhanced KYC checks for high volume transactions etc.). Please consult our KYC guide on how to resolve each requirement.",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "type": "string",
                              "enum": [
                                "id_verification"
                              ]
                            }
                          },
                          "requirements_due": {
                            "readOnly": true,
                            "description": "KYC requirements still needed to be completed. Please consult our KYC guide on how to resolve each requirement.",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "type": "string",
                              "enum": [
                                "external_account",
                                "id_verification"
                              ]
                            }
                          },
                          "created_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of creation of the customer",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of last update of the customer",
                            "format": "date-time"
                          },
                          "rejection_reasons": {
                            "readOnly": true,
                            "description": "Reasons why a customer KYC was rejected",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "description": "Reason why the kyc_status was rejected",
                              "properties": {
                                "developer_reason": {
                                  "type": "string",
                                  "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                                },
                                "reason": {
                                  "type": "string",
                                  "description": "Reason for why a customer was rejected. To be shared with the customer."
                                },
                                "created_at": {
                                  "type": "string",
                                  "description": "Time of creation of the rejection reason"
                                }
                              }
                            }
                          },
                          "has_accepted_terms_of_service": {
                            "readOnly": true,
                            "description": "Whether the customer has accepted the terms of service.",
                            "type": "boolean"
                          },
                          "endorsements": {
                            "readOnly": true,
                            "description": "A summary of whether the customer has received approvals to complete onboarding or use certain products/services offered by Bridge.",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "required": [
                                "name",
                                "status"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The endorsement type.",
                                  "type": "string",
                                  "enum": [
                                    "base",
                                    "sepa"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "incomplete",
                                    "approved",
                                    "revoked"
                                  ]
                                },
                                "additional_requirements": {
                                  "description": "Additional requirements that need to be completed for obtaining the approval for the endorsement. \n\n1. `kyc_approval` and `tos_acceptance` are required for the `base` endorsement. \n2. `kyc_with_proof_of_address` and `tos_v2_acceptance` are required for `sepa`. If `tos_v2_acceptance` is not completed, a ToS acceptance link can be retrieved for the current customer from the endpoint `/v0/customers/{customerID}/tos_acceptance_link`. To fulfill the `kyc_with_proof_of_address` requirement, a KYC link can be specifically requested for the current customer via the endpoint `/v0/customers/{customerID}/kyc_link`, with `endorsement=sepa` included in the query string",
                                  "type": "array",
                                  "minItems": 0,
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "kyc_approval",
                                      "tos_acceptance",
                                      "kyc_with_proof_of_address",
                                      "tos_v2_acceptance"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "CustomersFound": {
                    "summary": "A non-empty list of customers",
                    "value": {
                      "data": [
                        {
                          "id": "cust_1",
                          "first_name": "John",
                          "last_name": "Doe",
                          "email": "johndoe@johndoe.com",
                          "status": "active",
                          "type": "individual",
                          "has_accepted_terms_of_service": true,
                          "address": {
                            "street_line_1": "123 Washington St",
                            "street_line_2": "Apt 2F",
                            "city": "New York",
                            "postal_code": "10001",
                            "state": "NY",
                            "country": "USA"
                          },
                          "rejection_reasons": [],
                          "requirements_due": [
                            "external_account"
                          ],
                          "future_requirements_due": [
                            "id_verification"
                          ],
                          "endorsements": [
                            {
                              "name": "base",
                              "status": "approved"
                            },
                            {
                              "name": "sepa",
                              "status": "incomplete",
                              "additional_requirements": [
                                "kyc_with_proof_of_address",
                                "tos_v2_acceptance"
                              ]
                            }
                          ],
                          "created_at": "2020-01-01T00:00:00.000Z",
                          "updated_at": "2020-01-02T00:00:00.000Z"
                        },
                        {
                          "id": "cust_2",
                          "first_name": "Harper",
                          "last_name": "Stern",
                          "status": "active",
                          "type": "individual",
                          "email": "harperstern@harperstern.com",
                          "has_accepted_terms_of_service": true,
                          "address": {
                            "street_line_1": "1 5th avenue",
                            "city": "New York",
                            "state": "NY",
                            "postal_code": "10010",
                            "country": "USA"
                          },
                          "rejection_reasons": [],
                          "requirements_due": [
                            "external_account"
                          ],
                          "future_requirements_due": [
                            "id_verification"
                          ],
                          "created_at": "2020-01-01T00:00:00.000Z",
                          "updated_at": "2020-01-02T00:00:00.000Z"
                        }
                      ]
                    }
                  },
                  "NoCustomersFound": {
                    "summary": "An empty list of customers",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a customer",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Customer object to be created. \n\nNote that the schema varies based on the type (individual vs. business) of customer being created. ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "allOf": [
                      {
                        "title": "Individual Customer",
                        "required": [
                          "type",
                          "signed_agreement_id",
                          "first_name",
                          "last_name",
                          "email",
                          "address",
                          "tax_identification_number",
                          "birth_date"
                        ],
                        "properties": {
                          "type": {
                            "description": "Type of the customer (individual vs. business).",
                            "type": "string",
                            "minLength": 1,
                            "enum": [
                              "individual"
                            ]
                          },
                          "first_name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "last_name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "email": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "phone": {
                            "description": "Phone in format \"+12223334444\"",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "address": {
                            "writeOnly": true,
                            "required": [
                              "street_line_1",
                              "country",
                              "city"
                            ],
                            "properties": {
                              "street_line_1": {
                                "type": "string",
                                "minLength": 1
                              },
                              "street_line_2": {
                                "type": "string",
                                "minLength": 1
                              },
                              "city": {
                                "type": "string",
                                "minLength": 1
                              },
                              "state": {
                                "type": "string",
                                "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                                "minLength": 2,
                                "maxLength": 2
                              },
                              "postal_code": {
                                "type": "string",
                                "description": "Must be supplied for countries that use postal codes.",
                                "minLength": 1
                              },
                              "country": {
                                "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                                "type": "string",
                                "minLength": 3,
                                "maxLength": 3
                              }
                            }
                          },
                          "birth_date": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Date of birth in format yyyy-mm-dd",
                            "minLength": 10,
                            "maxLength": 10
                          },
                          "tax_identification_number": {
                            "description": "For individual US customers, SSN should be used. For non-US individual customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative.",
                            "writeOnly": true,
                            "type": "string"
                          },
                          "signed_agreement_id": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "ID of the signed agreement, fetched through the Bridge UI",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "gov_id_country": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Three-letter alpha-3 country code of the provided government id as defined in the ISO 3166-1 spec.",
                            "minLength": 3,
                            "maxLength": 3
                          },
                          "gov_id_image_front": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Base64 encoded image* of the front of the customer's government issued ID \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "gov_id_image_back": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Base64 encoded image* of the back of the customer's government issued ID \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "proof_of_address_document": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Base64 encoded image* of the *Proof-of-Address* document \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif.\nRequired for new customers from the European Economic Area (EEA), including associated principalities and territories. Please refer to [SEPA/Euro services](https://apidocs.bridge.xyz/docs/sepa-euro-transactions) for more details. Utility bills and bank statements are recommended for proof of address.",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "endorsements": {
                            "writeOnly": true,
                            "type": "array",
                            "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`. N.B. If `sepa` is explicitly requested, `individual` customers will be prompted (and required) to provide proof of address in the hosted KYC flow.",
                            "items": {
                              "enum": [
                                "base",
                                "sepa"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "title": "Individual Customer",
                        "properties": {
                          "sof_eu_questionnaire": {
                            "writeOnly": true,
                            "type": "object",
                            "required": [
                              "acting_as_intermediary",
                              "employment_status",
                              "expected_monthly_payments",
                              "most_recent_occupation",
                              "primary_purpose",
                              "source_of_funds"
                            ],
                            "properties": {
                              "acting_as_intermediary": {
                                "type": "string",
                                "description": "Is the customer acting as an intermediary for a third party?",
                                "enum": [
                                  "yes",
                                  "no"
                                ]
                              },
                              "employment_status": {
                                "type": "string",
                                "description": "What is the customer's current employment status?",
                                "enum": [
                                  "employed",
                                  "homemaker",
                                  "retired",
                                  "self_employed",
                                  "student",
                                  "unemployed"
                                ]
                              },
                              "expected_monthly_payments": {
                                "type": "string",
                                "description": "What is the expected monthly volume of payments the customer will be sending or receiving?",
                                "enum": [
                                  "0_4999",
                                  "5000_9999",
                                  "10000_49999",
                                  "50000_plus"
                                ]
                              },
                              "most_recent_occupation": {
                                "type": "string",
                                "description": "What is the customer's most recent occupation? Specify the relevant alphanumeric occupation code. See the [list of occupations](https://dash.readme.com/project/bridge-docs/v0/page/sof-eu-most-recent-occupation-list) for the complete list of valid occupations and codes."
                              },
                              "primary_purpose": {
                                "type": "string",
                                "description": "What is the primary purpose of the customer's account?",
                                "enum": [
                                  "business_transactions",
                                  "charitable_donations",
                                  "investment_purposes",
                                  "other",
                                  "payments_to_friends_or_family_abroad",
                                  "personal_or_living_expenses",
                                  "protect_wealth",
                                  "purchase_goods_and_services"
                                ]
                              },
                              "primary_purpose_other": {
                                "type": "string",
                                "description": "Required if the primary purpose is 'other'."
                              },
                              "source_of_funds": {
                                "type": "string",
                                "description": "What is the source of funds for the customer's account?",
                                "enum": [
                                  "business_income",
                                  "gambling_proceeds",
                                  "gifts",
                                  "government_benefits",
                                  "inheritance",
                                  "investments_loans",
                                  "pension_retirement",
                                  "salary",
                                  "sale_of_assets_real_estate",
                                  "savings",
                                  "someone_elses_funds"
                                ]
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "title": "Business Customer (Beta)",
                        "required": [
                          "type",
                          "name",
                          "description",
                          "email",
                          "business_type",
                          "source_of_funds",
                          "website",
                          "address",
                          "tax_identification_number",
                          "signed_agreement_id",
                          "is_dao",
                          "transmits_customer_funds",
                          "compliance_screening_explanation",
                          "ultimate_beneficial_owners",
                          "formation_document",
                          "ownership_document"
                        ],
                        "properties": {
                          "type": {
                            "description": "Type of the customer (individual vs. business)",
                            "type": "string",
                            "minLength": 1,
                            "enum": [
                              "business"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "description": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "email": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "source_of_funds": {
                            "description": "The source of funds for the business, e.g. profits, income, venture capital, etc.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "business_type": {
                            "description": "The type of business structure that most closely matches the business customer",
                            "type": "string",
                            "minLength": 1,
                            "enum": [
                              "cooperative",
                              "corporation",
                              "llc",
                              "other",
                              "partnership",
                              "sole_prop",
                              "trust"
                            ]
                          },
                          "website": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "address": {
                            "writeOnly": true,
                            "required": [
                              "street_line_1",
                              "country",
                              "city"
                            ],
                            "properties": {
                              "street_line_1": {
                                "type": "string",
                                "minLength": 1
                              },
                              "street_line_2": {
                                "type": "string",
                                "minLength": 1
                              },
                              "city": {
                                "type": "string",
                                "minLength": 1
                              },
                              "state": {
                                "type": "string",
                                "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                                "minLength": 2,
                                "maxLength": 2
                              },
                              "postal_code": {
                                "type": "string",
                                "description": "Must be supplied for countries that use postal codes.",
                                "minLength": 1
                              },
                              "country": {
                                "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                                "type": "string",
                                "minLength": 3,
                                "maxLength": 3
                              }
                            }
                          },
                          "tax_identification_number": {
                            "description": "For business US customers, TIN should be used. For non-US business customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative.",
                            "writeOnly": true,
                            "type": "string"
                          },
                          "signed_agreement_id": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Required ID of the signed agreement, fetched through the Bridge UI",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "statement_of_funds": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Base64 encoded image* of the *Statement of Funds* document following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "is_dao": {
                            "type": "boolean",
                            "description": "Whether the business is a DAO (Decentralized Autonomous Organization)"
                          },
                          "transmits_customer_funds": {
                            "type": "boolean",
                            "description": "True if the business transmits funds on behalf of its customers"
                          },
                          "compliance_screening_explanation": {
                            "type": "string",
                            "description": "Required if transmits_customer_funds is true. An explanation of types of compliance screening (KYC, KYB, or AML) the customer performs before transmitting funds on behalf of its customers.",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "ultimate_beneficial_owners": {
                            "type": "array",
                            "description": "List of ultimate beneficial owners",
                            "items": {
                              "required": [
                                "first_name",
                                "last_name",
                                "birth_date",
                                "email",
                                "phone",
                                "tax_identification_number",
                                "address",
                                "gov_id_image_front"
                              ],
                              "properties": {
                                "first_name": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 256
                                },
                                "middle_name": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 256
                                },
                                "last_name": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 256
                                },
                                "birth_date": {
                                  "type": "string",
                                  "description": "Date of birth in format yyyy-mm-dd",
                                  "minLength": 10,
                                  "maxLength": 10
                                },
                                "email": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 512
                                },
                                "phone": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 256
                                },
                                "tax_identification_number": {
                                  "type": "string",
                                  "description": "For US owners, SSN should be used. For non-US individual owners, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
                                },
                                "address": {
                                  "required": [
                                    "street_line_1",
                                    "country",
                                    "city"
                                  ],
                                  "properties": {
                                    "street_line_1": {
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "street_line_2": {
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "city": {
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "state": {
                                      "type": "string",
                                      "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                                      "minLength": 2,
                                      "maxLength": 2
                                    },
                                    "postal_code": {
                                      "type": "string",
                                      "description": "Must be supplied for countries that use postal codes.",
                                      "minLength": 1
                                    },
                                    "country": {
                                      "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                                      "type": "string",
                                      "minLength": 3,
                                      "maxLength": 3
                                    }
                                  }
                                },
                                "gov_id_country": {
                                  "type": "string",
                                  "description": "Three-letter alpha-3 country code of the submitted government id as defined in the ISO 3166-1 spec.",
                                  "minLength": 3,
                                  "maxLength": 3
                                },
                                "gov_id_image_front": {
                                  "type": "string",
                                  "description": "Base64 encoded image* of the front of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                                  "minLength": 1,
                                  "maxLength": 256
                                },
                                "gov_id_image_back": {
                                  "type": "string",
                                  "description": "Base64 encoded image* of the back of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                                  "minLength": 1,
                                  "maxLength": 256
                                },
                                "proof_of_address_document": {
                                  "type": "string",
                                  "description": "Base64 encoded image* of a proof of address document for the beneficial owner, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                                  "minLength": 1,
                                  "maxLength": 256
                                }
                              }
                            }
                          },
                          "formation_document": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Base64 encoded image* of the *Formation Document* following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "ownership_document": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Base64 encoded image* of the *Ownership Document* following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "proof_of_address_document": {
                            "writeOnly": true,
                            "type": "string",
                            "description": "Base64 encoded image* of the *Proof-of-Address* document \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif.\nRequired for new customers from the European Economic Area (EEA), including associated principalities and territories. Please refer to [SEPA/Euro services](https://apidocs.bridge.xyz/docs/sepa-euro-transactions) for more details. Utility bills and bank statements are recommended for proof of address.",
                            "minLength": 1,
                            "maxLength": 512
                          },
                          "endorsements": {
                            "writeOnly": true,
                            "type": "array",
                            "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`.",
                            "items": {
                              "enum": [
                                "base",
                                "sepa"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "title": "Business Customer (Beta)",
                        "properties": {
                          "sof_eu_questionnaire": {
                            "writeOnly": true,
                            "type": "object",
                            "title": "Business Customer Source of Funds (SOF) / Expected Usage (EU) Questionnaire",
                            "required": [
                              "estimated_annual_revenue_usd",
                              "expected_monthly_payments_usd",
                              "operates_in_prohibited_countries",
                              "primary_purpose",
                              "high_risk_activities",
                              "source_of_funds",
                              "source_of_funds_description",
                              "transmits_customer_funds"
                            ],
                            "properties": {
                              "estimated_annual_revenue_usd": {
                                "type": "string",
                                "description": "Estimated annual revenue in USD",
                                "enum": [
                                  99999,
                                  100000999999,
                                  10000009999999,
                                  1000000049999999,
                                  "50000000_24999999\"",
                                  "250000000_plus"
                                ]
                              },
                              "expected_monthly_payments_usd": {
                                "type": "integer",
                                "description": "Expected monthly payments in USD"
                              },
                              "operates_in_prohibited_countries": {
                                "type": "string",
                                "description": "Does the business operate in any prohibited countries?",
                                "enum": [
                                  "yes",
                                  "no"
                                ]
                              },
                              "primary_purpose": {
                                "type": "string",
                                "description": "What is the primary purpose of the business account?",
                                "enum": [
                                  "business_transactions",
                                  "charitable_donations",
                                  "investment_purposes",
                                  "other",
                                  "payments_to_friends_or_family_abroad",
                                  "payroll",
                                  "personal_or_living_expenses",
                                  "protect_wealth",
                                  "purchase_goods_and_services",
                                  "receive_payment_for_goods_and_services",
                                  "tax_optimization"
                                ]
                              },
                              "primary_purpose_other": {
                                "type": "string",
                                "description": "Required if the primary purpose is 'other'."
                              },
                              "high_risk_activities": {
                                "type": "array",
                                "description": "List of high-risk activities the business is involved in.",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "none_of_the_above",
                                    "adult_entertainment",
                                    "gambling",
                                    "hold_client_funds",
                                    "investment_services",
                                    "lending_banking",
                                    "marijuana_or_related_services",
                                    "money_services",
                                    "operate_foreign_exchange_virtual_currencies_brokerage_otc",
                                    "safe_deposit_box_rentals",
                                    "third_party_payment_processing",
                                    "weapons_firearms_and_explosives"
                                  ]
                                }
                              },
                              "source_of_funds": {
                                "type": "string",
                                "description": "What is the source of funds for the business account?",
                                "enum": [
                                  "business_loans",
                                  "business_revenue",
                                  "equity_funding",
                                  "grants",
                                  "investment_proceeds",
                                  "legal_settlement_tax_refund",
                                  "pension_retirement",
                                  "sale_of_assets",
                                  "third_party_funds"
                                ]
                              },
                              "source_of_funds_description": {
                                "type": "string",
                                "description": "Description of the source of funds for the business' account."
                              },
                              "transmits_customer_funds": {
                                "type": "string",
                                "description": "Does the business transmit funds on behalf of its customers?",
                                "enum": [
                                  "yes",
                                  "no"
                                ]
                              },
                              "transmits_customer_funds_description": {
                                "type": "string",
                                "description": "If the business transmits funds on behalf of its customers, please elaborate here."
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "individual": "#/components/schemas/CreateIndividualCustomerPayload",
                    "business": "#/components/schemas/CreateBusinessCustomerPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "readOnly": true,
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42
                    },
                    "first_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "last_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "email": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the customer. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
                      "enum": [
                        "not_started",
                        "pending",
                        "incomplete",
                        "awaiting_ubo",
                        "manual_review",
                        "under_review",
                        "active",
                        "rejected"
                      ]
                    },
                    "capabilities": {
                      "type": "object",
                      "properties": {
                        "payin_crypto": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payout_crypto": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payin_fiat": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payout_fiat": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        }
                      }
                    },
                    "future_requirements_due": {
                      "readOnly": true,
                      "description": "Information about requirements that may be needed in the future for the customer (eg. enhanced KYC checks for high volume transactions etc.). Please consult our KYC guide on how to resolve each requirement.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "string",
                        "enum": [
                          "id_verification"
                        ]
                      }
                    },
                    "requirements_due": {
                      "readOnly": true,
                      "description": "KYC requirements still needed to be completed. Please consult our KYC guide on how to resolve each requirement.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "string",
                        "enum": [
                          "external_account",
                          "id_verification"
                        ]
                      }
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the customer",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of last update of the customer",
                      "format": "date-time"
                    },
                    "rejection_reasons": {
                      "readOnly": true,
                      "description": "Reasons why a customer KYC was rejected",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "description": "Reason why the kyc_status was rejected",
                        "properties": {
                          "developer_reason": {
                            "type": "string",
                            "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                          },
                          "reason": {
                            "type": "string",
                            "description": "Reason for why a customer was rejected. To be shared with the customer."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Time of creation of the rejection reason"
                          }
                        }
                      }
                    },
                    "has_accepted_terms_of_service": {
                      "readOnly": true,
                      "description": "Whether the customer has accepted the terms of service.",
                      "type": "boolean"
                    },
                    "endorsements": {
                      "readOnly": true,
                      "description": "A summary of whether the customer has received approvals to complete onboarding or use certain products/services offered by Bridge.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "name",
                          "status"
                        ],
                        "properties": {
                          "name": {
                            "description": "The endorsement type.",
                            "type": "string",
                            "enum": [
                              "base",
                              "sepa"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "incomplete",
                              "approved",
                              "revoked"
                            ]
                          },
                          "additional_requirements": {
                            "description": "Additional requirements that need to be completed for obtaining the approval for the endorsement. \n\n1. `kyc_approval` and `tos_acceptance` are required for the `base` endorsement. \n2. `kyc_with_proof_of_address` and `tos_v2_acceptance` are required for `sepa`. If `tos_v2_acceptance` is not completed, a ToS acceptance link can be retrieved for the current customer from the endpoint `/v0/customers/{customerID}/tos_acceptance_link`. To fulfill the `kyc_with_proof_of_address` requirement, a KYC link can be specifically requested for the current customer via the endpoint `/v0/customers/{customerID}/kyc_link`, with `endorsement=sepa` included in the query string",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "type": "string",
                              "enum": [
                                "kyc_approval",
                                "tos_acceptance",
                                "kyc_with_proof_of_address",
                                "tos_v2_acceptance"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "CustomerCreated": {
                    "summary": "Customer successfully created",
                    "value": {
                      "id": "cust_1",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "johndoe@johndoe.com",
                      "status": "active",
                      "type": "individual",
                      "has_accepted_terms_of_service": true,
                      "address": {
                        "street_line_1": "123 Washington St",
                        "street_line_2": "Apt 2F",
                        "city": "New York",
                        "postal_code": "10001",
                        "state": "NY",
                        "country": "USA"
                      },
                      "rejection_reasons": [],
                      "requirements_due": [
                        "external_account"
                      ],
                      "future_requirements_due": [
                        "id_verification"
                      ],
                      "endorsements": [
                        {
                          "name": "base",
                          "status": "approved"
                        },
                        {
                          "name": "sepa",
                          "status": "incomplete",
                          "additional_requirements": [
                            "kyc_with_proof_of_address",
                            "tos_v2_acceptance"
                          ]
                        }
                      ],
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}": {
      "parameters": [
        {
          "name": "customerID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "get": {
        "summary": "Get a single customer object",
        "tags": [
          "Customers"
        ],
        "description": "Retrieve a customer object from the passed in customer ID",
        "responses": {
          "200": {
            "description": "Successful customer object response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "readOnly": true,
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42
                    },
                    "first_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "last_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "email": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the customer. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
                      "enum": [
                        "not_started",
                        "pending",
                        "incomplete",
                        "awaiting_ubo",
                        "manual_review",
                        "under_review",
                        "active",
                        "rejected"
                      ]
                    },
                    "capabilities": {
                      "type": "object",
                      "properties": {
                        "payin_crypto": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payout_crypto": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payin_fiat": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payout_fiat": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        }
                      }
                    },
                    "future_requirements_due": {
                      "readOnly": true,
                      "description": "Information about requirements that may be needed in the future for the customer (eg. enhanced KYC checks for high volume transactions etc.). Please consult our KYC guide on how to resolve each requirement.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "string",
                        "enum": [
                          "id_verification"
                        ]
                      }
                    },
                    "requirements_due": {
                      "readOnly": true,
                      "description": "KYC requirements still needed to be completed. Please consult our KYC guide on how to resolve each requirement.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "string",
                        "enum": [
                          "external_account",
                          "id_verification"
                        ]
                      }
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the customer",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of last update of the customer",
                      "format": "date-time"
                    },
                    "rejection_reasons": {
                      "readOnly": true,
                      "description": "Reasons why a customer KYC was rejected",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "description": "Reason why the kyc_status was rejected",
                        "properties": {
                          "developer_reason": {
                            "type": "string",
                            "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                          },
                          "reason": {
                            "type": "string",
                            "description": "Reason for why a customer was rejected. To be shared with the customer."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Time of creation of the rejection reason"
                          }
                        }
                      }
                    },
                    "has_accepted_terms_of_service": {
                      "readOnly": true,
                      "description": "Whether the customer has accepted the terms of service.",
                      "type": "boolean"
                    },
                    "endorsements": {
                      "readOnly": true,
                      "description": "A summary of whether the customer has received approvals to complete onboarding or use certain products/services offered by Bridge.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "name",
                          "status"
                        ],
                        "properties": {
                          "name": {
                            "description": "The endorsement type.",
                            "type": "string",
                            "enum": [
                              "base",
                              "sepa"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "incomplete",
                              "approved",
                              "revoked"
                            ]
                          },
                          "additional_requirements": {
                            "description": "Additional requirements that need to be completed for obtaining the approval for the endorsement. \n\n1. `kyc_approval` and `tos_acceptance` are required for the `base` endorsement. \n2. `kyc_with_proof_of_address` and `tos_v2_acceptance` are required for `sepa`. If `tos_v2_acceptance` is not completed, a ToS acceptance link can be retrieved for the current customer from the endpoint `/v0/customers/{customerID}/tos_acceptance_link`. To fulfill the `kyc_with_proof_of_address` requirement, a KYC link can be specifically requested for the current customer via the endpoint `/v0/customers/{customerID}/kyc_link`, with `endorsement=sepa` included in the query string",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "type": "string",
                              "enum": [
                                "kyc_approval",
                                "tos_acceptance",
                                "kyc_with_proof_of_address",
                                "tos_v2_acceptance"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "SuccessfulCustomerResponse": {
                    "summary": "A successful customer object",
                    "value": {
                      "id": "cust_1",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "johndoe@johndoe.com",
                      "status": "active",
                      "type": "individual",
                      "has_accepted_terms_of_service": true,
                      "address": {
                        "street_line_1": "123 Washington St",
                        "street_line_2": "Apt 2F",
                        "city": "New York",
                        "postal_code": "10001",
                        "state": "NY",
                        "country": "USA"
                      },
                      "rejection_reasons": [],
                      "requirements_due": [
                        "external_account"
                      ],
                      "future_requirements_due": [
                        "id_verification"
                      ],
                      "endorsements": [
                        {
                          "name": "base",
                          "status": "approved"
                        },
                        {
                          "name": "sepa",
                          "status": "incomplete",
                          "additional_requirements": [
                            "kyc_with_proof_of_address",
                            "tos_v2_acceptance"
                          ]
                        }
                      ],
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "RejectedCustomerResponse": {
                    "summary": "A rejected customer object",
                    "value": {
                      "id": "cust_1",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "johndoe@johndoe.com",
                      "status": "rejected",
                      "type": "individual",
                      "has_accepted_terms_of_service": true,
                      "address": {
                        "street_line_1": "123 Washington St",
                        "street_line_2": "Apt 2F",
                        "city": "New York",
                        "postal_code": "10001",
                        "state": "NY",
                        "country": "USA"
                      },
                      "requirements_due": [
                        "external_account"
                      ],
                      "rejection_reasons": [
                        {
                          "developer_reason": "Missing required ID details.",
                          "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                          "created_at": "2020-01-02T00:00:00.000Z"
                        },
                        {
                          "developer_reason": "Blurry face portrait.",
                          "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                          "created_at": "2020-01-02T00:00:00.000Z"
                        }
                      ],
                      "future_requirements_due": [
                        "id_verification"
                      ],
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a single customer object",
        "tags": [
          "Customers"
        ],
        "requestBody": {
          "description": "Customer object to update with",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "Individual Customer",
                    "required": [
                      "type",
                      "signed_agreement_id",
                      "first_name",
                      "last_name",
                      "email",
                      "address",
                      "tax_identification_number",
                      "birth_date"
                    ],
                    "properties": {
                      "type": {
                        "description": "Type of the customer (individual vs. business).",
                        "type": "string",
                        "minLength": 1,
                        "enum": [
                          "individual"
                        ]
                      },
                      "first_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "last_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "email": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "phone": {
                        "description": "Phone in format \"+12223334444\"",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "address": {
                        "writeOnly": true,
                        "required": [
                          "street_line_1",
                          "country",
                          "city"
                        ],
                        "properties": {
                          "street_line_1": {
                            "type": "string",
                            "minLength": 1
                          },
                          "street_line_2": {
                            "type": "string",
                            "minLength": 1
                          },
                          "city": {
                            "type": "string",
                            "minLength": 1
                          },
                          "state": {
                            "type": "string",
                            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "postal_code": {
                            "type": "string",
                            "description": "Must be supplied for countries that use postal codes.",
                            "minLength": 1
                          },
                          "country": {
                            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3
                          }
                        }
                      },
                      "birth_date": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Date of birth in format yyyy-mm-dd",
                        "minLength": 10,
                        "maxLength": 10
                      },
                      "tax_identification_number": {
                        "description": "For individual US customers, SSN should be used. For non-US individual customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative.",
                        "writeOnly": true,
                        "type": "string"
                      },
                      "signed_agreement_id": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "ID of the signed agreement, fetched through the Bridge UI",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "gov_id_country": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Three-letter alpha-3 country code of the provided government id as defined in the ISO 3166-1 spec.",
                        "minLength": 3,
                        "maxLength": 3
                      },
                      "gov_id_image_front": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Base64 encoded image* of the front of the customer's government issued ID \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "gov_id_image_back": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Base64 encoded image* of the back of the customer's government issued ID \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "proof_of_address_document": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Base64 encoded image* of the *Proof-of-Address* document \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif.\nRequired for new customers from the European Economic Area (EEA), including associated principalities and territories. Please refer to [SEPA/Euro services](https://apidocs.bridge.xyz/docs/sepa-euro-transactions) for more details. Utility bills and bank statements are recommended for proof of address.",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "endorsements": {
                        "writeOnly": true,
                        "type": "array",
                        "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`. N.B. If `sepa` is explicitly requested, `individual` customers will be prompted (and required) to provide proof of address in the hosted KYC flow.",
                        "items": {
                          "enum": [
                            "base",
                            "sepa"
                          ]
                        }
                      }
                    }
                  },
                  {
                    "title": "Business Customer (Beta)",
                    "required": [
                      "type",
                      "name",
                      "description",
                      "email",
                      "business_type",
                      "source_of_funds",
                      "website",
                      "address",
                      "tax_identification_number",
                      "signed_agreement_id",
                      "is_dao",
                      "transmits_customer_funds",
                      "compliance_screening_explanation",
                      "ultimate_beneficial_owners",
                      "formation_document",
                      "ownership_document"
                    ],
                    "properties": {
                      "type": {
                        "description": "Type of the customer (individual vs. business)",
                        "type": "string",
                        "minLength": 1,
                        "enum": [
                          "business"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "description": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "email": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "source_of_funds": {
                        "description": "The source of funds for the business, e.g. profits, income, venture capital, etc.",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                      },
                      "business_type": {
                        "description": "The type of business structure that most closely matches the business customer",
                        "type": "string",
                        "minLength": 1,
                        "enum": [
                          "cooperative",
                          "corporation",
                          "llc",
                          "other",
                          "partnership",
                          "sole_prop",
                          "trust"
                        ]
                      },
                      "website": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "address": {
                        "writeOnly": true,
                        "required": [
                          "street_line_1",
                          "country",
                          "city"
                        ],
                        "properties": {
                          "street_line_1": {
                            "type": "string",
                            "minLength": 1
                          },
                          "street_line_2": {
                            "type": "string",
                            "minLength": 1
                          },
                          "city": {
                            "type": "string",
                            "minLength": 1
                          },
                          "state": {
                            "type": "string",
                            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                            "minLength": 2,
                            "maxLength": 2
                          },
                          "postal_code": {
                            "type": "string",
                            "description": "Must be supplied for countries that use postal codes.",
                            "minLength": 1
                          },
                          "country": {
                            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 3
                          }
                        }
                      },
                      "tax_identification_number": {
                        "description": "For business US customers, TIN should be used. For non-US business customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative.",
                        "writeOnly": true,
                        "type": "string"
                      },
                      "signed_agreement_id": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Required ID of the signed agreement, fetched through the Bridge UI",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "statement_of_funds": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Base64 encoded image* of the *Statement of Funds* document following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "is_dao": {
                        "type": "boolean",
                        "description": "Whether the business is a DAO (Decentralized Autonomous Organization)"
                      },
                      "transmits_customer_funds": {
                        "type": "boolean",
                        "description": "True if the business transmits funds on behalf of its customers"
                      },
                      "compliance_screening_explanation": {
                        "type": "string",
                        "description": "Required if transmits_customer_funds is true. An explanation of types of compliance screening (KYC, KYB, or AML) the customer performs before transmitting funds on behalf of its customers.",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "ultimate_beneficial_owners": {
                        "type": "array",
                        "description": "List of ultimate beneficial owners",
                        "items": {
                          "required": [
                            "first_name",
                            "last_name",
                            "birth_date",
                            "email",
                            "phone",
                            "tax_identification_number",
                            "address",
                            "gov_id_image_front"
                          ],
                          "properties": {
                            "first_name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "middle_name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "last_name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "birth_date": {
                              "type": "string",
                              "description": "Date of birth in format yyyy-mm-dd",
                              "minLength": 10,
                              "maxLength": 10
                            },
                            "email": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 512
                            },
                            "phone": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "tax_identification_number": {
                              "type": "string",
                              "description": "For US owners, SSN should be used. For non-US individual owners, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
                            },
                            "address": {
                              "required": [
                                "street_line_1",
                                "country",
                                "city"
                              ],
                              "properties": {
                                "street_line_1": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "street_line_2": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "city": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "state": {
                                  "type": "string",
                                  "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                                  "minLength": 2,
                                  "maxLength": 2
                                },
                                "postal_code": {
                                  "type": "string",
                                  "description": "Must be supplied for countries that use postal codes.",
                                  "minLength": 1
                                },
                                "country": {
                                  "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                                  "type": "string",
                                  "minLength": 3,
                                  "maxLength": 3
                                }
                              }
                            },
                            "gov_id_country": {
                              "type": "string",
                              "description": "Three-letter alpha-3 country code of the submitted government id as defined in the ISO 3166-1 spec.",
                              "minLength": 3,
                              "maxLength": 3
                            },
                            "gov_id_image_front": {
                              "type": "string",
                              "description": "Base64 encoded image* of the front of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "gov_id_image_back": {
                              "type": "string",
                              "description": "Base64 encoded image* of the back of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "proof_of_address_document": {
                              "type": "string",
                              "description": "Base64 encoded image* of a proof of address document for the beneficial owner, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                              "minLength": 1,
                              "maxLength": 256
                            }
                          }
                        }
                      },
                      "formation_document": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Base64 encoded image* of the *Formation Document* following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "ownership_document": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Base64 encoded image* of the *Ownership Document* following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "proof_of_address_document": {
                        "writeOnly": true,
                        "type": "string",
                        "description": "Base64 encoded image* of the *Proof-of-Address* document \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif.\nRequired for new customers from the European Economic Area (EEA), including associated principalities and territories. Please refer to [SEPA/Euro services](https://apidocs.bridge.xyz/docs/sepa-euro-transactions) for more details. Utility bills and bank statements are recommended for proof of address.",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "endorsements": {
                        "writeOnly": true,
                        "type": "array",
                        "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`.",
                        "items": {
                          "enum": [
                            "base",
                            "sepa"
                          ]
                        }
                      }
                    }
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "individual": "#/components/schemas/UpdateIndividualCustomerPayload",
                    "business": "#/components/schemas/UpdateBusinessCustomerPayload"
                  }
                }
              }
            }
          }
        },
        "description": "Update the customer object identified by the passed in customer ID. Note, this can currently only be done to update information before a customer has been approved.",
        "responses": {
          "200": {
            "description": "Successful customer object response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "readOnly": true,
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42
                    },
                    "first_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "last_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "email": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the customer. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
                      "enum": [
                        "not_started",
                        "pending",
                        "incomplete",
                        "awaiting_ubo",
                        "manual_review",
                        "under_review",
                        "active",
                        "rejected"
                      ]
                    },
                    "capabilities": {
                      "type": "object",
                      "properties": {
                        "payin_crypto": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payout_crypto": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payin_fiat": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payout_fiat": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        }
                      }
                    },
                    "future_requirements_due": {
                      "readOnly": true,
                      "description": "Information about requirements that may be needed in the future for the customer (eg. enhanced KYC checks for high volume transactions etc.). Please consult our KYC guide on how to resolve each requirement.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "string",
                        "enum": [
                          "id_verification"
                        ]
                      }
                    },
                    "requirements_due": {
                      "readOnly": true,
                      "description": "KYC requirements still needed to be completed. Please consult our KYC guide on how to resolve each requirement.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "string",
                        "enum": [
                          "external_account",
                          "id_verification"
                        ]
                      }
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the customer",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of last update of the customer",
                      "format": "date-time"
                    },
                    "rejection_reasons": {
                      "readOnly": true,
                      "description": "Reasons why a customer KYC was rejected",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "description": "Reason why the kyc_status was rejected",
                        "properties": {
                          "developer_reason": {
                            "type": "string",
                            "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                          },
                          "reason": {
                            "type": "string",
                            "description": "Reason for why a customer was rejected. To be shared with the customer."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Time of creation of the rejection reason"
                          }
                        }
                      }
                    },
                    "has_accepted_terms_of_service": {
                      "readOnly": true,
                      "description": "Whether the customer has accepted the terms of service.",
                      "type": "boolean"
                    },
                    "endorsements": {
                      "readOnly": true,
                      "description": "A summary of whether the customer has received approvals to complete onboarding or use certain products/services offered by Bridge.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "name",
                          "status"
                        ],
                        "properties": {
                          "name": {
                            "description": "The endorsement type.",
                            "type": "string",
                            "enum": [
                              "base",
                              "sepa"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "incomplete",
                              "approved",
                              "revoked"
                            ]
                          },
                          "additional_requirements": {
                            "description": "Additional requirements that need to be completed for obtaining the approval for the endorsement. \n\n1. `kyc_approval` and `tos_acceptance` are required for the `base` endorsement. \n2. `kyc_with_proof_of_address` and `tos_v2_acceptance` are required for `sepa`. If `tos_v2_acceptance` is not completed, a ToS acceptance link can be retrieved for the current customer from the endpoint `/v0/customers/{customerID}/tos_acceptance_link`. To fulfill the `kyc_with_proof_of_address` requirement, a KYC link can be specifically requested for the current customer via the endpoint `/v0/customers/{customerID}/kyc_link`, with `endorsement=sepa` included in the query string",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "type": "string",
                              "enum": [
                                "kyc_approval",
                                "tos_acceptance",
                                "kyc_with_proof_of_address",
                                "tos_v2_acceptance"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "SuccessfulCustomerResponse": {
                    "summary": "A successful customer object",
                    "value": {
                      "id": "cust_1",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "johndoe@johndoe.com",
                      "status": "active",
                      "type": "individual",
                      "has_accepted_terms_of_service": true,
                      "address": {
                        "street_line_1": "123 Washington St",
                        "street_line_2": "Apt 2F",
                        "city": "New York",
                        "postal_code": "10001",
                        "state": "NY",
                        "country": "USA"
                      },
                      "rejection_reasons": [],
                      "requirements_due": [
                        "external_account"
                      ],
                      "future_requirements_due": [
                        "id_verification"
                      ],
                      "endorsements": [
                        {
                          "name": "base",
                          "status": "approved"
                        },
                        {
                          "name": "sepa",
                          "status": "incomplete",
                          "additional_requirements": [
                            "kyc_with_proof_of_address",
                            "tos_v2_acceptance"
                          ]
                        }
                      ],
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "RejectedCustomerResponse": {
                    "summary": "A rejected customer object",
                    "value": {
                      "id": "cust_1",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "johndoe@johndoe.com",
                      "status": "rejected",
                      "type": "individual",
                      "has_accepted_terms_of_service": true,
                      "address": {
                        "street_line_1": "123 Washington St",
                        "street_line_2": "Apt 2F",
                        "city": "New York",
                        "postal_code": "10001",
                        "state": "NY",
                        "country": "USA"
                      },
                      "requirements_due": [
                        "external_account"
                      ],
                      "rejection_reasons": [
                        {
                          "developer_reason": "Missing required ID details.",
                          "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                          "created_at": "2020-01-02T00:00:00.000Z"
                        },
                        {
                          "developer_reason": "Blurry face portrait.",
                          "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                          "created_at": "2020-01-02T00:00:00.000Z"
                        }
                      ],
                      "future_requirements_due": [
                        "id_verification"
                      ],
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a single customer object",
        "tags": [
          "Customers"
        ],
        "description": "Delete a customer object from the passed in customer ID",
        "responses": {
          "200": {
            "description": "Successfully deleted customer object response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "readOnly": true,
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42
                    },
                    "first_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "last_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "email": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the customer. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
                      "enum": [
                        "not_started",
                        "pending",
                        "incomplete",
                        "awaiting_ubo",
                        "manual_review",
                        "under_review",
                        "active",
                        "rejected"
                      ]
                    },
                    "capabilities": {
                      "type": "object",
                      "properties": {
                        "payin_crypto": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payout_crypto": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payin_fiat": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        },
                        "payout_fiat": {
                          "type": "string",
                          "description": "State of the customer capability",
                          "enum": [
                            "pending",
                            "active",
                            "inactive",
                            "rejected"
                          ]
                        }
                      }
                    },
                    "future_requirements_due": {
                      "readOnly": true,
                      "description": "Information about requirements that may be needed in the future for the customer (eg. enhanced KYC checks for high volume transactions etc.). Please consult our KYC guide on how to resolve each requirement.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "string",
                        "enum": [
                          "id_verification"
                        ]
                      }
                    },
                    "requirements_due": {
                      "readOnly": true,
                      "description": "KYC requirements still needed to be completed. Please consult our KYC guide on how to resolve each requirement.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "string",
                        "enum": [
                          "external_account",
                          "id_verification"
                        ]
                      }
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the customer",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of last update of the customer",
                      "format": "date-time"
                    },
                    "rejection_reasons": {
                      "readOnly": true,
                      "description": "Reasons why a customer KYC was rejected",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "description": "Reason why the kyc_status was rejected",
                        "properties": {
                          "developer_reason": {
                            "type": "string",
                            "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                          },
                          "reason": {
                            "type": "string",
                            "description": "Reason for why a customer was rejected. To be shared with the customer."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Time of creation of the rejection reason"
                          }
                        }
                      }
                    },
                    "has_accepted_terms_of_service": {
                      "readOnly": true,
                      "description": "Whether the customer has accepted the terms of service.",
                      "type": "boolean"
                    },
                    "endorsements": {
                      "readOnly": true,
                      "description": "A summary of whether the customer has received approvals to complete onboarding or use certain products/services offered by Bridge.",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "name",
                          "status"
                        ],
                        "properties": {
                          "name": {
                            "description": "The endorsement type.",
                            "type": "string",
                            "enum": [
                              "base",
                              "sepa"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "incomplete",
                              "approved",
                              "revoked"
                            ]
                          },
                          "additional_requirements": {
                            "description": "Additional requirements that need to be completed for obtaining the approval for the endorsement. \n\n1. `kyc_approval` and `tos_acceptance` are required for the `base` endorsement. \n2. `kyc_with_proof_of_address` and `tos_v2_acceptance` are required for `sepa`. If `tos_v2_acceptance` is not completed, a ToS acceptance link can be retrieved for the current customer from the endpoint `/v0/customers/{customerID}/tos_acceptance_link`. To fulfill the `kyc_with_proof_of_address` requirement, a KYC link can be specifically requested for the current customer via the endpoint `/v0/customers/{customerID}/kyc_link`, with `endorsement=sepa` included in the query string",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "type": "string",
                              "enum": [
                                "kyc_approval",
                                "tos_acceptance",
                                "kyc_with_proof_of_address",
                                "tos_v2_acceptance"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "DeletedCustomerResponse": {
                    "summary": "A successful customer object",
                    "value": {
                      "id": "cust_1",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "johndoe@johndoe.com",
                      "status": "active",
                      "type": "individual",
                      "has_accepted_terms_of_service": true,
                      "address": {
                        "street_line_1": "123 Washington St",
                        "street_line_2": "Apt 2F",
                        "city": "New York",
                        "postal_code": "10001",
                        "state": "NY",
                        "country": "USA"
                      },
                      "rejection_reasons": [],
                      "requirements_due": [
                        "external_account"
                      ],
                      "future_requirements_due": [
                        "id_verification"
                      ],
                      "endorsements": [
                        {
                          "name": "base",
                          "status": "approved"
                        },
                        {
                          "name": "sepa",
                          "status": "incomplete",
                          "additional_requirements": [
                            "kyc_with_proof_of_address",
                            "tos_v2_acceptance"
                          ]
                        }
                      ],
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/external_accounts": {
      "parameters": [
        {
          "name": "customerID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "get": {
        "summary": "Get all External Accounts",
        "tags": [
          "External Accounts"
        ],
        "description": "Get all External Accounts for a passed in customer.",
        "responses": {
          "200": {
            "description": "List of External Accounts (the returned list is empty if no External Accounts exist)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ExternalAccount",
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "account_owner_name",
                          "id",
                          "currency",
                          "customer_id",
                          "account_type",
                          "created_at",
                          "updated_at",
                          "active"
                        ],
                        "allOf": [
                          {
                            "required": [
                              "account_owner_name",
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A UUID that uniquely identifies a resource",
                                "type": "string",
                                "pattern": "[a-z0-9]*",
                                "minLength": 1,
                                "maxLength": 42,
                                "readOnly": true
                              },
                              "customer_id": {
                                "description": "The id of the Bridge customer that this External Account belongs to",
                                "type": "string",
                                "minLength": 1,
                                "readOnly": true
                              },
                              "currency": {
                                "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                                "type": "string",
                                "enum": [
                                  "usd",
                                  "eur"
                                ]
                              },
                              "bank_name": {
                                "description": "Bank name of the account (e.g. \"Chase\")",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 256
                              },
                              "account_owner_name": {
                                "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 256
                              },
                              "last_4": {
                                "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                                "type": "string",
                                "minLength": 1,
                                "readOnly": true
                              },
                              "account_number": {
                                "writeOnly": true,
                                "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                                "type": "string",
                                "minLength": 12
                              },
                              "routing_number": {
                                "writeOnly": true,
                                "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                                "type": "string",
                                "minLength": 9
                              },
                              "account_type": {
                                "description": "Type of the bank account. The default is `us`",
                                "type": "string",
                                "enum": [
                                  "us",
                                  "iban"
                                ]
                              },
                              "iban": {
                                "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                                "required": [
                                  "account_number",
                                  "bic",
                                  "country",
                                  "last_4"
                                ],
                                "properties": {
                                  "account_number": {
                                    "type": "string",
                                    "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                                    "minLength": 1,
                                    "writeOnly": true
                                  },
                                  "bic": {
                                    "type": "string",
                                    "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                                    "minLength": 1
                                  },
                                  "country": {
                                    "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3
                                  },
                                  "last_4": {
                                    "description": "Last 4 digits of the bank account number",
                                    "minLength": 1,
                                    "type": "string",
                                    "readOnly": true
                                  }
                                }
                              },
                              "account": {
                                "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                                "required": [
                                  "account_number",
                                  "routing_number",
                                  "last_4"
                                ],
                                "properties": {
                                  "account_number": {
                                    "type": "string",
                                    "description": "The bank account number",
                                    "minLength": 1,
                                    "writeOnly": true
                                  },
                                  "routing_number": {
                                    "type": "string",
                                    "description": "The bank routing number",
                                    "minLength": 9,
                                    "maxLength": 9
                                  },
                                  "last_4": {
                                    "description": "Last 4 digits of the bank account number",
                                    "minLength": 1,
                                    "type": "string",
                                    "readOnly": true
                                  }
                                }
                              },
                              "account_owner_type": {
                                "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                                "type": "string",
                                "enum": [
                                  "individual",
                                  "business"
                                ]
                              },
                              "first_name": {
                                "type": "string",
                                "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                              },
                              "last_name": {
                                "type": "string",
                                "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                              },
                              "business_name": {
                                "type": "string",
                                "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                              },
                              "address": {
                                "required": [
                                  "street_line_1",
                                  "country",
                                  "city"
                                ],
                                "properties": {
                                  "street_line_1": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "street_line_2": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "city": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "state": {
                                    "type": "string",
                                    "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                                    "minLength": 2,
                                    "maxLength": 2
                                  },
                                  "postal_code": {
                                    "type": "string",
                                    "description": "Must be supplied for countries that use postal codes.",
                                    "minLength": 1
                                  },
                                  "country": {
                                    "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                                    "type": "string",
                                    "minLength": 3,
                                    "maxLength": 3
                                  }
                                },
                                "writeOnly": true,
                                "description": "Address of the beneficiary of this account. Required for `us` accounts."
                              },
                              "created_at": {
                                "readOnly": true,
                                "type": "string",
                                "description": "Time of creation of the External Account",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "readOnly": true,
                                "type": "string",
                                "description": "Time of last update of the External Account",
                                "format": "date-time"
                              },
                              "active": {
                                "readOnly": true,
                                "type": "boolean",
                                "description": "Whether or not this External Account is active"
                              },
                              "beneficiary_address_valid": {
                                "readOnly": true,
                                "type": "boolean",
                                "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                              }
                            }
                          },
                          {
                            "properties": {
                              "account": {
                                "description": "US bank account information. It's populated when the `account_type` is `us`"
                              },
                              "currency": {
                                "description": "Currency associated with the bank account."
                              },
                              "account_type": {
                                "description": "Type of the bank account."
                              },
                              "account_owner_type": {
                                "description": "Type of the account ownership"
                              },
                              "first_name": {
                                "description": "First name of the individual account owner"
                              },
                              "last_name": {
                                "description": "Last name of the individual account owner"
                              },
                              "business_name": {
                                "description": "Business name of the business account owner"
                              },
                              "iban": {
                                "description": "IBAN bank account information. It's populated when the `account_type` is `iban`."
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "ExternalAccountsFound": {
                    "summary": "A non-empty list of External Accounts",
                    "value": {
                      "data": [
                        {
                          "id": "ea_123",
                          "account_type": "us",
                          "currency": "usd",
                          "customer_id": "cust_123",
                          "account_owner_name": "John Doe",
                          "bank_name": "Wells Fargo",
                          "last_4": "1111",
                          "active": true,
                          "beneficiary_address_valid": true,
                          "account": {
                            "last_4": "1111",
                            "routing_number": "121000248"
                          },
                          "created_at": "2020-01-01T00:00:00.000Z",
                          "updated_at": "2020-01-02T00:00:00.000Z"
                        }
                      ]
                    }
                  },
                  "NoExternalAccountsFound": {
                    "summary": "An empty list of External Accounts",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new External Account",
        "tags": [
          "External Accounts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New External Account object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "account_owner_name",
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "A UUID that uniquely identifies a resource",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 42,
                    "readOnly": true
                  },
                  "customer_id": {
                    "description": "The id of the Bridge customer that this External Account belongs to",
                    "type": "string",
                    "minLength": 1,
                    "readOnly": true
                  },
                  "currency": {
                    "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                    "type": "string",
                    "enum": [
                      "usd",
                      "eur"
                    ]
                  },
                  "bank_name": {
                    "description": "Bank name of the account (e.g. \"Chase\")",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "account_owner_name": {
                    "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "last_4": {
                    "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                    "type": "string",
                    "minLength": 1,
                    "readOnly": true
                  },
                  "account_number": {
                    "writeOnly": true,
                    "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                    "type": "string",
                    "minLength": 12
                  },
                  "routing_number": {
                    "writeOnly": true,
                    "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                    "type": "string",
                    "minLength": 9
                  },
                  "account_type": {
                    "description": "Type of the bank account. The default is `us`",
                    "type": "string",
                    "enum": [
                      "us",
                      "iban"
                    ]
                  },
                  "iban": {
                    "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                    "required": [
                      "account_number",
                      "bic",
                      "country",
                      "last_4"
                    ],
                    "properties": {
                      "account_number": {
                        "type": "string",
                        "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                        "minLength": 1,
                        "writeOnly": true
                      },
                      "bic": {
                        "type": "string",
                        "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                        "minLength": 1
                      },
                      "country": {
                        "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 3
                      },
                      "last_4": {
                        "description": "Last 4 digits of the bank account number",
                        "minLength": 1,
                        "type": "string",
                        "readOnly": true
                      }
                    }
                  },
                  "account": {
                    "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                    "required": [
                      "account_number",
                      "routing_number",
                      "last_4"
                    ],
                    "properties": {
                      "account_number": {
                        "type": "string",
                        "description": "The bank account number",
                        "minLength": 1,
                        "writeOnly": true
                      },
                      "routing_number": {
                        "type": "string",
                        "description": "The bank routing number",
                        "minLength": 9,
                        "maxLength": 9
                      },
                      "last_4": {
                        "description": "Last 4 digits of the bank account number",
                        "minLength": 1,
                        "type": "string",
                        "readOnly": true
                      }
                    }
                  },
                  "account_owner_type": {
                    "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                    "type": "string",
                    "enum": [
                      "individual",
                      "business"
                    ]
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                  },
                  "business_name": {
                    "type": "string",
                    "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                  },
                  "address": {
                    "required": [
                      "street_line_1",
                      "country",
                      "city"
                    ],
                    "properties": {
                      "street_line_1": {
                        "type": "string",
                        "minLength": 1
                      },
                      "street_line_2": {
                        "type": "string",
                        "minLength": 1
                      },
                      "city": {
                        "type": "string",
                        "minLength": 1
                      },
                      "state": {
                        "type": "string",
                        "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                        "minLength": 2,
                        "maxLength": 2
                      },
                      "postal_code": {
                        "type": "string",
                        "description": "Must be supplied for countries that use postal codes.",
                        "minLength": 1
                      },
                      "country": {
                        "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 3
                      }
                    },
                    "writeOnly": true,
                    "description": "Address of the beneficiary of this account. Required for `us` accounts."
                  },
                  "created_at": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Time of creation of the External Account",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Time of last update of the External Account",
                    "format": "date-time"
                  },
                  "active": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Whether or not this External Account is active"
                  },
                  "beneficiary_address_valid": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "External Account object created",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_owner_name",
                    "id",
                    "currency",
                    "customer_id",
                    "account_type",
                    "created_at",
                    "updated_at",
                    "active"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "account_owner_name",
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "customer_id": {
                          "description": "The id of the Bridge customer that this External Account belongs to",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "currency": {
                          "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                          "type": "string",
                          "enum": [
                            "usd",
                            "eur"
                          ]
                        },
                        "bank_name": {
                          "description": "Bank name of the account (e.g. \"Chase\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "account_owner_name": {
                          "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "last_4": {
                          "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "account_number": {
                          "writeOnly": true,
                          "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                          "type": "string",
                          "minLength": 12
                        },
                        "routing_number": {
                          "writeOnly": true,
                          "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                          "type": "string",
                          "minLength": 9
                        },
                        "account_type": {
                          "description": "Type of the bank account. The default is `us`",
                          "type": "string",
                          "enum": [
                            "us",
                            "iban"
                          ]
                        },
                        "iban": {
                          "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                          "required": [
                            "account_number",
                            "bic",
                            "country",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "bic": {
                              "type": "string",
                              "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account": {
                          "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                          "required": [
                            "account_number",
                            "routing_number",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The bank account number",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "routing_number": {
                              "type": "string",
                              "description": "The bank routing number",
                              "minLength": 9,
                              "maxLength": 9
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account_owner_type": {
                          "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                          "type": "string",
                          "enum": [
                            "individual",
                            "business"
                          ]
                        },
                        "first_name": {
                          "type": "string",
                          "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "business_name": {
                          "type": "string",
                          "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                        },
                        "address": {
                          "required": [
                            "street_line_1",
                            "country",
                            "city"
                          ],
                          "properties": {
                            "street_line_1": {
                              "type": "string",
                              "minLength": 1
                            },
                            "street_line_2": {
                              "type": "string",
                              "minLength": 1
                            },
                            "city": {
                              "type": "string",
                              "minLength": 1
                            },
                            "state": {
                              "type": "string",
                              "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "postal_code": {
                              "type": "string",
                              "description": "Must be supplied for countries that use postal codes.",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            }
                          },
                          "writeOnly": true,
                          "description": "Address of the beneficiary of this account. Required for `us` accounts."
                        },
                        "created_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of creation of the External Account",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of last update of the External Account",
                          "format": "date-time"
                        },
                        "active": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether or not this External Account is active"
                        },
                        "beneficiary_address_valid": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                        }
                      }
                    },
                    {
                      "properties": {
                        "account": {
                          "description": "US bank account information. It's populated when the `account_type` is `us`"
                        },
                        "currency": {
                          "description": "Currency associated with the bank account."
                        },
                        "account_type": {
                          "description": "Type of the bank account."
                        },
                        "account_owner_type": {
                          "description": "Type of the account ownership"
                        },
                        "first_name": {
                          "description": "First name of the individual account owner"
                        },
                        "last_name": {
                          "description": "Last name of the individual account owner"
                        },
                        "business_name": {
                          "description": "Business name of the business account owner"
                        },
                        "iban": {
                          "description": "IBAN bank account information. It's populated when the `account_type` is `iban`."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "SuccessfulExternalAccountResponse": {
                    "summary": "A successful External Account object",
                    "value": {
                      "id": "ea_123",
                      "account_type": "us",
                      "currency": "usd",
                      "customer_id": "cust_123",
                      "account_owner_name": "John Doe",
                      "bank_name": "Wells Fargo",
                      "last_4": "1111",
                      "active": true,
                      "beneficiary_address_valid": true,
                      "account": {
                        "last_4": "1111",
                        "routing_number": "121000248"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulIbanExternalAccountResponse": {
                    "summary": "A successful iban External Account object",
                    "value": {
                      "id": "ea_123",
                      "customer_id": "cust_123",
                      "account_type": "iban",
                      "currency": "eur",
                      "account_owner_name": "John Doe",
                      "bank_name": "AAC CAPITAL PARTNERS LIMITED",
                      "active": true,
                      "iban": {
                        "last_4": "5981",
                        "bic": "BARBGB2LLEI",
                        "country": "NLD"
                      },
                      "account_owner_type": "individual",
                      "first_name": "John",
                      "last_name": "Doe",
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/external_accounts/{externalAccountID}": {
      "parameters": [
        {
          "name": "customerID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        },
        {
          "name": "externalAccountID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "get": {
        "summary": "Retrieve an External Account object",
        "description": "Retrieve an External Account object (banks, debit cards etc) from the passed in customer ID and External Account ID",
        "tags": [
          "External Accounts"
        ],
        "responses": {
          "200": {
            "description": "Successful External Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_owner_name",
                    "id",
                    "currency",
                    "customer_id",
                    "account_type",
                    "created_at",
                    "updated_at",
                    "active"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "account_owner_name",
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "customer_id": {
                          "description": "The id of the Bridge customer that this External Account belongs to",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "currency": {
                          "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                          "type": "string",
                          "enum": [
                            "usd",
                            "eur"
                          ]
                        },
                        "bank_name": {
                          "description": "Bank name of the account (e.g. \"Chase\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "account_owner_name": {
                          "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "last_4": {
                          "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "account_number": {
                          "writeOnly": true,
                          "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                          "type": "string",
                          "minLength": 12
                        },
                        "routing_number": {
                          "writeOnly": true,
                          "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                          "type": "string",
                          "minLength": 9
                        },
                        "account_type": {
                          "description": "Type of the bank account. The default is `us`",
                          "type": "string",
                          "enum": [
                            "us",
                            "iban"
                          ]
                        },
                        "iban": {
                          "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                          "required": [
                            "account_number",
                            "bic",
                            "country",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "bic": {
                              "type": "string",
                              "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account": {
                          "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                          "required": [
                            "account_number",
                            "routing_number",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The bank account number",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "routing_number": {
                              "type": "string",
                              "description": "The bank routing number",
                              "minLength": 9,
                              "maxLength": 9
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account_owner_type": {
                          "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                          "type": "string",
                          "enum": [
                            "individual",
                            "business"
                          ]
                        },
                        "first_name": {
                          "type": "string",
                          "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "business_name": {
                          "type": "string",
                          "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                        },
                        "address": {
                          "required": [
                            "street_line_1",
                            "country",
                            "city"
                          ],
                          "properties": {
                            "street_line_1": {
                              "type": "string",
                              "minLength": 1
                            },
                            "street_line_2": {
                              "type": "string",
                              "minLength": 1
                            },
                            "city": {
                              "type": "string",
                              "minLength": 1
                            },
                            "state": {
                              "type": "string",
                              "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "postal_code": {
                              "type": "string",
                              "description": "Must be supplied for countries that use postal codes.",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            }
                          },
                          "writeOnly": true,
                          "description": "Address of the beneficiary of this account. Required for `us` accounts."
                        },
                        "created_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of creation of the External Account",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of last update of the External Account",
                          "format": "date-time"
                        },
                        "active": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether or not this External Account is active"
                        },
                        "beneficiary_address_valid": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                        }
                      }
                    },
                    {
                      "properties": {
                        "account": {
                          "description": "US bank account information. It's populated when the `account_type` is `us`"
                        },
                        "currency": {
                          "description": "Currency associated with the bank account."
                        },
                        "account_type": {
                          "description": "Type of the bank account."
                        },
                        "account_owner_type": {
                          "description": "Type of the account ownership"
                        },
                        "first_name": {
                          "description": "First name of the individual account owner"
                        },
                        "last_name": {
                          "description": "Last name of the individual account owner"
                        },
                        "business_name": {
                          "description": "Business name of the business account owner"
                        },
                        "iban": {
                          "description": "IBAN bank account information. It's populated when the `account_type` is `iban`."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "SuccessfulExternalAccountResponse": {
                    "summary": "A successful External Account object",
                    "value": {
                      "id": "ea_123",
                      "account_type": "us",
                      "currency": "usd",
                      "customer_id": "cust_123",
                      "account_owner_name": "John Doe",
                      "bank_name": "Wells Fargo",
                      "last_4": "1111",
                      "active": true,
                      "beneficiary_address_valid": true,
                      "account": {
                        "last_4": "1111",
                        "routing_number": "121000248"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulIbanExternalAccountResponse": {
                    "summary": "A successful iban External Account object",
                    "value": {
                      "id": "ea_123",
                      "customer_id": "cust_123",
                      "account_type": "iban",
                      "currency": "eur",
                      "account_owner_name": "John Doe",
                      "bank_name": "AAC CAPITAL PARTNERS LIMITED",
                      "active": true,
                      "iban": {
                        "last_4": "5981",
                        "bic": "BARBGB2LLEI",
                        "country": "NLD"
                      },
                      "account_owner_type": "individual",
                      "first_name": "John",
                      "last_name": "Doe",
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Add a beneficiary address to an account if it is missing",
        "tags": [
          "External Accounts"
        ],
        "requestBody": {
          "description": "Beneficiary address",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "type"
                ],
                "properties": {
                  "address": {
                    "required": [
                      "street_line_1",
                      "country",
                      "city"
                    ],
                    "properties": {
                      "street_line_1": {
                        "type": "string",
                        "minLength": 1
                      },
                      "street_line_2": {
                        "type": "string",
                        "minLength": 1
                      },
                      "city": {
                        "type": "string",
                        "minLength": 1
                      },
                      "state": {
                        "type": "string",
                        "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                        "minLength": 2,
                        "maxLength": 2
                      },
                      "postal_code": {
                        "type": "string",
                        "description": "Must be supplied for countries that use postal codes.",
                        "minLength": 1
                      },
                      "country": {
                        "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 3
                      }
                    },
                    "writeOnly": true,
                    "description": "address of the beneficiary of this account"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "External Account object updated",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_owner_name",
                    "id",
                    "currency",
                    "customer_id",
                    "account_type",
                    "created_at",
                    "updated_at",
                    "active"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "account_owner_name",
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "customer_id": {
                          "description": "The id of the Bridge customer that this External Account belongs to",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "currency": {
                          "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                          "type": "string",
                          "enum": [
                            "usd",
                            "eur"
                          ]
                        },
                        "bank_name": {
                          "description": "Bank name of the account (e.g. \"Chase\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "account_owner_name": {
                          "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "last_4": {
                          "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "account_number": {
                          "writeOnly": true,
                          "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                          "type": "string",
                          "minLength": 12
                        },
                        "routing_number": {
                          "writeOnly": true,
                          "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                          "type": "string",
                          "minLength": 9
                        },
                        "account_type": {
                          "description": "Type of the bank account. The default is `us`",
                          "type": "string",
                          "enum": [
                            "us",
                            "iban"
                          ]
                        },
                        "iban": {
                          "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                          "required": [
                            "account_number",
                            "bic",
                            "country",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "bic": {
                              "type": "string",
                              "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account": {
                          "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                          "required": [
                            "account_number",
                            "routing_number",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The bank account number",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "routing_number": {
                              "type": "string",
                              "description": "The bank routing number",
                              "minLength": 9,
                              "maxLength": 9
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account_owner_type": {
                          "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                          "type": "string",
                          "enum": [
                            "individual",
                            "business"
                          ]
                        },
                        "first_name": {
                          "type": "string",
                          "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "business_name": {
                          "type": "string",
                          "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                        },
                        "address": {
                          "required": [
                            "street_line_1",
                            "country",
                            "city"
                          ],
                          "properties": {
                            "street_line_1": {
                              "type": "string",
                              "minLength": 1
                            },
                            "street_line_2": {
                              "type": "string",
                              "minLength": 1
                            },
                            "city": {
                              "type": "string",
                              "minLength": 1
                            },
                            "state": {
                              "type": "string",
                              "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "postal_code": {
                              "type": "string",
                              "description": "Must be supplied for countries that use postal codes.",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            }
                          },
                          "writeOnly": true,
                          "description": "Address of the beneficiary of this account. Required for `us` accounts."
                        },
                        "created_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of creation of the External Account",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of last update of the External Account",
                          "format": "date-time"
                        },
                        "active": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether or not this External Account is active"
                        },
                        "beneficiary_address_valid": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                        }
                      }
                    },
                    {
                      "properties": {
                        "account": {
                          "description": "US bank account information. It's populated when the `account_type` is `us`"
                        },
                        "currency": {
                          "description": "Currency associated with the bank account."
                        },
                        "account_type": {
                          "description": "Type of the bank account."
                        },
                        "account_owner_type": {
                          "description": "Type of the account ownership"
                        },
                        "first_name": {
                          "description": "First name of the individual account owner"
                        },
                        "last_name": {
                          "description": "Last name of the individual account owner"
                        },
                        "business_name": {
                          "description": "Business name of the business account owner"
                        },
                        "iban": {
                          "description": "IBAN bank account information. It's populated when the `account_type` is `iban`."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BeneficiaryAddressAlreadyExistsExample": {
                    "summary": "Beneficairy address already exists",
                    "value": {
                      "code": "invalid_parameters",
                      "message": "Please resubmit the following parameters that are either missing or invalid.",
                      "source": {
                        "key": {
                          "address": "Beneficiary address already exists"
                        }
                      }
                    }
                  },
                  "InvalidrequestExample": {
                    "summary": "Bad External Account request",
                    "value": {
                      "code": "invalid_parameters",
                      "message": "Please resubmit the following parameters that are either missing or invalid.",
                      "source": {
                        "key": {
                          "address.city": "must be set"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a single External Account object",
        "tags": [
          "External Accounts"
        ],
        "description": "Delete an External Account object from the passed in External Account ID",
        "responses": {
          "200": {
            "description": "Successfully deleted External Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_owner_name",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "customer_id": {
                      "description": "The id of the Bridge customer that this External Account belongs to",
                      "type": "string",
                      "minLength": 1,
                      "readOnly": true
                    },
                    "currency": {
                      "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                      "type": "string",
                      "enum": [
                        "usd",
                        "eur"
                      ]
                    },
                    "bank_name": {
                      "description": "Bank name of the account (e.g. \"Chase\")",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "account_owner_name": {
                      "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "last_4": {
                      "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                      "type": "string",
                      "minLength": 1,
                      "readOnly": true
                    },
                    "account_number": {
                      "writeOnly": true,
                      "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                      "type": "string",
                      "minLength": 12
                    },
                    "routing_number": {
                      "writeOnly": true,
                      "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                      "type": "string",
                      "minLength": 9
                    },
                    "account_type": {
                      "description": "Type of the bank account. The default is `us`",
                      "type": "string",
                      "enum": [
                        "us",
                        "iban"
                      ]
                    },
                    "iban": {
                      "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                      "required": [
                        "account_number",
                        "bic",
                        "country",
                        "last_4"
                      ],
                      "properties": {
                        "account_number": {
                          "type": "string",
                          "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                          "minLength": 1,
                          "writeOnly": true
                        },
                        "bic": {
                          "type": "string",
                          "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                          "minLength": 1
                        },
                        "country": {
                          "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                          "type": "string",
                          "minLength": 3,
                          "maxLength": 3
                        },
                        "last_4": {
                          "description": "Last 4 digits of the bank account number",
                          "minLength": 1,
                          "type": "string",
                          "readOnly": true
                        }
                      }
                    },
                    "account": {
                      "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                      "required": [
                        "account_number",
                        "routing_number",
                        "last_4"
                      ],
                      "properties": {
                        "account_number": {
                          "type": "string",
                          "description": "The bank account number",
                          "minLength": 1,
                          "writeOnly": true
                        },
                        "routing_number": {
                          "type": "string",
                          "description": "The bank routing number",
                          "minLength": 9,
                          "maxLength": 9
                        },
                        "last_4": {
                          "description": "Last 4 digits of the bank account number",
                          "minLength": 1,
                          "type": "string",
                          "readOnly": true
                        }
                      }
                    },
                    "account_owner_type": {
                      "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                      "type": "string",
                      "enum": [
                        "individual",
                        "business"
                      ]
                    },
                    "first_name": {
                      "type": "string",
                      "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                    },
                    "last_name": {
                      "type": "string",
                      "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                    },
                    "business_name": {
                      "type": "string",
                      "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                    },
                    "address": {
                      "required": [
                        "street_line_1",
                        "country",
                        "city"
                      ],
                      "properties": {
                        "street_line_1": {
                          "type": "string",
                          "minLength": 1
                        },
                        "street_line_2": {
                          "type": "string",
                          "minLength": 1
                        },
                        "city": {
                          "type": "string",
                          "minLength": 1
                        },
                        "state": {
                          "type": "string",
                          "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                          "minLength": 2,
                          "maxLength": 2
                        },
                        "postal_code": {
                          "type": "string",
                          "description": "Must be supplied for countries that use postal codes.",
                          "minLength": 1
                        },
                        "country": {
                          "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                          "type": "string",
                          "minLength": 3,
                          "maxLength": 3
                        }
                      },
                      "writeOnly": true,
                      "description": "Address of the beneficiary of this account. Required for `us` accounts."
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the External Account",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of last update of the External Account",
                      "format": "date-time"
                    },
                    "active": {
                      "readOnly": true,
                      "type": "boolean",
                      "description": "Whether or not this External Account is active"
                    },
                    "beneficiary_address_valid": {
                      "readOnly": true,
                      "type": "boolean",
                      "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                    }
                  }
                },
                "examples": {
                  "DeletedExternalAccountResponse": {
                    "summary": "A successful External Account object",
                    "value": {
                      "id": "ea_123",
                      "account_type": "us",
                      "currency": "usd",
                      "customer_id": "cust_123",
                      "account_owner_name": "John Doe",
                      "bank_name": "Wells Fargo",
                      "last_4": "1111",
                      "active": true,
                      "beneficiary_address_valid": true,
                      "account": {
                        "last_4": "1111",
                        "routing_number": "121000248"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/tos_acceptance_link": {
      "get": {
        "summary": "Retrieve a hosted URL for ToS acceptance for an existing customer",
        "tags": [
          "Customers"
        ],
        "description": "The page at the returned URL will guide the user through the Bridge Terms of Service (ToS) acceptance flow. This can be used by existing customers to accept a new version of the ToS.",
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Hosted URL for ToS acceptance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "A hosted URL for ToS acceptance"
                    }
                  }
                },
                "examples": {
                  "TosAcceptanceLink": {
                    "summary": "A sample ToS acceptance link",
                    "value": {
                      "url": "https://dashboard.bridge.xyz/accept-terms-of-service?email=sage%40blick-mayer.example&t=74ea7c13-2b52-5073-bd12-6879f92b88dd"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/kyc_link": {
      "get": {
        "summary": "Retrieve a hosted KYC Link for an existing customer",
        "tags": [
          "Customers"
        ],
        "description": "The page at the returned URL will guide the user through a Bridge KYC flow. This can be used by existing customers to provide additional KYC information required for certain features or services that Bridge offers.\n\nFor example, to enable an existing customer to use the `SEPA`/`Euro` services, they are required to provide `proof of address`. An additional parameter, `endorsement=sepa`, can be included to request a KYC link specifically for this purpose",
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "in": "query",
            "name": "endorsement",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "sepa"
              ]
            },
            "description": "An endorsement is the approval required for a customer to use a particular product or service offered by Bridge"
          }
        ],
        "responses": {
          "200": {
            "description": "A Hosted URL for KYC",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "A hosted KYC link"
                    }
                  }
                },
                "examples": {
                  "KycLink": {
                    "summary": "A sample KYC link",
                    "value": {
                      "url": "https://bridge.withpersona.com/verify?inquiry-template-id=itmpl_NtIXpb9AbEYCPxGo5iRbc9d2&reference-id=75d2f259-6810-4cde-a9b9-83eca42b0ebf"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/transfers": {
      "parameters": [
        {
          "name": "customerID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        },
        {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer"
          },
          "description": "The numbers of items to return (default of 10, max of 100)"
        },
        {
          "in": "query",
          "name": "starting_after",
          "schema": {
            "type": "string"
          },
          "description": "This is a transfer id. If this is specified, the next page that starts with a transfer right AFTER the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers older than the specified transfer id will be returned (shouldn't be set if ending_before is set)"
        },
        {
          "in": "query",
          "name": "ending_before",
          "schema": {
            "type": "string"
          },
          "description": "This is a transfer id. If this is specified, the previous page that ends with a transfer right BEFORE the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers newer than the specified transfer id will be returned (shouldn't be set if starting_after is set)"
        },
        {
          "name": "tx_hash",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string"
          },
          "description": "The hash of the transaction"
        },
        {
          "in": "query",
          "name": "updated_after_ms",
          "schema": {
            "type": "integer"
          },
          "description": "This is a unix timestamp in milliseconds. If this is specified, transfers updated AFTER the specified timestamp will be returned"
        },
        {
          "in": "query",
          "name": "updated_before_ms",
          "schema": {
            "type": "integer"
          },
          "description": "This is a unix timestamp in milliseconds. If this is specified, transfers updated BEFORE the specified timestamp will be returned"
        }
      ],
      "get": {
        "summary": "Get all transfers",
        "tags": [
          "Customers"
        ],
        "description": "Get all active and completed transfers for a customer.",
        "responses": {
          "200": {
            "description": "List of transfers (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Transfers",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of transfers returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id",
                          "amount",
                          "developer_fee",
                          "currency",
                          "on_behalf_of",
                          "source",
                          "destination",
                          "state",
                          "receipt",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "client_reference_id": {
                            "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "amount": {
                            "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                            "type": "string"
                          },
                          "currency": {
                            "description": "Fiat currency for the transfer amount and developer fee. It's the source currency if that is a fiat currency or the fiat currency to which the source currency is pegged.",
                            "type": "string",
                            "enum": [
                              "usd",
                              "eur"
                            ]
                          },
                          "on_behalf_of": {
                            "description": "The id of the Bridge customer that you are moving funds on behalf of.",
                            "type": "string"
                          },
                          "developer_fee": {
                            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account. This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                            "type": "string"
                          },
                          "source": {
                            "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                            "allOf": [
                              {
                                "required": [
                                  "currency",
                                  "payment_rail"
                                ],
                                "properties": {
                                  "currency": {
                                    "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` is supported as the destination currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` is supported as the destination currency;\n\nWhen `swift` is specified as the source rail:\n  1. the source currency must be `usd`;\n  2. only `usdc` is supported as the destination currency",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "external_account_id": {
                                    "description": "A UUID that uniquely identifies a resource",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 42
                                  },
                                  "omad": {
                                    "readOnly": true,
                                    "description": "The OMAD of a wire transfer",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 40
                                  },
                                  "imad": {
                                    "readOnly": true,
                                    "description": "The IMAD of a wire transfer",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 40
                                  },
                                  "bank_beneficiary_name": {
                                    "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "bank_routing_number": {
                                    "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "bank_name": {
                                    "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "description": {
                                    "description": "(ACH only) The description of the deposit that the customer sent",
                                    "type": "string",
                                    "readOnly": true
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "currency": {
                                    "description": "The source currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "The source payment rail",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "from_address": {
                                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          "destination": {
                            "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                            "allOf": [
                              {
                                "required": [
                                  "currency",
                                  "payment_rail"
                                ],
                                "properties": {
                                  "currency": {
                                    "description": "When `eur` is specified as the destination currency:\n  1. the destination rail must be `sepa`;\n  2. only `usdc` is supported as the source currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "When `sepa` is specified as the destination rail:\n  1. the destination currency must be `eur`;\n  2. only `usdc` is supported as the source currency;\n\n When `swift` is specified as the destination rail:\n  1. the destination currency must be `usd`;\n  2. only `usdc` is supported as the source currency",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "external_account_id": {
                                    "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 42
                                  },
                                  "omad": {
                                    "readOnly": true,
                                    "description": "The OMAD of a wire transfer",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 40
                                  },
                                  "imad": {
                                    "readOnly": true,
                                    "description": "The IMAD of a wire transfer",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 40
                                  },
                                  "trace_number": {
                                    "readOnly": true,
                                    "description": "The trace number of an ACH transfer",
                                    "type": "string",
                                    "pattern": "[0-9]",
                                    "minLength": 15,
                                    "maxLength": 15
                                  },
                                  "wire_message": {
                                    "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 256
                                  },
                                  "sepa_reference": {
                                    "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                                    "type": "string",
                                    "minLength": 6,
                                    "maxLength": 140
                                  },
                                  "swift_reference": {
                                    "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 256
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "currency": {
                                    "description": "The destination currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "The destination payment rail",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "to_address": {
                                    "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                                    "type": "string"
                                  },
                                  "wire_message": {
                                    "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire.  This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                                    "type": "string"
                                  },
                                  "blockchain_memo": {
                                    "description": "A message to be sent with a crypto transaction, only allowed when the payment rail is Stellar.",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          "state": {
                            "description": "Status of the transfer. See [Transfer States](https://apidocs.bridge.xyz/docs/transfers-1#transfer-states) for more details.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "awaiting_funds",
                              "in_review",
                              "funds_received",
                              "payment_submitted",
                              "payment_processed",
                              "canceled",
                              "error",
                              "returned",
                              "refunded"
                            ]
                          },
                          "source_deposit_instructions": {
                            "readOnly": true,
                            "description": "Some transfers require a deposit to be made by the customer before Bridge can start the process.  Instructions for how to kick off the transfer will be included here.  The deposit must match these instructions exactly, or the transfer will fail.",
                            "allOf": [
                              {
                                "readOnly": true,
                                "required": [
                                  "payment_rail",
                                  "amount",
                                  "currency"
                                ],
                                "properties": {
                                  "payment_rail": {
                                    "description": "The payment rail that Bridge is expecting funds to arrive on.  For a crypto based source on the transfer, this is the chain, i.e. ethereum or polygon",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "solana",
                                      "stellar"
                                    ]
                                  },
                                  "amount": {
                                    "description": "Amount of the deposit, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                                    "type": "string"
                                  },
                                  "currency": {
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd"
                                    ]
                                  },
                                  "from_address": {
                                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                                    "type": "string"
                                  },
                                  "to_address": {
                                    "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
                                    "type": "string"
                                  },
                                  "deposit_message": {
                                    "description": "The message that the customer MUST include in their wire memo/message or ach push description",
                                    "type": "string"
                                  },
                                  "bank_name": {
                                    "description": "The name of the bank that the customer should send the deposit to",
                                    "type": "string"
                                  },
                                  "bank_address": {
                                    "description": "The address of the bank that the customer should send the deposit to",
                                    "type": "string"
                                  },
                                  "bank_routing_number": {
                                    "description": "The routing number of the bank that the customer should send the deposit to",
                                    "type": "string"
                                  },
                                  "bank_account_number": {
                                    "description": "The account number of the bank that the customer should send the deposit to",
                                    "type": "string"
                                  },
                                  "bank_beneficiary_name": {
                                    "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "currency": {
                                    "description": "The source currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "The source payment rail",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "amount": {
                                    "description": "Amount of the deposit, expressed as a decimal string. It's denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                                    "type": "string"
                                  },
                                  "deposit_message": {
                                    "description": "The message that the customer MUST include in their `wire memo/message`, `ach push description`, `sepa reference`, or `swift reference/remittance information`.",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          "receipt": {
                            "description": "Receipt information of a transfer",
                            "required": [
                              "initial_amount",
                              "developer_fee",
                              "exchange_fee",
                              "subtotal_amount"
                            ],
                            "properties": {
                              "initial_amount": {
                                "description": "The initial amount of the transfer, represented as a decimal string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see the top-level `currency` field for more info)",
                                "type": "string"
                              },
                              "developer_fee": {
                                "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the transfer's fiat currency (see the top-level `currency` field for more info).",
                                "type": "string"
                              },
                              "exchange_fee": {
                                "description": "The fee, expressed as a decimal string, represents the amount Bridge charges for facilitating the transfer.  This is the final amount to take out of what is ultimately received by your customer, not a percentage.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                                "type": "string"
                              },
                              "subtotal_amount": {
                                "description": "The initial amount of the transfer less fixed fees (including the developer_fee and exchange_fee). Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                                "type": "string"
                              },
                              "remaining_prefunded_balance": {
                                "description": "For Prefunded Accounts, this value will represent the remaining account balance after the transfer.",
                                "type": "string"
                              },
                              "gas_fee": {
                                "description": "The fee, expressed as a decimal string. It's deducted from the withdrawn amount to pay for gas.  Only nonzero to crypto withdrawals that cost gas (e.g. USDT or DAI), and only known when the transaction is confirmed on-chain.  Will be missing if not yet known.\n\nIt's denominated in the fiat currency to which the destination currency is pegged.",
                                "type": "string"
                              },
                              "final_amount": {
                                "description": "The final amount of the transfer, expressed as a decimal string, equal to the subtotal_amount minus any gas fees.  If the gas fee is not known, this field will be missing.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the destination currency if that is a fiat currency or the fiat currency to which the destination currency is pegged.",
                                "type": "string"
                              },
                              "source_tx_hash": {
                                "description": "The hash of the on-chain deposit to the source address, where applicable"
                              },
                              "destination_tx_hash": {
                                "description": "The hash of the on-chain transfer to the destination address, where applicable"
                              },
                              "exchange_rate": {
                                "description": "The effective exchange rate can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee. This rate includes a currency conversion spread and is subject to a rounding precision loss during the calculation. Currently it's populated for SEPA onramp/offramp transfers only."
                              },
                              "url": {
                                "description": "The URL of a user-facing copy of the receipt.",
                                "type": "string"
                              }
                            }
                          },
                          "return_details": {
                            "readOnly": true,
                            "description": "Return information, if the transfer has been returned.",
                            "properties": {
                              "reason": {
                                "description": "The reason for the return, as given by the returning financial institution.",
                                "type": "string"
                              }
                            }
                          },
                          "created_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of creation of the transfer",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of update of the transfer",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "TransfersFound": {
                    "summary": "A non-empty list of transfers",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "id": "transfer_456",
                          "client_reference_id": "client_transfer_id_456",
                          "state": "funds_received",
                          "on_behalf_of": "cust_123",
                          "amount": "500.25",
                          "developer_fee": "0.0",
                          "source": {
                            "payment_rail": "ach",
                            "currency": "usd",
                            "external_account_id": "ext_123"
                          },
                          "destination": {
                            "payment_rail": "ethereum",
                            "currency": "usdc",
                            "to_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                          },
                          "receipt": {
                            "initial_amount": "500.25",
                            "developer_fee": "0.0",
                            "exchange_fee": "0.0",
                            "subtotal_amount": "500.25",
                            "gas_fee": "0.0",
                            "final_amount": "500.25",
                            "destination_tx_hash": "0xdeadbeef",
                            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                          },
                          "created_at": "2020-01-02T00:00:00.000Z",
                          "updated_at": "2020-01-03T00:00:00.000Z"
                        },
                        {
                          "id": "transfer_123",
                          "client_reference_id": "client_transfer_id_123",
                          "state": "awaiting_funds",
                          "on_behalf_of": "cust_123",
                          "amount": "75.0",
                          "developer_fee": "0.0",
                          "source": {
                            "payment_rail": "ethereum",
                            "currency": "usdc",
                            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                          },
                          "destination": {
                            "payment_rail": "ach",
                            "currency": "usd",
                            "external_account_id": "ext_123"
                          },
                          "source_deposit_instructions": {
                            "payment_rail": "ethereum",
                            "amount": "75.0",
                            "currency": "usdc",
                            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                            "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                          },
                          "receipt": {
                            "initial_amount": "75.0",
                            "developer_fee": "0.0",
                            "exchange_fee": "0.0",
                            "subtotal_amount": "75.0",
                            "gas_fe": "0.0",
                            "final_amount": "75.0",
                            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                          },
                          "created_at": "2020-01-01T00:00:00.000Z",
                          "updated_at": "2020-01-02T00:00:00.000Z"
                        }
                      ]
                    }
                  },
                  "NoTransfersFound": {
                    "summary": "An empty list of transfers",
                    "value": {
                      "count": 0,
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/tos_links": {
      "post": {
        "summary": "Request a hosted URL for ToS acceptance for new customer creation",
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "The URL endpoint returned will guide the user through a Bridge TOS flow. Signing this acceptance flow is a requirement for creating customers.",
        "responses": {
          "201": {
            "description": "A Bridge hosted URL for users to complete terms of service signing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "A Bridge hosted URL for users to complete terms of service signing."
                    }
                  }
                },
                "examples": {
                  "TosUrl": {
                    "summary": "A sample Bridge hosted URL",
                    "value": {
                      "data": {
                        "url": "https://dashboard.bridge.xyz/accept-terms-of-service?session_token=4d5d8c45-9feb-422a-bb5e-0fd32e3b3c53&redirect_uri=https%3A%2F%2Fgoogle.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/plaid_link_requests": {
      "post": {
        "summary": "Generate a Plaid Link token for a customer",
        "tags": [
          "Plaid"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Plaid Link token generated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "link_token": {
                      "type": "string",
                      "description": "Link token generated via the Plaid Link SDK"
                    },
                    "link_token_expires_at": {
                      "type": "string",
                      "description": "Expiration time of the link token",
                      "format": "date-time"
                    },
                    "callback_url": {
                      "type": "string",
                      "description": "URL to call through Plaid Link Flow's onSuccess callback with the public token passed in the body of the request"
                    }
                  }
                },
                "examples": {
                  "PlaidLinkRequestSuccessResponse": {
                    "summary": "Successful Plaid Link token creation",
                    "value": {
                      "link_token": "plaid_link_token_123",
                      "link_token_expires_at": "2023-03-23T03:22:34.086Z",
                      "callback_url": "https://api.bridge.xyz/v0/plaid_exchange_public_token/plaid_link_token_123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plaid_exchange_public_token/{link_token}": {
      "post": {
        "summary": "Exchange Plaid public token for an access token",
        "tags": [
          "Plaid"
        ],
        "parameters": [
          {
            "name": "link_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Plaid Link token"
          }
        ],
        "requestBody": {
          "description": "Plaid public token to be exchanged",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "id",
                  "type"
                ],
                "properties": {
                  "public_token": {
                    "type": "string",
                    "description": "Public token generated via the Plaid Link SDK"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plaid public token exchanged",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Plaid public token exchanged",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message indicating the status of the request"
                    }
                  }
                },
                "examples": {
                  "PlaidExchangePublicTokenSuccessResponse": {
                    "summary": "Successful Plaid public token exchange",
                    "value": {
                      "message": "Successfully exchanged public token for access token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transfers": {
      "get": {
        "summary": "Get all transfers",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of items to return (default of 10, max of 100)"
          },
          {
            "in": "query",
            "name": "starting_after",
            "schema": {
              "type": "string"
            },
            "description": "This is a transfer id. If this is specified, the next page that starts with a transfer right AFTER the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers older than the specified transfer id will be returned (shouldn't be set if ending_before is set)"
          },
          {
            "in": "query",
            "name": "ending_before",
            "schema": {
              "type": "string"
            },
            "description": "This is a transfer id. If this is specified, the previous page that ends with a transfer right BEFORE the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers newer than the specified transfer id will be returned (shouldn't be set if starting_after is set)"
          },
          {
            "name": "tx_hash",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The hash of the transaction"
          },
          {
            "in": "query",
            "name": "updated_after_ms",
            "schema": {
              "type": "integer"
            },
            "description": "This is a unix timestamp in milliseconds. If this is specified, transfers updated AFTER the specified timestamp will be returned"
          },
          {
            "in": "query",
            "name": "updated_before_ms",
            "schema": {
              "type": "integer"
            },
            "description": "This is a unix timestamp in milliseconds. If this is specified, transfers updated BEFORE the specified timestamp will be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transfers (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Transfers",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of transfers returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id",
                          "amount",
                          "developer_fee",
                          "currency",
                          "on_behalf_of",
                          "source",
                          "destination",
                          "state",
                          "receipt",
                          "created_at",
                          "updated_at"
                        ],
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "client_reference_id": {
                            "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "amount": {
                            "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                            "type": "string"
                          },
                          "currency": {
                            "description": "Fiat currency for the transfer amount and developer fee. It's the source currency if that is a fiat currency or the fiat currency to which the source currency is pegged.",
                            "type": "string",
                            "enum": [
                              "usd",
                              "eur"
                            ]
                          },
                          "on_behalf_of": {
                            "description": "The id of the Bridge customer that you are moving funds on behalf of.",
                            "type": "string"
                          },
                          "developer_fee": {
                            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account. This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                            "type": "string"
                          },
                          "source": {
                            "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                            "allOf": [
                              {
                                "required": [
                                  "currency",
                                  "payment_rail"
                                ],
                                "properties": {
                                  "currency": {
                                    "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` is supported as the destination currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` is supported as the destination currency;\n\nWhen `swift` is specified as the source rail:\n  1. the source currency must be `usd`;\n  2. only `usdc` is supported as the destination currency",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "external_account_id": {
                                    "description": "A UUID that uniquely identifies a resource",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 42
                                  },
                                  "omad": {
                                    "readOnly": true,
                                    "description": "The OMAD of a wire transfer",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 40
                                  },
                                  "imad": {
                                    "readOnly": true,
                                    "description": "The IMAD of a wire transfer",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 40
                                  },
                                  "bank_beneficiary_name": {
                                    "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "bank_routing_number": {
                                    "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "bank_name": {
                                    "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "description": {
                                    "description": "(ACH only) The description of the deposit that the customer sent",
                                    "type": "string",
                                    "readOnly": true
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "currency": {
                                    "description": "The source currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "The source payment rail",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "from_address": {
                                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          "destination": {
                            "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                            "allOf": [
                              {
                                "required": [
                                  "currency",
                                  "payment_rail"
                                ],
                                "properties": {
                                  "currency": {
                                    "description": "When `eur` is specified as the destination currency:\n  1. the destination rail must be `sepa`;\n  2. only `usdc` is supported as the source currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "When `sepa` is specified as the destination rail:\n  1. the destination currency must be `eur`;\n  2. only `usdc` is supported as the source currency;\n\n When `swift` is specified as the destination rail:\n  1. the destination currency must be `usd`;\n  2. only `usdc` is supported as the source currency",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "external_account_id": {
                                    "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 42
                                  },
                                  "omad": {
                                    "readOnly": true,
                                    "description": "The OMAD of a wire transfer",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 40
                                  },
                                  "imad": {
                                    "readOnly": true,
                                    "description": "The IMAD of a wire transfer",
                                    "type": "string",
                                    "pattern": "[a-z0-9]*",
                                    "minLength": 1,
                                    "maxLength": 40
                                  },
                                  "trace_number": {
                                    "readOnly": true,
                                    "description": "The trace number of an ACH transfer",
                                    "type": "string",
                                    "pattern": "[0-9]",
                                    "minLength": 15,
                                    "maxLength": 15
                                  },
                                  "wire_message": {
                                    "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 256
                                  },
                                  "sepa_reference": {
                                    "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                                    "type": "string",
                                    "minLength": 6,
                                    "maxLength": 140
                                  },
                                  "swift_reference": {
                                    "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 256
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "currency": {
                                    "description": "The destination currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "The destination payment rail",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "to_address": {
                                    "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                                    "type": "string"
                                  },
                                  "wire_message": {
                                    "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire.  This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                                    "type": "string"
                                  },
                                  "blockchain_memo": {
                                    "description": "A message to be sent with a crypto transaction, only allowed when the payment rail is Stellar.",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          "state": {
                            "description": "Status of the transfer. See [Transfer States](https://apidocs.bridge.xyz/docs/transfers-1#transfer-states) for more details.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "awaiting_funds",
                              "in_review",
                              "funds_received",
                              "payment_submitted",
                              "payment_processed",
                              "canceled",
                              "error",
                              "returned",
                              "refunded"
                            ]
                          },
                          "source_deposit_instructions": {
                            "readOnly": true,
                            "description": "Some transfers require a deposit to be made by the customer before Bridge can start the process.  Instructions for how to kick off the transfer will be included here.  The deposit must match these instructions exactly, or the transfer will fail.",
                            "allOf": [
                              {
                                "readOnly": true,
                                "required": [
                                  "payment_rail",
                                  "amount",
                                  "currency"
                                ],
                                "properties": {
                                  "payment_rail": {
                                    "description": "The payment rail that Bridge is expecting funds to arrive on.  For a crypto based source on the transfer, this is the chain, i.e. ethereum or polygon",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "solana",
                                      "stellar"
                                    ]
                                  },
                                  "amount": {
                                    "description": "Amount of the deposit, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                                    "type": "string"
                                  },
                                  "currency": {
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd"
                                    ]
                                  },
                                  "from_address": {
                                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                                    "type": "string"
                                  },
                                  "to_address": {
                                    "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
                                    "type": "string"
                                  },
                                  "deposit_message": {
                                    "description": "The message that the customer MUST include in their wire memo/message or ach push description",
                                    "type": "string"
                                  },
                                  "bank_name": {
                                    "description": "The name of the bank that the customer should send the deposit to",
                                    "type": "string"
                                  },
                                  "bank_address": {
                                    "description": "The address of the bank that the customer should send the deposit to",
                                    "type": "string"
                                  },
                                  "bank_routing_number": {
                                    "description": "The routing number of the bank that the customer should send the deposit to",
                                    "type": "string"
                                  },
                                  "bank_account_number": {
                                    "description": "The account number of the bank that the customer should send the deposit to",
                                    "type": "string"
                                  },
                                  "bank_beneficiary_name": {
                                    "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "currency": {
                                    "description": "The source currency",
                                    "type": "string",
                                    "enum": [
                                      "usdc",
                                      "usdt",
                                      "dai",
                                      "usd",
                                      "eur"
                                    ]
                                  },
                                  "payment_rail": {
                                    "description": "The source payment rail",
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "wire",
                                      "ach_push",
                                      "arbitrum",
                                      "avalanche_c_chain",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon",
                                      "sepa",
                                      "solana",
                                      "stellar",
                                      "swift"
                                    ]
                                  },
                                  "amount": {
                                    "description": "Amount of the deposit, expressed as a decimal string. It's denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                                    "type": "string"
                                  },
                                  "deposit_message": {
                                    "description": "The message that the customer MUST include in their `wire memo/message`, `ach push description`, `sepa reference`, or `swift reference/remittance information`.",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          "receipt": {
                            "description": "Receipt information of a transfer",
                            "required": [
                              "initial_amount",
                              "developer_fee",
                              "exchange_fee",
                              "subtotal_amount"
                            ],
                            "properties": {
                              "initial_amount": {
                                "description": "The initial amount of the transfer, represented as a decimal string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see the top-level `currency` field for more info)",
                                "type": "string"
                              },
                              "developer_fee": {
                                "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the transfer's fiat currency (see the top-level `currency` field for more info).",
                                "type": "string"
                              },
                              "exchange_fee": {
                                "description": "The fee, expressed as a decimal string, represents the amount Bridge charges for facilitating the transfer.  This is the final amount to take out of what is ultimately received by your customer, not a percentage.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                                "type": "string"
                              },
                              "subtotal_amount": {
                                "description": "The initial amount of the transfer less fixed fees (including the developer_fee and exchange_fee). Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                                "type": "string"
                              },
                              "remaining_prefunded_balance": {
                                "description": "For Prefunded Accounts, this value will represent the remaining account balance after the transfer.",
                                "type": "string"
                              },
                              "gas_fee": {
                                "description": "The fee, expressed as a decimal string. It's deducted from the withdrawn amount to pay for gas.  Only nonzero to crypto withdrawals that cost gas (e.g. USDT or DAI), and only known when the transaction is confirmed on-chain.  Will be missing if not yet known.\n\nIt's denominated in the fiat currency to which the destination currency is pegged.",
                                "type": "string"
                              },
                              "final_amount": {
                                "description": "The final amount of the transfer, expressed as a decimal string, equal to the subtotal_amount minus any gas fees.  If the gas fee is not known, this field will be missing.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the destination currency if that is a fiat currency or the fiat currency to which the destination currency is pegged.",
                                "type": "string"
                              },
                              "source_tx_hash": {
                                "description": "The hash of the on-chain deposit to the source address, where applicable"
                              },
                              "destination_tx_hash": {
                                "description": "The hash of the on-chain transfer to the destination address, where applicable"
                              },
                              "exchange_rate": {
                                "description": "The effective exchange rate can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee. This rate includes a currency conversion spread and is subject to a rounding precision loss during the calculation. Currently it's populated for SEPA onramp/offramp transfers only."
                              },
                              "url": {
                                "description": "The URL of a user-facing copy of the receipt.",
                                "type": "string"
                              }
                            }
                          },
                          "return_details": {
                            "readOnly": true,
                            "description": "Return information, if the transfer has been returned.",
                            "properties": {
                              "reason": {
                                "description": "The reason for the return, as given by the returning financial institution.",
                                "type": "string"
                              }
                            }
                          },
                          "created_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of creation of the transfer",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of update of the transfer",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "TransfersFound": {
                    "summary": "A non-empty list of transfers",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "summary": "A successful offramp transfer object",
                          "value": {
                            "id": "transfer_456",
                            "client_reference_id": "client_transfer_id_456",
                            "state": "funds_received",
                            "on_behalf_of": "cust_123",
                            "amount": "500.25",
                            "developer_fee": "0.0",
                            "source": {
                              "payment_rail": "ach",
                              "currency": "usd",
                              "external_account_id": "ext_123"
                            },
                            "destination": {
                              "payment_rail": "ethereum",
                              "currency": "usdc",
                              "to_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                            },
                            "receipt": {
                              "initial_amount": "500.25",
                              "developer_fee": "0.0",
                              "exchange_fee": "0.0",
                              "subtotal_amount": "500.25",
                              "gas_fee": "0.0",
                              "final_amount": "500.25",
                              "destination_tx_hash": "0xdeadbeef",
                              "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                            },
                            "created_at": "2020-01-02T00:00:00.000Z",
                            "updated_at": "2020-01-03T00:00:00.000Z"
                          }
                        },
                        {
                          "summary": "A successful offramp transfer object",
                          "value": {
                            "id": "transfer_123",
                            "client_reference_id": "client_transfer_id_123",
                            "state": "awaiting_funds",
                            "on_behalf_of": "cust_123",
                            "amount": "75.0",
                            "developer_fee": "0.0",
                            "source": {
                              "payment_rail": "ethereum",
                              "currency": "usdc",
                              "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                            },
                            "destination": {
                              "payment_rail": "ach",
                              "currency": "usd",
                              "external_account_id": "ext_123"
                            },
                            "source_deposit_instructions": {
                              "payment_rail": "ethereum",
                              "amount": "75.0",
                              "currency": "usdc",
                              "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                              "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                            },
                            "receipt": {
                              "initial_amount": "75.0",
                              "developer_fee": "0.0",
                              "exchange_fee": "0.0",
                              "subtotal_amount": "75.0",
                              "gas_fe": "0.0",
                              "final_amount": "75.0",
                              "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                            },
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "updated_at": "2020-01-02T00:00:00.000Z"
                          }
                        }
                      ]
                    }
                  },
                  "NoTransfersFound": {
                    "summary": "An empty list of transfers",
                    "value": {
                      "count": 0,
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a transfer",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Transfer object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "amount",
                  "on_behalf_of",
                  "source",
                  "destination"
                ],
                "properties": {
                  "id": {
                    "description": "A UUID that uniquely identifies a resource",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 42,
                    "readOnly": true
                  },
                  "client_reference_id": {
                    "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "amount": {
                    "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                    "type": "string"
                  },
                  "on_behalf_of": {
                    "description": "The id of the Bridge customer that you are moving funds on behalf of.",
                    "type": "string"
                  },
                  "developer_fee": {
                    "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                    "type": "string"
                  },
                  "source": {
                    "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                    "allOf": [
                      {
                        "required": [
                          "currency",
                          "payment_rail"
                        ],
                        "properties": {
                          "currency": {
                            "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` is supported as the destination currency",
                            "type": "string",
                            "enum": [
                              "usdc",
                              "usdt",
                              "dai",
                              "usd",
                              "eur"
                            ]
                          },
                          "payment_rail": {
                            "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` is supported as the destination currency;\n\nWhen `swift` is specified as the source rail:\n  1. the source currency must be `usd`;\n  2. only `usdc` is supported as the destination currency",
                            "type": "string",
                            "enum": [
                              "ach",
                              "wire",
                              "ach_push",
                              "arbitrum",
                              "avalanche_c_chain",
                              "base",
                              "ethereum",
                              "optimism",
                              "polygon",
                              "sepa",
                              "solana",
                              "stellar",
                              "swift"
                            ]
                          },
                          "external_account_id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42
                          },
                          "omad": {
                            "readOnly": true,
                            "description": "The OMAD of a wire transfer",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 40
                          },
                          "imad": {
                            "readOnly": true,
                            "description": "The IMAD of a wire transfer",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 40
                          },
                          "bank_beneficiary_name": {
                            "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                            "type": "string",
                            "readOnly": true
                          },
                          "bank_routing_number": {
                            "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                            "type": "string",
                            "readOnly": true
                          },
                          "bank_name": {
                            "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                            "type": "string",
                            "readOnly": true
                          },
                          "description": {
                            "description": "(ACH only) The description of the deposit that the customer sent",
                            "type": "string",
                            "readOnly": true
                          }
                        }
                      },
                      {
                        "properties": {
                          "from_address": {
                            "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  },
                  "destination": {
                    "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                    "allOf": [
                      {
                        "required": [
                          "currency",
                          "payment_rail"
                        ],
                        "properties": {
                          "currency": {
                            "description": "When `eur` is specified as the destination currency:\n  1. the destination rail must be `sepa`;\n  2. only `usdc` is supported as the source currency",
                            "type": "string",
                            "enum": [
                              "usdc",
                              "usdt",
                              "dai",
                              "usd",
                              "eur"
                            ]
                          },
                          "payment_rail": {
                            "description": "When `sepa` is specified as the destination rail:\n  1. the destination currency must be `eur`;\n  2. only `usdc` is supported as the source currency;\n\n When `swift` is specified as the destination rail:\n  1. the destination currency must be `usd`;\n  2. only `usdc` is supported as the source currency",
                            "type": "string",
                            "enum": [
                              "ach",
                              "wire",
                              "ach_push",
                              "arbitrum",
                              "avalanche_c_chain",
                              "base",
                              "ethereum",
                              "optimism",
                              "polygon",
                              "sepa",
                              "solana",
                              "stellar",
                              "swift"
                            ]
                          },
                          "external_account_id": {
                            "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42
                          },
                          "omad": {
                            "readOnly": true,
                            "description": "The OMAD of a wire transfer",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 40
                          },
                          "imad": {
                            "readOnly": true,
                            "description": "The IMAD of a wire transfer",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 40
                          },
                          "trace_number": {
                            "readOnly": true,
                            "description": "The trace number of an ACH transfer",
                            "type": "string",
                            "pattern": "[0-9]",
                            "minLength": 15,
                            "maxLength": 15
                          },
                          "wire_message": {
                            "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          },
                          "sepa_reference": {
                            "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                            "type": "string",
                            "minLength": 6,
                            "maxLength": 140
                          },
                          "swift_reference": {
                            "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 256
                          }
                        }
                      },
                      {
                        "properties": {
                          "to_address": {
                            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                            "type": "string"
                          },
                          "wire_message": {
                            "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire.  This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transfer object created",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "amount",
                    "developer_fee",
                    "currency",
                    "on_behalf_of",
                    "source",
                    "destination",
                    "state",
                    "receipt",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "client_reference_id": {
                      "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "amount": {
                      "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                      "type": "string"
                    },
                    "currency": {
                      "description": "Fiat currency for the transfer amount and developer fee. It's the source currency if that is a fiat currency or the fiat currency to which the source currency is pegged.",
                      "type": "string",
                      "enum": [
                        "usd",
                        "eur"
                      ]
                    },
                    "on_behalf_of": {
                      "description": "The id of the Bridge customer that you are moving funds on behalf of.",
                      "type": "string"
                    },
                    "developer_fee": {
                      "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account. This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                      "type": "string"
                    },
                    "source": {
                      "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                      "allOf": [
                        {
                          "required": [
                            "currency",
                            "payment_rail"
                          ],
                          "properties": {
                            "currency": {
                              "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` is supported as the destination currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` is supported as the destination currency;\n\nWhen `swift` is specified as the source rail:\n  1. the source currency must be `usd`;\n  2. only `usdc` is supported as the destination currency",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "external_account_id": {
                              "description": "A UUID that uniquely identifies a resource",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 42
                            },
                            "omad": {
                              "readOnly": true,
                              "description": "The OMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "imad": {
                              "readOnly": true,
                              "description": "The IMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "bank_beneficiary_name": {
                              "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                              "type": "string",
                              "readOnly": true
                            },
                            "bank_routing_number": {
                              "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                              "type": "string",
                              "readOnly": true
                            },
                            "bank_name": {
                              "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                              "type": "string",
                              "readOnly": true
                            },
                            "description": {
                              "description": "(ACH only) The description of the deposit that the customer sent",
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        {
                          "properties": {
                            "currency": {
                              "description": "The source currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "The source payment rail",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "from_address": {
                              "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "destination": {
                      "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                      "allOf": [
                        {
                          "required": [
                            "currency",
                            "payment_rail"
                          ],
                          "properties": {
                            "currency": {
                              "description": "When `eur` is specified as the destination currency:\n  1. the destination rail must be `sepa`;\n  2. only `usdc` is supported as the source currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "When `sepa` is specified as the destination rail:\n  1. the destination currency must be `eur`;\n  2. only `usdc` is supported as the source currency;\n\n When `swift` is specified as the destination rail:\n  1. the destination currency must be `usd`;\n  2. only `usdc` is supported as the source currency",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "external_account_id": {
                              "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 42
                            },
                            "omad": {
                              "readOnly": true,
                              "description": "The OMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "imad": {
                              "readOnly": true,
                              "description": "The IMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "trace_number": {
                              "readOnly": true,
                              "description": "The trace number of an ACH transfer",
                              "type": "string",
                              "pattern": "[0-9]",
                              "minLength": 15,
                              "maxLength": 15
                            },
                            "wire_message": {
                              "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "sepa_reference": {
                              "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                              "type": "string",
                              "minLength": 6,
                              "maxLength": 140
                            },
                            "swift_reference": {
                              "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            }
                          }
                        },
                        {
                          "properties": {
                            "currency": {
                              "description": "The destination currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "The destination payment rail",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "to_address": {
                              "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                              "type": "string"
                            },
                            "wire_message": {
                              "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire.  This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                              "type": "string"
                            },
                            "blockchain_memo": {
                              "description": "A message to be sent with a crypto transaction, only allowed when the payment rail is Stellar.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "state": {
                      "description": "Status of the transfer. See [Transfer States](https://apidocs.bridge.xyz/docs/transfers-1#transfer-states) for more details.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "awaiting_funds",
                        "in_review",
                        "funds_received",
                        "payment_submitted",
                        "payment_processed",
                        "canceled",
                        "error",
                        "returned",
                        "refunded"
                      ]
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "description": "Some transfers require a deposit to be made by the customer before Bridge can start the process.  Instructions for how to kick off the transfer will be included here.  The deposit must match these instructions exactly, or the transfer will fail.",
                      "allOf": [
                        {
                          "readOnly": true,
                          "required": [
                            "payment_rail",
                            "amount",
                            "currency"
                          ],
                          "properties": {
                            "payment_rail": {
                              "description": "The payment rail that Bridge is expecting funds to arrive on.  For a crypto based source on the transfer, this is the chain, i.e. ethereum or polygon",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "solana",
                                "stellar"
                              ]
                            },
                            "amount": {
                              "description": "Amount of the deposit, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                              "type": "string"
                            },
                            "currency": {
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd"
                              ]
                            },
                            "from_address": {
                              "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                              "type": "string"
                            },
                            "to_address": {
                              "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
                              "type": "string"
                            },
                            "deposit_message": {
                              "description": "The message that the customer MUST include in their wire memo/message or ach push description",
                              "type": "string"
                            },
                            "bank_name": {
                              "description": "The name of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_address": {
                              "description": "The address of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_routing_number": {
                              "description": "The routing number of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_account_number": {
                              "description": "The account number of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_beneficiary_name": {
                              "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "properties": {
                            "currency": {
                              "description": "The source currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "The source payment rail",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "amount": {
                              "description": "Amount of the deposit, expressed as a decimal string. It's denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                              "type": "string"
                            },
                            "deposit_message": {
                              "description": "The message that the customer MUST include in their `wire memo/message`, `ach push description`, `sepa reference`, or `swift reference/remittance information`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "receipt": {
                      "description": "Receipt information of a transfer",
                      "required": [
                        "initial_amount",
                        "developer_fee",
                        "exchange_fee",
                        "subtotal_amount"
                      ],
                      "properties": {
                        "initial_amount": {
                          "description": "The initial amount of the transfer, represented as a decimal string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see the top-level `currency` field for more info)",
                          "type": "string"
                        },
                        "developer_fee": {
                          "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the transfer's fiat currency (see the top-level `currency` field for more info).",
                          "type": "string"
                        },
                        "exchange_fee": {
                          "description": "The fee, expressed as a decimal string, represents the amount Bridge charges for facilitating the transfer.  This is the final amount to take out of what is ultimately received by your customer, not a percentage.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                          "type": "string"
                        },
                        "subtotal_amount": {
                          "description": "The initial amount of the transfer less fixed fees (including the developer_fee and exchange_fee). Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                          "type": "string"
                        },
                        "remaining_prefunded_balance": {
                          "description": "For Prefunded Accounts, this value will represent the remaining account balance after the transfer.",
                          "type": "string"
                        },
                        "gas_fee": {
                          "description": "The fee, expressed as a decimal string. It's deducted from the withdrawn amount to pay for gas.  Only nonzero to crypto withdrawals that cost gas (e.g. USDT or DAI), and only known when the transaction is confirmed on-chain.  Will be missing if not yet known.\n\nIt's denominated in the fiat currency to which the destination currency is pegged.",
                          "type": "string"
                        },
                        "final_amount": {
                          "description": "The final amount of the transfer, expressed as a decimal string, equal to the subtotal_amount minus any gas fees.  If the gas fee is not known, this field will be missing.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the destination currency if that is a fiat currency or the fiat currency to which the destination currency is pegged.",
                          "type": "string"
                        },
                        "source_tx_hash": {
                          "description": "The hash of the on-chain deposit to the source address, where applicable"
                        },
                        "destination_tx_hash": {
                          "description": "The hash of the on-chain transfer to the destination address, where applicable"
                        },
                        "exchange_rate": {
                          "description": "The effective exchange rate can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee. This rate includes a currency conversion spread and is subject to a rounding precision loss during the calculation. Currently it's populated for SEPA onramp/offramp transfers only."
                        },
                        "url": {
                          "description": "The URL of a user-facing copy of the receipt.",
                          "type": "string"
                        }
                      }
                    },
                    "return_details": {
                      "readOnly": true,
                      "description": "Return information, if the transfer has been returned.",
                      "properties": {
                        "reason": {
                          "description": "The reason for the return, as given by the returning financial institution.",
                          "type": "string"
                        }
                      }
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the transfer",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of update of the transfer",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "SuccessfulOfframpTransferResponse": {
                    "summary": "A successful offramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "awaiting_funds",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "destination": {
                        "payment_rail": "ach",
                        "currency": "usd",
                        "external_account_id": "ext_123"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "ethereum",
                        "amount": "75.0",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                        "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "subtotal_amount": "75.0",
                        "gas_fe": "0.0",
                        "final_amount": "75.0",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulWireOnrampTransferResponse": {
                    "summary": "A successful wire onramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "pending",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "wire",
                        "currency": "usd",
                        "external_account_id": null,
                        "bank_beneficiary_name": "Sender name, if available",
                        "bank_routing_number": "Sender routing, if available",
                        "bank_name": "Sender bank, if available",
                        "imad": "IMAD of incoming wire, if available",
                        "omad": "OMAD of incoming wire, if available"
                      },
                      "destination": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "wire",
                        "amount": "75.0",
                        "currency": "usd",
                        "deposit_message": "BVI7depositmessage",
                        "bank_name": "Bank name",
                        "bank_address": "Bank address",
                        "bank_routing_number": "123456789",
                        "bank_account_number": "1234567890",
                        "bank_beneficiary_name": "Bank beneficiary"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "subtotal_amount": "75.0",
                        "gas_fee": "0.0",
                        "final_amount": "75.0",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulAchOnrampTransferResponse": {
                    "summary": "A successful ACH onramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "pending",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "ach_push",
                        "currency": "usd",
                        "external_account_id": null,
                        "description": "ACH description, if available"
                      },
                      "destination": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "ach_push",
                        "amount": "75.0",
                        "currency": "usd",
                        "deposit_message": "BVI7depositmessage",
                        "bank_name": "Bank name",
                        "bank_address": "Bank address",
                        "bank_routing_number": "123456789",
                        "bank_account_number": "1234567890",
                        "bank_beneficiary_name": "Bank beneficiary"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "subtotal_amount": "75.0",
                        "gas_fee": "0.0",
                        "final_amount": "75.0",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulSepaOnrampTransferResponse": {
                    "summary": "A successful SEPA onramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "pending",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "sepa",
                        "currency": "eur",
                        "external_account_id": null
                      },
                      "destination": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "sepa",
                        "amount": "75.0",
                        "currency": "eur",
                        "deposit_message": "BRG7depositmessage",
                        "bank_name": "Bank name",
                        "bank_address": "Bank address",
                        "iban": "123456789",
                        "bic": "1234567890",
                        "account_holder_name": "Bank account holder name"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "gas_fee": "0.0",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulSepaOfframpTransferResponse": {
                    "summary": "A successful SEPA offramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "awaiting_funds",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "destination": {
                        "payment_rail": "sepa",
                        "currency": "eur",
                        "external_account_id": "ext_123",
                        "sepa_reference": "SEPA reference"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "ethereum",
                        "amount": "75.0",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                        "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "subtotal_amount": "75.0",
                        "gas_fe": "0.0",
                        "final_amount": "68.27",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The transfer has failed due to an AML violation (anti-money laundering).  Reach out to Bridge for more information",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "TransferAmlErrorExample": {
                    "summary": "An AML violation error response",
                    "value": {
                      "code": "aml_violation",
                      "message": "Failed AML Screening"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transfers/{transferID}": {
      "parameters": [
        {
          "name": "transferID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "get": {
        "summary": "Get a transfer",
        "description": "Retrieve a transfer object from the passed in transfer ID",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Successful transfer object response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "amount",
                    "developer_fee",
                    "currency",
                    "on_behalf_of",
                    "source",
                    "destination",
                    "state",
                    "receipt",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "client_reference_id": {
                      "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "amount": {
                      "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                      "type": "string"
                    },
                    "currency": {
                      "description": "Fiat currency for the transfer amount and developer fee. It's the source currency if that is a fiat currency or the fiat currency to which the source currency is pegged.",
                      "type": "string",
                      "enum": [
                        "usd",
                        "eur"
                      ]
                    },
                    "on_behalf_of": {
                      "description": "The id of the Bridge customer that you are moving funds on behalf of.",
                      "type": "string"
                    },
                    "developer_fee": {
                      "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account. This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
                      "type": "string"
                    },
                    "source": {
                      "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                      "allOf": [
                        {
                          "required": [
                            "currency",
                            "payment_rail"
                          ],
                          "properties": {
                            "currency": {
                              "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` is supported as the destination currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` is supported as the destination currency;\n\nWhen `swift` is specified as the source rail:\n  1. the source currency must be `usd`;\n  2. only `usdc` is supported as the destination currency",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "external_account_id": {
                              "description": "A UUID that uniquely identifies a resource",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 42
                            },
                            "omad": {
                              "readOnly": true,
                              "description": "The OMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "imad": {
                              "readOnly": true,
                              "description": "The IMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "bank_beneficiary_name": {
                              "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                              "type": "string",
                              "readOnly": true
                            },
                            "bank_routing_number": {
                              "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                              "type": "string",
                              "readOnly": true
                            },
                            "bank_name": {
                              "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                              "type": "string",
                              "readOnly": true
                            },
                            "description": {
                              "description": "(ACH only) The description of the deposit that the customer sent",
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        {
                          "properties": {
                            "currency": {
                              "description": "The source currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "The source payment rail",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "from_address": {
                              "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "destination": {
                      "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
                      "allOf": [
                        {
                          "required": [
                            "currency",
                            "payment_rail"
                          ],
                          "properties": {
                            "currency": {
                              "description": "When `eur` is specified as the destination currency:\n  1. the destination rail must be `sepa`;\n  2. only `usdc` is supported as the source currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "When `sepa` is specified as the destination rail:\n  1. the destination currency must be `eur`;\n  2. only `usdc` is supported as the source currency;\n\n When `swift` is specified as the destination rail:\n  1. the destination currency must be `usd`;\n  2. only `usdc` is supported as the source currency",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "external_account_id": {
                              "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 42
                            },
                            "omad": {
                              "readOnly": true,
                              "description": "The OMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "imad": {
                              "readOnly": true,
                              "description": "The IMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "trace_number": {
                              "readOnly": true,
                              "description": "The trace number of an ACH transfer",
                              "type": "string",
                              "pattern": "[0-9]",
                              "minLength": 15,
                              "maxLength": 15
                            },
                            "wire_message": {
                              "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "sepa_reference": {
                              "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                              "type": "string",
                              "minLength": 6,
                              "maxLength": 140
                            },
                            "swift_reference": {
                              "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            }
                          }
                        },
                        {
                          "properties": {
                            "currency": {
                              "description": "The destination currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "The destination payment rail",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "to_address": {
                              "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                              "type": "string"
                            },
                            "wire_message": {
                              "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire.  This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                              "type": "string"
                            },
                            "blockchain_memo": {
                              "description": "A message to be sent with a crypto transaction, only allowed when the payment rail is Stellar.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "state": {
                      "description": "Status of the transfer. See [Transfer States](https://apidocs.bridge.xyz/docs/transfers-1#transfer-states) for more details.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "awaiting_funds",
                        "in_review",
                        "funds_received",
                        "payment_submitted",
                        "payment_processed",
                        "canceled",
                        "error",
                        "returned",
                        "refunded"
                      ]
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "description": "Some transfers require a deposit to be made by the customer before Bridge can start the process.  Instructions for how to kick off the transfer will be included here.  The deposit must match these instructions exactly, or the transfer will fail.",
                      "allOf": [
                        {
                          "readOnly": true,
                          "required": [
                            "payment_rail",
                            "amount",
                            "currency"
                          ],
                          "properties": {
                            "payment_rail": {
                              "description": "The payment rail that Bridge is expecting funds to arrive on.  For a crypto based source on the transfer, this is the chain, i.e. ethereum or polygon",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "solana",
                                "stellar"
                              ]
                            },
                            "amount": {
                              "description": "Amount of the deposit, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                              "type": "string"
                            },
                            "currency": {
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd"
                              ]
                            },
                            "from_address": {
                              "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                              "type": "string"
                            },
                            "to_address": {
                              "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
                              "type": "string"
                            },
                            "deposit_message": {
                              "description": "The message that the customer MUST include in their wire memo/message or ach push description",
                              "type": "string"
                            },
                            "bank_name": {
                              "description": "The name of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_address": {
                              "description": "The address of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_routing_number": {
                              "description": "The routing number of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_account_number": {
                              "description": "The account number of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_beneficiary_name": {
                              "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "properties": {
                            "currency": {
                              "description": "The source currency",
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd",
                                "eur"
                              ]
                            },
                            "payment_rail": {
                              "description": "The source payment rail",
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "sepa",
                                "solana",
                                "stellar",
                                "swift"
                              ]
                            },
                            "amount": {
                              "description": "Amount of the deposit, expressed as a decimal string. It's denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                              "type": "string"
                            },
                            "deposit_message": {
                              "description": "The message that the customer MUST include in their `wire memo/message`, `ach push description`, `sepa reference`, or `swift reference/remittance information`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "receipt": {
                      "description": "Receipt information of a transfer",
                      "required": [
                        "initial_amount",
                        "developer_fee",
                        "exchange_fee",
                        "subtotal_amount"
                      ],
                      "properties": {
                        "initial_amount": {
                          "description": "The initial amount of the transfer, represented as a decimal string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see the top-level `currency` field for more info)",
                          "type": "string"
                        },
                        "developer_fee": {
                          "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the transfer's fiat currency (see the top-level `currency` field for more info).",
                          "type": "string"
                        },
                        "exchange_fee": {
                          "description": "The fee, expressed as a decimal string, represents the amount Bridge charges for facilitating the transfer.  This is the final amount to take out of what is ultimately received by your customer, not a percentage.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                          "type": "string"
                        },
                        "subtotal_amount": {
                          "description": "The initial amount of the transfer less fixed fees (including the developer_fee and exchange_fee). Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                          "type": "string"
                        },
                        "remaining_prefunded_balance": {
                          "description": "For Prefunded Accounts, this value will represent the remaining account balance after the transfer.",
                          "type": "string"
                        },
                        "gas_fee": {
                          "description": "The fee, expressed as a decimal string. It's deducted from the withdrawn amount to pay for gas.  Only nonzero to crypto withdrawals that cost gas (e.g. USDT or DAI), and only known when the transaction is confirmed on-chain.  Will be missing if not yet known.\n\nIt's denominated in the fiat currency to which the destination currency is pegged.",
                          "type": "string"
                        },
                        "final_amount": {
                          "description": "The final amount of the transfer, expressed as a decimal string, equal to the subtotal_amount minus any gas fees.  If the gas fee is not known, this field will be missing.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the destination currency if that is a fiat currency or the fiat currency to which the destination currency is pegged.",
                          "type": "string"
                        },
                        "source_tx_hash": {
                          "description": "The hash of the on-chain deposit to the source address, where applicable"
                        },
                        "destination_tx_hash": {
                          "description": "The hash of the on-chain transfer to the destination address, where applicable"
                        },
                        "exchange_rate": {
                          "description": "The effective exchange rate can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee. This rate includes a currency conversion spread and is subject to a rounding precision loss during the calculation. Currently it's populated for SEPA onramp/offramp transfers only."
                        },
                        "url": {
                          "description": "The URL of a user-facing copy of the receipt.",
                          "type": "string"
                        }
                      }
                    },
                    "return_details": {
                      "readOnly": true,
                      "description": "Return information, if the transfer has been returned.",
                      "properties": {
                        "reason": {
                          "description": "The reason for the return, as given by the returning financial institution.",
                          "type": "string"
                        }
                      }
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the transfer",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of update of the transfer",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "SuccessfulOfframpTransferResponse": {
                    "summary": "A successful offramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "awaiting_funds",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "destination": {
                        "payment_rail": "ach",
                        "currency": "usd",
                        "external_account_id": "ext_123"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "ethereum",
                        "amount": "75.0",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                        "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "subtotal_amount": "75.0",
                        "gas_fe": "0.0",
                        "final_amount": "75.0",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulWireOnrampTransferResponse": {
                    "summary": "A successful wire onramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "pending",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "wire",
                        "currency": "usd",
                        "external_account_id": null,
                        "bank_beneficiary_name": "Sender name, if available",
                        "bank_routing_number": "Sender routing, if available",
                        "bank_name": "Sender bank, if available",
                        "imad": "IMAD of incoming wire, if available",
                        "omad": "OMAD of incoming wire, if available"
                      },
                      "destination": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "wire",
                        "amount": "75.0",
                        "currency": "usd",
                        "deposit_message": "BVI7depositmessage",
                        "bank_name": "Bank name",
                        "bank_address": "Bank address",
                        "bank_routing_number": "123456789",
                        "bank_account_number": "1234567890",
                        "bank_beneficiary_name": "Bank beneficiary"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "subtotal_amount": "75.0",
                        "gas_fee": "0.0",
                        "final_amount": "75.0",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulAchOnrampTransferResponse": {
                    "summary": "A successful ACH onramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "pending",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "ach_push",
                        "currency": "usd",
                        "external_account_id": null,
                        "description": "ACH description, if available"
                      },
                      "destination": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "ach_push",
                        "amount": "75.0",
                        "currency": "usd",
                        "deposit_message": "BVI7depositmessage",
                        "bank_name": "Bank name",
                        "bank_address": "Bank address",
                        "bank_routing_number": "123456789",
                        "bank_account_number": "1234567890",
                        "bank_beneficiary_name": "Bank beneficiary"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "subtotal_amount": "75.0",
                        "gas_fee": "0.0",
                        "final_amount": "75.0",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulSepaOnrampTransferResponse": {
                    "summary": "A successful SEPA onramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "pending",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "sepa",
                        "currency": "eur",
                        "external_account_id": null
                      },
                      "destination": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "sepa",
                        "amount": "75.0",
                        "currency": "eur",
                        "deposit_message": "BRG7depositmessage",
                        "bank_name": "Bank name",
                        "bank_address": "Bank address",
                        "iban": "123456789",
                        "bic": "1234567890",
                        "account_holder_name": "Bank account holder name"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "gas_fee": "0.0",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulSepaOfframpTransferResponse": {
                    "summary": "A successful SEPA offramp transfer object",
                    "value": {
                      "id": "transfer_123",
                      "client_reference_id": "client_transfer_id_123",
                      "state": "awaiting_funds",
                      "on_behalf_of": "cust_123",
                      "amount": "75.0",
                      "developer_fee": "0.0",
                      "source": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "destination": {
                        "payment_rail": "sepa",
                        "currency": "eur",
                        "external_account_id": "ext_123",
                        "sepa_reference": "SEPA reference"
                      },
                      "source_deposit_instructions": {
                        "payment_rail": "ethereum",
                        "amount": "75.0",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                        "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                      },
                      "receipt": {
                        "initial_amount": "75.0",
                        "developer_fee": "0.0",
                        "exchange_fee": "0.0",
                        "subtotal_amount": "75.0",
                        "gas_fe": "0.0",
                        "final_amount": "68.27",
                        "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a transfer",
        "description": "Delete a transfer that was previously created. Must be in the awaiting_funds state.",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion of transfer"
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/prefunded_accounts": {
      "get": {
        "summary": "Get a list of all Prefunded Account",
        "tags": [
          "Prefunded Accounts"
        ],
        "description": "Retrieve a all Prefunded Accounts",
        "responses": {
          "200": {
            "description": "Successful Prefunded Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "available_balance",
                    "currency",
                    "name"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "available_balance": {
                      "description": "Amount available for spending, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                      "type": "string",
                      "readOnly": true
                    },
                    "currency": {
                      "description": "currency associated with the bank account.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "usd"
                      ]
                    },
                    "name": {
                      "description": "Serialized name of the account which identifies the counterparty.",
                      "type": "string",
                      "readOnly": true
                    }
                  }
                },
                "examples": {
                  "SuccessfulCustomerResponse": {
                    "summary": "A successful Prefunded Account object",
                    "value": {
                      "id": "f15972de-4cdd-460c-9da3-34f7321bfa3f",
                      "currency": "usd",
                      "available_balance": "134.12",
                      "name": "my_account",
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/prefunded_accounts/{prefundedAccountID}": {
      "parameters": [
        {
          "name": "prefundedAccountID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "get": {
        "summary": "Get details for a specific Prefunded Account",
        "tags": [
          "Prefunded Accounts"
        ],
        "description": "Retrieve a Prefunded Account",
        "responses": {
          "200": {
            "description": "Successful Prefunded Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "available_balance",
                    "currency",
                    "name"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "available_balance": {
                      "description": "Amount available for spending, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                      "type": "string",
                      "readOnly": true
                    },
                    "currency": {
                      "description": "currency associated with the bank account.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "usd"
                      ]
                    },
                    "name": {
                      "description": "Serialized name of the account which identifies the counterparty.",
                      "type": "string",
                      "readOnly": true
                    }
                  }
                },
                "examples": {
                  "SuccessfulCustomerResponse": {
                    "summary": "A successful Prefunded Account object",
                    "value": {
                      "id": "f15972de-4cdd-460c-9da3-34f7321bfa3f",
                      "currency": "usd",
                      "available_balance": "134.12",
                      "name": "my_account",
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/prefunded_accounts/{prefundedAccountID}/history": {
      "parameters": [
        {
          "name": "prefundedAccountID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        },
        {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer"
          },
          "description": "The numbers of items to return (default of 10, max of 100)"
        },
        {
          "in": "query",
          "name": "starting_after",
          "schema": {
            "type": "string"
          },
          "description": "This is a prefunded event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
        },
        {
          "in": "query",
          "name": "ending_before",
          "schema": {
            "type": "string"
          },
          "description": "This is a prefunded event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
        }
      ],
      "get": {
        "summary": "Get funding history of a Prefunded Account",
        "tags": [
          "Prefunded Accounts"
        ],
        "description": "Retrieve the funding events and returns for a Prefunded Account",
        "responses": {
          "200": {
            "description": "Successful Prefunded Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "amount",
                    "available_balance",
                    "currency",
                    "name",
                    "type",
                    "created_at"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "amount": {
                      "description": "Amount of the transaction, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                      "type": "string",
                      "readOnly": true
                    },
                    "available_balance": {
                      "description": "Amount available for spending, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                      "type": "string",
                      "readOnly": true
                    },
                    "currency": {
                      "description": "currency associated with the bank account.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "usd"
                      ]
                    },
                    "name": {
                      "description": "Serialized name of the account.",
                      "type": "string",
                      "readOnly": true
                    },
                    "type": {
                      "description": "The type of the transaction.",
                      "type": "string",
                      "enum": [
                        "funding",
                        "refunded transfer"
                      ],
                      "readOnly": true
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the External Account",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "SuccessfulCustomerResponse": {
                    "summary": "A successful Prefunded Account history",
                    "value": {
                      "count": 1,
                      "data": [
                        {
                          "id": "abced012-4cdd-460c-9da3-34f7321bfa3f",
                          "amount": "500.00",
                          "available_balance": "1300.31",
                          "currency": "usd",
                          "name": "my_account",
                          "type": "funding",
                          "created_at": "2020-01-01T00:00:00.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/liquidation_addresses": {
      "post": {
        "summary": "Create a Liquidation Address",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "requestBody": {
          "description": "Liquidation Address object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "currency",
                  "chain"
                ],
                "properties": {
                  "chain": {
                    "type": "string",
                    "enum": [
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "solana",
                      "stellar"
                    ]
                  },
                  "currency": {
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai"
                    ]
                  },
                  "external_account_id": {
                    "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 42
                  },
                  "destination_wire_message": {
                    "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "destination_sepa_reference": {
                    "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 140
                  },
                  "destination_swift_reference": {
                    "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "destination_payment_rail": {
                    "description": "The payment rail that Bridge will use to send funds to the customer. Will default to ACH if not specified.\n\nIf `sepa` is specified:\n1. the destination currency must be `eur`;\n2. the Liquidation Address currency can only be `usdc`;\n\nIf `swift` is specified:\n1. the destination currency must be `usd`;\n2. the Liquidation Address currency can only be `usdc`",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "sepa",
                      "solana",
                      "stellar",
                      "swift"
                    ]
                  },
                  "destination_currency": {
                    "description": "The currency that Bridge will use to send funds to the customer. Will default to USD if not specified.\n\nIf `eur` is specified:\n1. the destination rail must be `sepa`;\n2. the Liquidation Address currency can only be `usdc`",
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd",
                      "eur"
                    ]
                  },
                  "destination_address": {
                    "type": "string",
                    "description": "The crypto wallet address that Bridge will use to send funds to the customer."
                  },
                  "destination_blockchain_memo": {
                    "type": "string",
                    "description": "The memo to include in the transaction, for blockchains that support memos only"
                  },
                  "custom_developer_fee_percent": {
                    "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                    "type": "string",
                    "nullable": true,
                    "format": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "exclusiveMaximum": true,
                    "example": "0.1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Liquidation Address object created",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "currency",
                    "chain",
                    "destination_payment_rail",
                    "destination_currency"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "currency",
                        "chain"
                      ],
                      "properties": {
                        "chain": {
                          "type": "string",
                          "enum": [
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai"
                          ]
                        },
                        "external_account_id": {
                          "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42
                        },
                        "destination_wire_message": {
                          "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "destination_sepa_reference": {
                          "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                          "type": "string",
                          "minLength": 6,
                          "maxLength": 140
                        },
                        "destination_swift_reference": {
                          "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "destination_payment_rail": {
                          "description": "The payment rail that Bridge will use to send funds to the customer. Will default to ACH if not specified.\n\nIf `sepa` is specified:\n1. the destination currency must be `eur`;\n2. the Liquidation Address currency can only be `usdc`;\n\nIf `swift` is specified:\n1. the destination currency must be `usd`;\n2. the Liquidation Address currency can only be `usdc`",
                          "type": "string",
                          "enum": [
                            "ach",
                            "wire",
                            "ach_push",
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "sepa",
                            "solana",
                            "stellar",
                            "swift"
                          ]
                        },
                        "destination_currency": {
                          "description": "The currency that Bridge will use to send funds to the customer. Will default to USD if not specified.\n\nIf `eur` is specified:\n1. the destination rail must be `sepa`;\n2. the Liquidation Address currency can only be `usdc`",
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai",
                            "usd",
                            "eur"
                          ]
                        },
                        "destination_address": {
                          "type": "string",
                          "description": "The crypto wallet address that Bridge will use to send funds to the customer."
                        },
                        "destination_blockchain_memo": {
                          "type": "string",
                          "description": "The memo to include in the transaction, for blockchains that support memos only"
                        },
                        "custom_developer_fee_percent": {
                          "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                          "type": "string",
                          "nullable": true,
                          "format": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "exclusiveMaximum": true,
                          "example": "0.1"
                        }
                      }
                    },
                    {
                      "properties": {
                        "external_account_id": {
                          "description": "External bank account to which Bridge will send the funds."
                        },
                        "destination_wire_message": {
                          "description": "A message to be sent with a wire transfer."
                        },
                        "destination_sepa_reference": {
                          "description": "A reference message to be sent with a SEPA transaction."
                        },
                        "destination_swift_reference": {
                          "description": "A payment reference message or remittance information to be included in a SWIFT transaction."
                        },
                        "destination_payment_rail": {
                          "description": "The payment rail that Bridge will use to send funds to the customer."
                        },
                        "destination_currency": {
                          "description": "The currency that Bridge will use to send funds to the customer."
                        },
                        "custom_developer_fee_percent": {
                          "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                          "type": "string",
                          "nullable": true,
                          "format": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "exclusiveMaximum": true,
                          "example": "0.1"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "SuccessfulLiquidationAddressCreateResponse": {
                    "summary": "A successful Liquidation Address creation response",
                    "value": {
                      "id": "la_123",
                      "chain": "ethereum",
                      "external_account_id": "ext_123",
                      "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
                      "currency": "usdc",
                      "created_at": "2023-11-22T21:31:30.515Z",
                      "updated_at": "2023-11-22T21:31:30.515Z"
                    }
                  },
                  "SuccessfulSepaLiquidationAddressCreateResponse": {
                    "summary": "A creation response using SEPA as the destination rail",
                    "value": {
                      "id": "la_123",
                      "chain": "ethereum",
                      "external_account_id": "ext_123",
                      "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
                      "currency": "usdc",
                      "destination_sepa_reference": "SEPA reference",
                      "destination_payment_rail": "sepa",
                      "destination_currency": "eur",
                      "created_at": "2023-11-22T21:31:30.515Z",
                      "updated_at": "2023-11-22T21:31:30.515Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all Liquidation Addresses for a customer",
        "description": "Get Liquidation Addresses",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Liquidation Addresses (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "currency",
                    "chain",
                    "external_account_id",
                    "address",
                    "destination_payment_rail",
                    "destination_currency",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "currency": {
                      "type": "string",
                      "enum": [
                        "usdc",
                        "usdt",
                        "dai"
                      ]
                    },
                    "chain": {
                      "type": "string",
                      "enum": [
                        "arbitrum",
                        "avalanche_c_chain",
                        "base",
                        "ethereum",
                        "optimism",
                        "polygon",
                        "solana",
                        "stellar"
                      ]
                    },
                    "external_account_id": {
                      "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42
                    },
                    "destination_wire_message": {
                      "description": "A message to be sent with a wire transfer.",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "destination_sepa_reference": {
                      "description": "A reference message to be sent with a SEPA transaction.",
                      "type": "string",
                      "minLength": 6,
                      "maxLength": 140
                    },
                    "destination_swift_reference": {
                      "description": "A payment reference message or remittance information to be included in a SWIFT transaction.",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "destination_payment_rail": {
                      "description": "The payment rail that Bridge will use to send funds to the customer.",
                      "type": "string",
                      "enum": [
                        "ach",
                        "wire",
                        "ach_push",
                        "arbitrum",
                        "avalanche_c_chain",
                        "base",
                        "ethereum",
                        "optimism",
                        "polygon",
                        "sepa",
                        "solana",
                        "stellar",
                        "swift"
                      ]
                    },
                    "destination_currency": {
                      "description": "The currency that Bridge will use to send funds to the customer.",
                      "type": "string",
                      "enum": [
                        "usdc",
                        "usdt",
                        "dai",
                        "usd",
                        "eur"
                      ]
                    },
                    "address": {
                      "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
                      "type": "string",
                      "readOnly": true
                    },
                    "destination_address": {
                      "type": "string",
                      "description": "The crypto wallet address that Bridge will use to send funds to the customer."
                    },
                    "destination_blockchain_memo": {
                      "type": "string",
                      "description": "The memo to include in the transaction, for blockchains that support memos only"
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the Liquidation Address",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of last update of the Liquidation Address",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "LiquidationAddressesFound": {
                    "summary": "A non-empty list of Liquidation Addresses",
                    "value": {
                      "count": 1,
                      "data": {
                        "type": "array",
                        "minItems": 0,
                        "items": {
                          "id": "la_123",
                          "chain": "ethereum",
                          "external_account_id": "ext_123",
                          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
                          "currency": "usdc",
                          "created_at": "2023-11-22T21:31:30.515Z",
                          "updated_at": "2023-11-22T21:31:30.515Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/liquidation_addresses/{liquidationAddressID}": {
      "get": {
        "summary": "Get a Liquidation Address",
        "description": "Retrieve a Liquidation Address for the specified Liquidation Address ID",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "liquidationAddressID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Liquidation Address object response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "currency",
                    "chain",
                    "external_account_id",
                    "address",
                    "destination_payment_rail",
                    "destination_currency",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "currency": {
                      "type": "string",
                      "enum": [
                        "usdc",
                        "usdt",
                        "dai"
                      ]
                    },
                    "chain": {
                      "type": "string",
                      "enum": [
                        "arbitrum",
                        "avalanche_c_chain",
                        "base",
                        "ethereum",
                        "optimism",
                        "polygon",
                        "solana",
                        "stellar"
                      ]
                    },
                    "external_account_id": {
                      "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42
                    },
                    "destination_wire_message": {
                      "description": "A message to be sent with a wire transfer.",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "destination_sepa_reference": {
                      "description": "A reference message to be sent with a SEPA transaction.",
                      "type": "string",
                      "minLength": 6,
                      "maxLength": 140
                    },
                    "destination_swift_reference": {
                      "description": "A payment reference message or remittance information to be included in a SWIFT transaction.",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "destination_payment_rail": {
                      "description": "The payment rail that Bridge will use to send funds to the customer.",
                      "type": "string",
                      "enum": [
                        "ach",
                        "wire",
                        "ach_push",
                        "arbitrum",
                        "avalanche_c_chain",
                        "base",
                        "ethereum",
                        "optimism",
                        "polygon",
                        "sepa",
                        "solana",
                        "stellar",
                        "swift"
                      ]
                    },
                    "destination_currency": {
                      "description": "The currency that Bridge will use to send funds to the customer.",
                      "type": "string",
                      "enum": [
                        "usdc",
                        "usdt",
                        "dai",
                        "usd",
                        "eur"
                      ]
                    },
                    "address": {
                      "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
                      "type": "string",
                      "readOnly": true
                    },
                    "destination_address": {
                      "type": "string",
                      "description": "The crypto wallet address that Bridge will use to send funds to the customer."
                    },
                    "destination_blockchain_memo": {
                      "type": "string",
                      "description": "The memo to include in the transaction, for blockchains that support memos only"
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the Liquidation Address",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of last update of the Liquidation Address",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "SuccessfulLiquidationAddressGetResponse": {
                    "summary": "A successful get response for a Liquidation Address",
                    "value": {
                      "id": "la_123",
                      "chain": "ethereum",
                      "external_account_id": "ext_123",
                      "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
                      "currency": "usdc",
                      "destination_payment_rail": "wire",
                      "destination_currency": "usd",
                      "destination_wire_message": "a wire message",
                      "created_at": "2023-11-22T21:31:30.515Z",
                      "updated_at": "2023-11-22T21:31:30.515Z"
                    }
                  },
                  "SuccessfulSepaLiquidationAddressGetResponse": {
                    "summary": "A successful get response for a SEPA Liquidation Address",
                    "value": {
                      "id": "la_123",
                      "chain": "ethereum",
                      "external_account_id": "ext_123",
                      "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
                      "currency": "usdc",
                      "destination_payment_rail": "sepa",
                      "destination_currency": "eur",
                      "destination_sepa_reference": "a SEPA reference",
                      "created_at": "2023-11-22T21:31:30.515Z",
                      "updated_at": "2023-11-22T21:31:30.515Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Liquidation Address",
        "description": "Update a Liquidation Address for the specified liquidation address ID",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "liquidationAddressID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "requestBody": {
          "description": "Liquidation Address details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "external_account_id": {
                    "properties": {
                      "external_account_id": {
                        "description": "A UUID that uniquely identifies a resource",
                        "type": "string",
                        "pattern": "[a-z0-9]*",
                        "minLength": 1,
                        "maxLength": 42
                      }
                    }
                  },
                  "custom_developer_fee_percent": {
                    "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                    "type": "string",
                    "nullable": true,
                    "format": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "exclusiveMaximum": true,
                    "example": "0.1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Liquidation Address object",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "currency",
                    "chain",
                    "external_account_id",
                    "address",
                    "destination_payment_rail",
                    "destination_currency",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "currency": {
                      "type": "string",
                      "enum": [
                        "usdc",
                        "usdt",
                        "dai"
                      ]
                    },
                    "chain": {
                      "type": "string",
                      "enum": [
                        "arbitrum",
                        "avalanche_c_chain",
                        "base",
                        "ethereum",
                        "optimism",
                        "polygon",
                        "solana",
                        "stellar"
                      ]
                    },
                    "external_account_id": {
                      "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42
                    },
                    "destination_wire_message": {
                      "description": "A message to be sent with a wire transfer.",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "destination_sepa_reference": {
                      "description": "A reference message to be sent with a SEPA transaction.",
                      "type": "string",
                      "minLength": 6,
                      "maxLength": 140
                    },
                    "destination_swift_reference": {
                      "description": "A payment reference message or remittance information to be included in a SWIFT transaction.",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "destination_payment_rail": {
                      "description": "The payment rail that Bridge will use to send funds to the customer.",
                      "type": "string",
                      "enum": [
                        "ach",
                        "wire",
                        "ach_push",
                        "arbitrum",
                        "avalanche_c_chain",
                        "base",
                        "ethereum",
                        "optimism",
                        "polygon",
                        "sepa",
                        "solana",
                        "stellar",
                        "swift"
                      ]
                    },
                    "destination_currency": {
                      "description": "The currency that Bridge will use to send funds to the customer.",
                      "type": "string",
                      "enum": [
                        "usdc",
                        "usdt",
                        "dai",
                        "usd",
                        "eur"
                      ]
                    },
                    "address": {
                      "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
                      "type": "string",
                      "readOnly": true
                    },
                    "destination_address": {
                      "type": "string",
                      "description": "The crypto wallet address that Bridge will use to send funds to the customer."
                    },
                    "destination_blockchain_memo": {
                      "type": "string",
                      "description": "The memo to include in the transaction, for blockchains that support memos only"
                    },
                    "created_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of creation of the Liquidation Address",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "readOnly": true,
                      "type": "string",
                      "description": "Time of last update of the Liquidation Address",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "SuccessfulLiquidationAddressUpdateResponse": {
                    "summary": "A successful get response for a Liquidation Address",
                    "value": {
                      "id": "la_123",
                      "chain": "ethereum",
                      "external_account_id": "ext_123",
                      "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
                      "currency": "usdc",
                      "destination_payment_rail": "wire",
                      "destination_currency": "usd",
                      "destination_wire_message": "a wire message",
                      "created_at": "2023-11-22T21:31:30.515Z",
                      "updated_at": "2023-11-22T21:31:30.515Z"
                    }
                  },
                  "SuccessfulSepaLiquidationAddressUpdateResponse": {
                    "summary": "A successful get response for a SEPA Liquidation Address",
                    "value": {
                      "id": "la_123",
                      "chain": "ethereum",
                      "external_account_id": "ext_123",
                      "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
                      "currency": "usdc",
                      "destination_payment_rail": "sepa",
                      "destination_currency": "eur",
                      "destination_sepa_reference": "a SEPA reference",
                      "created_at": "2023-11-22T21:31:30.515Z",
                      "updated_at": "2023-11-22T21:31:30.515Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/liquidation_addresses/{liquidationAddressID}/drains": {
      "get": {
        "summary": "Get drain history of a Liquidation Address",
        "description": "Get drain history of a Liquidation Address",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "liquidationAddressID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of drains (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "required": [
                        "id",
                        "customer_id",
                        "liquidation_address_id",
                        "amount",
                        "currency",
                        "state"
                      ],
                      "properties": {
                        "id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "amount": {
                          "description": "Amount of the drain, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                          "type": "string"
                        },
                        "customer_id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "liquidation_address_id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai",
                            "usd",
                            "eur"
                          ]
                        },
                        "state": {
                          "description": "Status of the drain",
                          "readOnly": true,
                          "type": "string",
                          "enum": [
                            "awaiting_funds",
                            "in_review",
                            "funds_received",
                            "payment_submitted",
                            "payment_processed",
                            "canceled",
                            "error",
                            "returned",
                            "refunded"
                          ]
                        },
                        "created_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of creation of the drain",
                          "format": "date-time"
                        },
                        "deposit_tx_hash": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Hash of the Liquidation Address deposit that triggered this drain"
                        },
                        "from_address": {
                          "readOnly": true,
                          "type": "string",
                          "description": "The blockchain address that sent funds to the Liquidation Address"
                        },
                        "destination": {
                          "readOnly": true,
                          "description": "Destination information of a drain.",
                          "required": [
                            "payment_rail",
                            "currency"
                          ],
                          "properties": {
                            "payment_rail": {
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "solana",
                                "stellar"
                              ]
                            },
                            "currency": {
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd"
                              ]
                            },
                            "to_address": {
                              "description": "The crypto wallet address that the customer will ultimately receive funds at",
                              "type": "string"
                            },
                            "blockchain_memo": {
                              "description": "The memo to include in the transaction, for blockchains that support memos only",
                              "type": "string"
                            },
                            "external_account_id": {
                              "description": "External bank account to which Bridge will send the funds.",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 42
                            },
                            "wire_message": {
                              "description": "A message to be sent with a wire transfer.",
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "sepa_reference": {
                              "description": "A reference message to be sent with a SEPA transaction.",
                              "type": "string",
                              "minLength": 6,
                              "maxLength": 140
                            },
                            "swift_reference": {
                              "description": "A payment reference message or remittance information to be included in a SWIFT transaction.",
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "imad": {
                              "description": "The IMAD of a wire transfer",
                              "type": "string",
                              "pattern": "[a-z0-9]*",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "trace_number": {
                              "readOnly": true,
                              "description": "The trace number of an ACH transfer",
                              "type": "string",
                              "pattern": "[0-9]",
                              "minLength": 15,
                              "maxLength": 15
                            }
                          }
                        },
                        "destination_tx_hash": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Hash of withdrawal of funds to the destination"
                        },
                        "return_details": {
                          "readOnly": true,
                          "description": "Return information, if the drain has been returned.",
                          "properties": {
                            "reason": {
                              "description": "The reason for the return, as given by the returning financial institution.",
                              "type": "string"
                            }
                          }
                        },
                        "receipt": {
                          "readOnly": true,
                          "description": "Receipt information of a drain.",
                          "required": [
                            "initial_amount",
                            "developer_fee",
                            "exchange_rate",
                            "subtotal_amount",
                            "converted_amount",
                            "outgoing_amount",
                            "destination_currency"
                          ],
                          "properties": {
                            "initial_amount": {
                              "description": "The initial amount of the drain, denominated in the fiat currency to which the currency of the Liquidation Address is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.000000000000000001\" etc.",
                              "type": "string"
                            },
                            "developer_fee": {
                              "description": "The developer fee, denominated in the fiat currency to which the currency of the Liquidation Address is pegged. This fee is a specific amount deducted from the initial total before conversion, rather than a percentage.",
                              "type": "string"
                            },
                            "subtotal_amount": {
                              "description": "The initial amount of the drain less the `developer_fee`, denominated in the fiat currency to which the Liquidation Address currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.000000000000000001\" etc.",
                              "type": "string"
                            },
                            "gas_fee": {
                              "description": "The fee that is deducted from the withdrawn amount to pay for gas.  Only included for crypto withdrawals that cost gas (e.g. USDT or DAI). It's denominated in the fiat currency to which the destination currency is pegged.",
                              "type": "string"
                            },
                            "converted_amount": {
                              "description": "The converted amount of the drain. It's denominated in the destination currency or its pegged fiat currency.",
                              "type": "string"
                            },
                            "exchange_rate": {
                              "description": "The effective exchange rate that can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee."
                            },
                            "outgoing_amount": {
                              "description": "The final amount of the drain, equal to the `converted_amount` minus any gas fees. It's denominated in the destination currency or its pegged fiat currency.",
                              "type": "string"
                            },
                            "destination_currency": {
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai",
                                "usd"
                              ],
                              "description": "The currency of the fund sent to the customer."
                            },
                            "url": {
                              "description": "The URL of a user-facing copy of the receipt.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "DrainsToCryptoFound": {
                    "summary": "A successful get request for a Liquidation Address's drain to crypto",
                    "value": {
                      "count": 1,
                      "data": [
                        {
                          "id": "la_123",
                          "amount": "100.25",
                          "customer_id": "cust_123",
                          "liquidation_address_id": "la_456",
                          "currency": "usdc",
                          "state": "funds_received",
                          "created_at": "2020-01-01T00:00:00.000Z",
                          "updated_at": "2020-01-02T00:00:00.000Z",
                          "deposit_tx_hash": "0xc13d7905be5c989378a945487cd2a1193627ae606009e28e296d48ddaec66162",
                          "destination": {
                            "payment_rail": "ethereum",
                            "currency": "usdt",
                            "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                          },
                          "destination_tx_hash": "0xdeadbeef",
                          "receipt": {
                            "initial_amount": "100.25",
                            "developer_fee": "0.2",
                            "subtotal_amount": "100.05",
                            "exchange_rate": "1.000000",
                            "converted_amount": "100.05",
                            "outgoing_amount": "100.05",
                            "destination_currency": "usd",
                            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                          }
                        }
                      ]
                    }
                  },
                  "DrainsToFiatFound": {
                    "summary": "A successful get request for a Liquidation Address's drain to fiat",
                    "value": {
                      "count": 1,
                      "data": [
                        {
                          "id": "la_123",
                          "amount": "100.25",
                          "customer_id": "cust_123",
                          "liquidation_address_id": "la_456",
                          "currency": "usdc",
                          "state": "funds_received",
                          "created_at": "2020-01-01T00:00:00.000Z",
                          "updated_at": "2020-01-02T00:00:00.000Z",
                          "deposit_tx_hash": "0xc13d7905be5c989378a945487cd2a1193627ae606009e28e296d48ddaec66162",
                          "destination": {
                            "payment_rail": "wire",
                            "currency": "usd",
                            "external_account_id": "ext_acct_789",
                            "wire_message": "a wire message",
                            "imad": "123456"
                          },
                          "receipt": {
                            "initial_amount": "100.25",
                            "developer_fee": "0.2",
                            "subtotal_amount": "100.05",
                            "exchange_rate": "1.000000",
                            "converted_amount": "100.05",
                            "outgoing_amount": "100.05",
                            "destination_currency": "usd",
                            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/liquidation_addresses/{liquidationAddressID}/balances": {
      "get": {
        "summary": "Get the balance of a Liquidation Address",
        "description": "Get the balance of a Liquidation Address",
        "tags": [
          "Liquidation Addresses"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "liquidationAddressID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the current balance of a Liquidation Address",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "active_balance": {
                          "description": "Active Balance (Money currently not being processed) of a Liquidation Address",
                          "type": "string"
                        },
                        "pending_balance": {
                          "description": "Pending Balance (Money being processed) of a Liquidation Address",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "DrainsFound": {
                    "summary": "A successful get request for a Liquidation Address's balance",
                    "value": {
                      "active_balance": "0",
                      "pending_balance": "100.25"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts": {
      "post": {
        "summary": "Create a Virtual Account",
        "description": "Create a Virtual Account for the specified customer",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "requestBody": {
          "description": "Virtual Account object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "source",
                  "destination"
                ],
                "properties": {
                  "developer_fee_percent": {
                    "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                    "type": "string",
                    "format": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "exclusiveMaximum": true,
                    "example": "0.1"
                  },
                  "source": {
                    "required": [
                      "currency"
                    ],
                    "properties": {
                      "currency": {
                        "type": "string",
                        "enum": [
                          "usd"
                        ]
                      }
                    },
                    "example": {
                      "currency": "usd"
                    }
                  },
                  "destination": {
                    "required": [
                      "currency",
                      "payment_rail",
                      "address"
                    ],
                    "properties": {
                      "currency": {
                        "type": "string",
                        "enum": [
                          "usdc",
                          "usdt",
                          "dai"
                        ]
                      },
                      "payment_rail": {
                        "type": "string",
                        "enum": [
                          "arbitrum",
                          "avalanche_c_chain",
                          "base",
                          "ethereum",
                          "optimism",
                          "polygon",
                          "solana",
                          "stellar"
                        ]
                      },
                      "address": {
                        "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                        "type": "string"
                      },
                      "blockchain_memo": {
                        "type": "string",
                        "description": "The memo to include in the transaction, for blockchains that support memos only"
                      }
                    },
                    "example": {
                      "currency": "usdc",
                      "payment_rail": "polygon",
                      "address": "0xdeadbeef"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Virtual Account object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "status": {
                      "description": "The activation status of the Virtual Account",
                      "type": "string",
                      "enum": [
                        "activated",
                        "deactivated"
                      ]
                    },
                    "developer_fee_percent": {
                      "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                      "type": "string",
                      "format": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "exclusiveMaximum": true,
                      "example": "0.1"
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "properties": {
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "ach",
                            "wire",
                            "ach_push",
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ],
                          "deprecated": true
                        },
                        "payment_rails": {
                          "description": "The payment rails supported by these deposit instructions",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "ach",
                              "wire",
                              "ach_push",
                              "arbitrum",
                              "avalanche_c_chain",
                              "base",
                              "ethereum",
                              "optimism",
                              "polygon",
                              "solana",
                              "stellar"
                            ]
                          }
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usd"
                          ]
                        },
                        "bank_name": {
                          "description": "The name of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_address": {
                          "description": "The address of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_routing_number": {
                          "description": "The routing number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_account_number": {
                          "description": "The account number of the bank that the customer should send the deposit to",
                          "type": "string"
                        }
                      },
                      "example": {
                        "currency": "usd",
                        "payment_rails": [
                          "ach_push",
                          "wire"
                        ],
                        "bank_name": "Lead Bank",
                        "bank_address": "1801 Main St., Kansas City, MO 64108",
                        "bank_beneficiary_name": "Customer Name",
                        "bank_account_number": "123456789",
                        "bank_routing_number": "87654321"
                      }
                    },
                    "destination": {
                      "required": [
                        "currency",
                        "payment_rail",
                        "address"
                      ],
                      "properties": {
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai"
                          ]
                        },
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "address": {
                          "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                          "type": "string"
                        },
                        "blockchain_memo": {
                          "type": "string",
                          "description": "The memo to include in the transaction, for blockchains that support memos only"
                        }
                      },
                      "example": {
                        "currency": "usdc",
                        "payment_rail": "polygon",
                        "address": "0xdeadbeef"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Virtual Accounts",
        "description": "List all Virtual Account objects for a customer",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Virtual Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Virtual Accounts",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "status": {
                            "description": "The activation status of the Virtual Account",
                            "type": "string",
                            "enum": [
                              "activated",
                              "deactivated"
                            ]
                          },
                          "developer_fee_percent": {
                            "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                            "type": "string",
                            "format": "number",
                            "minimum": 0,
                            "maximum": 100,
                            "exclusiveMaximum": true,
                            "example": "0.1"
                          },
                          "source_deposit_instructions": {
                            "readOnly": true,
                            "properties": {
                              "payment_rail": {
                                "type": "string",
                                "enum": [
                                  "ach",
                                  "wire",
                                  "ach_push",
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ],
                                "deprecated": true
                              },
                              "payment_rails": {
                                "description": "The payment rails supported by these deposit instructions",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "ach",
                                    "wire",
                                    "ach_push",
                                    "arbitrum",
                                    "avalanche_c_chain",
                                    "base",
                                    "ethereum",
                                    "optimism",
                                    "polygon",
                                    "solana",
                                    "stellar"
                                  ]
                                }
                              },
                              "currency": {
                                "type": "string",
                                "enum": [
                                  "usd"
                                ]
                              },
                              "bank_name": {
                                "description": "The name of the bank that the customer should send the deposit to",
                                "type": "string"
                              },
                              "bank_address": {
                                "description": "The address of the bank that the customer should send the deposit to",
                                "type": "string"
                              },
                              "bank_routing_number": {
                                "description": "The routing number of the bank that the customer should send the deposit to",
                                "type": "string"
                              },
                              "bank_account_number": {
                                "description": "The account number of the bank that the customer should send the deposit to",
                                "type": "string"
                              }
                            },
                            "example": {
                              "currency": "usd",
                              "payment_rails": [
                                "ach_push",
                                "wire"
                              ],
                              "bank_name": "Lead Bank",
                              "bank_address": "1801 Main St., Kansas City, MO 64108",
                              "bank_beneficiary_name": "Customer Name",
                              "bank_account_number": "123456789",
                              "bank_routing_number": "87654321"
                            }
                          },
                          "destination": {
                            "required": [
                              "currency",
                              "payment_rail",
                              "address"
                            ],
                            "properties": {
                              "currency": {
                                "type": "string",
                                "enum": [
                                  "usdc",
                                  "usdt",
                                  "dai"
                                ]
                              },
                              "payment_rail": {
                                "type": "string",
                                "enum": [
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ]
                              },
                              "address": {
                                "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                                "type": "string"
                              },
                              "blockchain_memo": {
                                "type": "string",
                                "description": "The memo to include in the transaction, for blockchains that support memos only"
                              }
                            },
                            "example": {
                              "currency": "usdc",
                              "payment_rail": "polygon",
                              "address": "0xdeadbeef"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts/{virtualAccountID}": {
      "get": {
        "summary": "Get a Virtual Account",
        "description": "Retrieve the Virtual Account object from the passed ID",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "virtualAccountID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Virtual Account object response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "status": {
                      "description": "The activation status of the Virtual Account",
                      "type": "string",
                      "enum": [
                        "activated",
                        "deactivated"
                      ]
                    },
                    "developer_fee_percent": {
                      "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                      "type": "string",
                      "format": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "exclusiveMaximum": true,
                      "example": "0.1"
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "properties": {
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "ach",
                            "wire",
                            "ach_push",
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ],
                          "deprecated": true
                        },
                        "payment_rails": {
                          "description": "The payment rails supported by these deposit instructions",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "ach",
                              "wire",
                              "ach_push",
                              "arbitrum",
                              "avalanche_c_chain",
                              "base",
                              "ethereum",
                              "optimism",
                              "polygon",
                              "solana",
                              "stellar"
                            ]
                          }
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usd"
                          ]
                        },
                        "bank_name": {
                          "description": "The name of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_address": {
                          "description": "The address of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_routing_number": {
                          "description": "The routing number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_account_number": {
                          "description": "The account number of the bank that the customer should send the deposit to",
                          "type": "string"
                        }
                      },
                      "example": {
                        "currency": "usd",
                        "payment_rails": [
                          "ach_push",
                          "wire"
                        ],
                        "bank_name": "Lead Bank",
                        "bank_address": "1801 Main St., Kansas City, MO 64108",
                        "bank_beneficiary_name": "Customer Name",
                        "bank_account_number": "123456789",
                        "bank_routing_number": "87654321"
                      }
                    },
                    "destination": {
                      "required": [
                        "currency",
                        "payment_rail",
                        "address"
                      ],
                      "properties": {
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai"
                          ]
                        },
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "address": {
                          "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                          "type": "string"
                        },
                        "blockchain_memo": {
                          "type": "string",
                          "description": "The memo to include in the transaction, for blockchains that support memos only"
                        }
                      },
                      "example": {
                        "currency": "usdc",
                        "payment_rail": "polygon",
                        "address": "0xdeadbeef"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Virtual Account",
        "description": "Update instructions for an existing Virtual Account",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "virtualAccountID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "requestBody": {
          "description": "The Virtual Account details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "destination": {
                    "properties": {
                      "currency": {
                        "type": "string",
                        "enum": [
                          "usdc",
                          "usdt",
                          "dai"
                        ]
                      },
                      "payment_rail": {
                        "type": "string",
                        "enum": [
                          "arbitrum",
                          "avalanche_c_chain",
                          "base",
                          "ethereum",
                          "optimism",
                          "polygon",
                          "solana",
                          "stellar"
                        ]
                      },
                      "address": {
                        "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                        "type": "string"
                      }
                    },
                    "example": {
                      "currency": "usdc",
                      "payment_rail": "polygon",
                      "address": "0xdeadbeef"
                    }
                  },
                  "developer_fee_percent": {
                    "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                    "type": "string",
                    "format": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "exclusiveMaximum": true,
                    "example": "0.1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Virtual Account object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "status": {
                      "description": "The activation status of the Virtual Account",
                      "type": "string",
                      "enum": [
                        "activated",
                        "deactivated"
                      ]
                    },
                    "developer_fee_percent": {
                      "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                      "type": "string",
                      "format": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "exclusiveMaximum": true,
                      "example": "0.1"
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "properties": {
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "ach",
                            "wire",
                            "ach_push",
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ],
                          "deprecated": true
                        },
                        "payment_rails": {
                          "description": "The payment rails supported by these deposit instructions",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "ach",
                              "wire",
                              "ach_push",
                              "arbitrum",
                              "avalanche_c_chain",
                              "base",
                              "ethereum",
                              "optimism",
                              "polygon",
                              "solana",
                              "stellar"
                            ]
                          }
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usd"
                          ]
                        },
                        "bank_name": {
                          "description": "The name of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_address": {
                          "description": "The address of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_routing_number": {
                          "description": "The routing number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_account_number": {
                          "description": "The account number of the bank that the customer should send the deposit to",
                          "type": "string"
                        }
                      },
                      "example": {
                        "currency": "usd",
                        "payment_rails": [
                          "ach_push",
                          "wire"
                        ],
                        "bank_name": "Lead Bank",
                        "bank_address": "1801 Main St., Kansas City, MO 64108",
                        "bank_beneficiary_name": "Customer Name",
                        "bank_account_number": "123456789",
                        "bank_routing_number": "87654321"
                      }
                    },
                    "destination": {
                      "required": [
                        "currency",
                        "payment_rail",
                        "address"
                      ],
                      "properties": {
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai"
                          ]
                        },
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "address": {
                          "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                          "type": "string"
                        },
                        "blockchain_memo": {
                          "type": "string",
                          "description": "The memo to include in the transaction, for blockchains that support memos only"
                        }
                      },
                      "example": {
                        "currency": "usdc",
                        "payment_rail": "polygon",
                        "address": "0xdeadbeef"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts/{virtualAccountID}/deactivate": {
      "post": {
        "summary": "Deactivate a Virtual Account",
        "description": "Deactivate a Virtual Account to prevent it from acceping new incoming transactions",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "virtualAccountID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivated Virtual Account object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "status": {
                          "description": "The activation status of the Virtual Account",
                          "type": "string",
                          "enum": [
                            "activated",
                            "deactivated"
                          ]
                        },
                        "developer_fee_percent": {
                          "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                          "type": "string",
                          "format": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "exclusiveMaximum": true,
                          "example": "0.1"
                        },
                        "source_deposit_instructions": {
                          "readOnly": true,
                          "properties": {
                            "payment_rail": {
                              "type": "string",
                              "enum": [
                                "ach",
                                "wire",
                                "ach_push",
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "solana",
                                "stellar"
                              ],
                              "deprecated": true
                            },
                            "payment_rails": {
                              "description": "The payment rails supported by these deposit instructions",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "ach",
                                  "wire",
                                  "ach_push",
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ]
                              }
                            },
                            "currency": {
                              "type": "string",
                              "enum": [
                                "usd"
                              ]
                            },
                            "bank_name": {
                              "description": "The name of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_address": {
                              "description": "The address of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_routing_number": {
                              "description": "The routing number of the bank that the customer should send the deposit to",
                              "type": "string"
                            },
                            "bank_account_number": {
                              "description": "The account number of the bank that the customer should send the deposit to",
                              "type": "string"
                            }
                          },
                          "example": {
                            "currency": "usd",
                            "payment_rails": [
                              "ach_push",
                              "wire"
                            ],
                            "bank_name": "Lead Bank",
                            "bank_address": "1801 Main St., Kansas City, MO 64108",
                            "bank_beneficiary_name": "Customer Name",
                            "bank_account_number": "123456789",
                            "bank_routing_number": "87654321"
                          }
                        },
                        "destination": {
                          "required": [
                            "currency",
                            "payment_rail",
                            "address"
                          ],
                          "properties": {
                            "currency": {
                              "type": "string",
                              "enum": [
                                "usdc",
                                "usdt",
                                "dai"
                              ]
                            },
                            "payment_rail": {
                              "type": "string",
                              "enum": [
                                "arbitrum",
                                "avalanche_c_chain",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon",
                                "solana",
                                "stellar"
                              ]
                            },
                            "address": {
                              "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                              "type": "string"
                            },
                            "blockchain_memo": {
                              "type": "string",
                              "description": "The memo to include in the transaction, for blockchains that support memos only"
                            }
                          },
                          "example": {
                            "currency": "usdc",
                            "payment_rail": "polygon",
                            "address": "0xdeadbeef"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "example": "deactivated"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts/{virtualAccountID}/reactivate": {
      "post": {
        "summary": "Reactivate a Virtual Account",
        "description": "Reactivate a previously deactivated Virtual Account",
        "tags": [
          "Virtual Accounts"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "virtualAccountID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reactivated Virtual Account object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "status": {
                      "description": "The activation status of the Virtual Account",
                      "type": "string",
                      "enum": [
                        "activated",
                        "deactivated"
                      ]
                    },
                    "developer_fee_percent": {
                      "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                      "type": "string",
                      "format": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "exclusiveMaximum": true,
                      "example": "0.1"
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "properties": {
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "ach",
                            "wire",
                            "ach_push",
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ],
                          "deprecated": true
                        },
                        "payment_rails": {
                          "description": "The payment rails supported by these deposit instructions",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "ach",
                              "wire",
                              "ach_push",
                              "arbitrum",
                              "avalanche_c_chain",
                              "base",
                              "ethereum",
                              "optimism",
                              "polygon",
                              "solana",
                              "stellar"
                            ]
                          }
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usd"
                          ]
                        },
                        "bank_name": {
                          "description": "The name of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_address": {
                          "description": "The address of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_routing_number": {
                          "description": "The routing number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_account_number": {
                          "description": "The account number of the bank that the customer should send the deposit to",
                          "type": "string"
                        }
                      },
                      "example": {
                        "currency": "usd",
                        "payment_rails": [
                          "ach_push",
                          "wire"
                        ],
                        "bank_name": "Lead Bank",
                        "bank_address": "1801 Main St., Kansas City, MO 64108",
                        "bank_beneficiary_name": "Customer Name",
                        "bank_account_number": "123456789",
                        "bank_routing_number": "87654321"
                      }
                    },
                    "destination": {
                      "required": [
                        "currency",
                        "payment_rail",
                        "address"
                      ],
                      "properties": {
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai"
                          ]
                        },
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "address": {
                          "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                          "type": "string"
                        },
                        "blockchain_memo": {
                          "type": "string",
                          "description": "The memo to include in the transaction, for blockchains that support memos only"
                        }
                      },
                      "example": {
                        "currency": "usdc",
                        "payment_rail": "polygon",
                        "address": "0xdeadbeef"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/virtual_accounts/{virtualAccountID}/history": {
      "parameters": [
        {
          "name": "customerID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        },
        {
          "name": "virtualAccountID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        },
        {
          "name": "tx_hash",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string"
          },
          "description": "The hash of the transaction"
        },
        {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer"
          },
          "description": "The numbers of items to return (default of 10, max of 100)"
        },
        {
          "in": "query",
          "name": "starting_after",
          "schema": {
            "type": "string"
          },
          "description": "This is an event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
        },
        {
          "in": "query",
          "name": "ending_before",
          "schema": {
            "type": "string"
          },
          "description": "This is an event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
        },
        {
          "name": "event_type",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string",
            "enum": [
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "refund",
              "microdeposit",
              "account_update",
              "deactivation",
              "activation"
            ]
          },
          "description": "Filter history by event type"
        }
      ],
      "get": {
        "summary": "Virtual Account Activity",
        "tags": [
          "Virtual Accounts"
        ],
        "description": "History of activity for a Virtual Account",
        "responses": {
          "200": {
            "description": "List of Virtual Account events",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Virtual Account history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of activity",
                            "enum": [
                              "funds_received",
                              "payment_submitted",
                              "payment_processed",
                              "in_review",
                              "refund",
                              "microdeposit",
                              "account_update",
                              "deactivation",
                              "activation"
                            ]
                          },
                          "customer_id": {
                            "description": "The id of the Bridge customer that this Virtual Account event belongs to",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "virtual_account_id": {
                            "description": "The id of the Virtual Account that this Virtual Account event belongs to",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "amount": {
                            "type": "string",
                            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "currency": {
                            "type": "string",
                            "enum": [
                              "usdc",
                              "usdt",
                              "dai",
                              "usd"
                            ]
                          },
                          "developer_fee_amount": {
                            "type": "string",
                            "description": "Amount of the developer fee if any, represented as a dollar denominated string. This is the final amount taken out of what is ultimately received by your customer, not a percentage. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "exchange_fee_amount": {
                            "type": "string",
                            "description": "Amount of the exchange fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "subtotal_amount": {
                            "type": "string",
                            "description": "Amount of the subtotal, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "gas_fee": {
                            "type": "string",
                            "description": "Amount of the gas fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "deposit_id": {
                            "type": "string",
                            "description": "The id of the deposit related to this event. This id can be used to link multiple events to the same transaction"
                          },
                          "destination_tx_hash": {
                            "type": "string",
                            "description": "The hash of the on-chain transfer to the destination address"
                          },
                          "source": {
                            "required": [
                              "payment_rail"
                            ],
                            "properties": {
                              "payment_rail": {
                                "type": "string",
                                "enum": [
                                  "ach",
                                  "wire",
                                  "ach_push",
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ]
                              },
                              "description": {
                                "description": "(ACH only) The description of the deposit that the customer sent",
                                "type": "string",
                                "readOnly": true
                              },
                              "sender_name": {
                                "description": "(ACH only) The name of the business or individual who initiated the ACH",
                                "type": "string",
                                "readOnly": true
                              },
                              "sender_bank_routing_number": {
                                "description": "(ACH only) The routing number of the entity that initiated this ACH transaction",
                                "type": "string",
                                "readOnly": true
                              },
                              "trace_number": {
                                "description": "(ACH only) The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions",
                                "type": "string",
                                "readOnly": true
                              },
                              "bank_routing_number": {
                                "description": "(Wire only) The routing number of the bank that sent the wire to the Virtual Account",
                                "type": "string",
                                "readOnly": true
                              },
                              "bank_name": {
                                "description": "(Wire only) The name of the bank that sent the wire",
                                "type": "string",
                                "readOnly": true
                              },
                              "bank_beneficiary_name": {
                                "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                                "type": "string",
                                "readOnly": true
                              },
                              "imad": {
                                "description": "The IMAD of a wire transfer",
                                "type": "string",
                                "pattern": "[a-z0-9]*",
                                "minLength": 1,
                                "maxLength": 40,
                                "readOnly": true
                              }
                            }
                          },
                          "created_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of creation of the event",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "History": {
                    "summary": "A list of event history for the Virtual Account",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "value": {
                            "id": "va_event_456",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "va_123",
                            "type": "payment_submitted",
                            "amount": "120.0",
                            "currency": "usd",
                            "developer_fee_amount": "1.25",
                            "exchange_fee_amount": "2.2",
                            "subtotal_amount": "120.0",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2024-01-01T00:00:00.000Z",
                            "destination_tx_hash": "0xdeadbeef",
                            "source": {
                              "payment_rail": "ach_push",
                              "description": "ACH description",
                              "sender_name": "The name of the business or individual who initiated the ACH",
                              "sender_bank_routing_number": "The routing number of the entity that initiated this ACH transaction",
                              "trace_number": "The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions"
                            }
                          }
                        },
                        {
                          "value": {
                            "id": "va_event_123",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "va_123",
                            "type": "funds_received",
                            "amount": "123.45",
                            "currency": "usd",
                            "developer_fee_amount": "0.0",
                            "exchange_fee_amount": "0.0",
                            "subtotal_amount": "123.45",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2024-01-01T00:00:00.000Z",
                            "source": {
                              "payment_rail": "ach_push",
                              "description": "ACH description",
                              "sender_name": "The name of the business or individual who initiated the ACH",
                              "sender_bank_routing_number": "The routing number of the entity that initiated this ACH transaction",
                              "trace_number": "The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/static_memos": {
      "post": {
        "summary": "Create a Static Memo",
        "description": "Create a Static Memo for the specified customer",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "requestBody": {
          "description": "Liquidation Address object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "source",
                  "destination"
                ],
                "properties": {
                  "developer_fee_percent": {
                    "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                    "type": "string",
                    "format": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "exclusiveMaximum": true,
                    "example": "0.1"
                  },
                  "source": {
                    "required": [
                      "currency",
                      "payment_rail"
                    ],
                    "properties": {
                      "currency": {
                        "type": "string",
                        "enum": [
                          "usd"
                        ]
                      },
                      "payment_rail": {
                        "type": "string",
                        "enum": [
                          "ach",
                          "wire",
                          "ach_push",
                          "arbitrum",
                          "avalanche_c_chain",
                          "base",
                          "ethereum",
                          "optimism",
                          "polygon",
                          "solana",
                          "stellar"
                        ]
                      }
                    },
                    "example": {
                      "currency": "usd",
                      "payment_rail": "wire"
                    }
                  },
                  "destination": {
                    "required": [
                      "currency",
                      "payment_rail",
                      "address"
                    ],
                    "properties": {
                      "currency": {
                        "type": "string",
                        "enum": [
                          "usdc",
                          "usdt",
                          "dai"
                        ]
                      },
                      "payment_rail": {
                        "type": "string",
                        "enum": [
                          "arbitrum",
                          "avalanche_c_chain",
                          "base",
                          "ethereum",
                          "optimism",
                          "polygon",
                          "solana",
                          "stellar"
                        ]
                      },
                      "address": {
                        "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                        "type": "string"
                      },
                      "blockchain_memo": {
                        "type": "string",
                        "description": "The memo to include in the transaction, for blockchains that support memos only"
                      }
                    },
                    "example": {
                      "currency": "usdc",
                      "payment_rail": "polygon",
                      "address": "0xdeadbeef"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Static Memo object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "developer_fee_percent": {
                      "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                      "type": "string",
                      "format": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "exclusiveMaximum": true,
                      "example": "0.1"
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "properties": {
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "ach",
                            "wire",
                            "ach_push",
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usd"
                          ]
                        },
                        "deposit_message": {
                          "description": "The message that the customer MUST include in their wire memo/message or ACH description.",
                          "type": "string"
                        },
                        "bank_name": {
                          "description": "The name of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_address": {
                          "description": "The address of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_routing_number": {
                          "description": "The routing number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_account_number": {
                          "description": "The account number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_beneficiary_name": {
                          "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                          "type": "string"
                        }
                      },
                      "example": {
                        "currency": "usd",
                        "deposit_message": "EXAMPLE_MEMO_MESSAGE",
                        "bank_name": "Lead Bank",
                        "bank_address": "1801 Main St., Kansas City, MO 64108",
                        "bank_beneficiary_name": "Bridge Ventures Inc",
                        "bank_account_number": "123456789",
                        "bank_routing_number": "87654321"
                      }
                    },
                    "destination": {
                      "required": [
                        "currency",
                        "payment_rail",
                        "address"
                      ],
                      "properties": {
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai"
                          ]
                        },
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "address": {
                          "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                          "type": "string"
                        },
                        "blockchain_memo": {
                          "type": "string",
                          "description": "The memo to include in the transaction, for blockchains that support memos only"
                        }
                      },
                      "example": {
                        "currency": "usdc",
                        "payment_rail": "polygon",
                        "address": "0xdeadbeef"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Static Memos",
        "description": "List all Static Memo objects for a customer",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Static Memos",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Static Memos",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "developer_fee_percent": {
                            "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                            "type": "string",
                            "format": "number",
                            "minimum": 0,
                            "maximum": 100,
                            "exclusiveMaximum": true,
                            "example": "0.1"
                          },
                          "source_deposit_instructions": {
                            "readOnly": true,
                            "properties": {
                              "payment_rail": {
                                "type": "string",
                                "enum": [
                                  "ach",
                                  "wire",
                                  "ach_push",
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ]
                              },
                              "currency": {
                                "type": "string",
                                "enum": [
                                  "usd"
                                ]
                              },
                              "deposit_message": {
                                "description": "The message that the customer MUST include in their wire memo/message or ACH description.",
                                "type": "string"
                              },
                              "bank_name": {
                                "description": "The name of the bank that the customer should send the deposit to",
                                "type": "string"
                              },
                              "bank_address": {
                                "description": "The address of the bank that the customer should send the deposit to",
                                "type": "string"
                              },
                              "bank_routing_number": {
                                "description": "The routing number of the bank that the customer should send the deposit to",
                                "type": "string"
                              },
                              "bank_account_number": {
                                "description": "The account number of the bank that the customer should send the deposit to",
                                "type": "string"
                              },
                              "bank_beneficiary_name": {
                                "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                                "type": "string"
                              }
                            },
                            "example": {
                              "currency": "usd",
                              "deposit_message": "EXAMPLE_MEMO_MESSAGE",
                              "bank_name": "Lead Bank",
                              "bank_address": "1801 Main St., Kansas City, MO 64108",
                              "bank_beneficiary_name": "Bridge Ventures Inc",
                              "bank_account_number": "123456789",
                              "bank_routing_number": "87654321"
                            }
                          },
                          "destination": {
                            "required": [
                              "currency",
                              "payment_rail",
                              "address"
                            ],
                            "properties": {
                              "currency": {
                                "type": "string",
                                "enum": [
                                  "usdc",
                                  "usdt",
                                  "dai"
                                ]
                              },
                              "payment_rail": {
                                "type": "string",
                                "enum": [
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ]
                              },
                              "address": {
                                "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                                "type": "string"
                              },
                              "blockchain_memo": {
                                "type": "string",
                                "description": "The memo to include in the transaction, for blockchains that support memos only"
                              }
                            },
                            "example": {
                              "currency": "usdc",
                              "payment_rail": "polygon",
                              "address": "0xdeadbeef"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/static_memos/{staticMemoID}": {
      "get": {
        "summary": "Get a Static Memo",
        "description": "Retrieve the Static Memo object from the passed ID",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "staticMemoID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful static memo object response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "developer_fee_percent": {
                      "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                      "type": "string",
                      "format": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "exclusiveMaximum": true,
                      "example": "0.1"
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "properties": {
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "ach",
                            "wire",
                            "ach_push",
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usd"
                          ]
                        },
                        "deposit_message": {
                          "description": "The message that the customer MUST include in their wire memo/message or ACH description.",
                          "type": "string"
                        },
                        "bank_name": {
                          "description": "The name of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_address": {
                          "description": "The address of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_routing_number": {
                          "description": "The routing number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_account_number": {
                          "description": "The account number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_beneficiary_name": {
                          "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                          "type": "string"
                        }
                      },
                      "example": {
                        "currency": "usd",
                        "deposit_message": "EXAMPLE_MEMO_MESSAGE",
                        "bank_name": "Lead Bank",
                        "bank_address": "1801 Main St., Kansas City, MO 64108",
                        "bank_beneficiary_name": "Bridge Ventures Inc",
                        "bank_account_number": "123456789",
                        "bank_routing_number": "87654321"
                      }
                    },
                    "destination": {
                      "required": [
                        "currency",
                        "payment_rail",
                        "address"
                      ],
                      "properties": {
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai"
                          ]
                        },
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "address": {
                          "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                          "type": "string"
                        },
                        "blockchain_memo": {
                          "type": "string",
                          "description": "The memo to include in the transaction, for blockchains that support memos only"
                        }
                      },
                      "example": {
                        "currency": "usdc",
                        "payment_rail": "polygon",
                        "address": "0xdeadbeef"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Static Memo",
        "description": "Update instructions for an existing Static Memo",
        "tags": [
          "Static Memos"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          },
          {
            "name": "staticMemoID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "A UUID that uniquely identifies a resource",
              "type": "string",
              "pattern": "[a-z0-9]*",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "requestBody": {
          "description": "The Static Memo details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "destination": {
                    "properties": {
                      "currency": {
                        "type": "string",
                        "enum": [
                          "usdc",
                          "usdt",
                          "dai"
                        ]
                      },
                      "payment_rail": {
                        "type": "string",
                        "enum": [
                          "arbitrum",
                          "avalanche_c_chain",
                          "base",
                          "ethereum",
                          "optimism",
                          "polygon",
                          "solana",
                          "stellar"
                        ]
                      },
                      "address": {
                        "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                        "type": "string"
                      }
                    },
                    "example": {
                      "currency": "usdc",
                      "payment_rail": "polygon",
                      "address": "0xdeadbeef"
                    }
                  },
                  "developer_fee_percent": {
                    "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                    "type": "string",
                    "format": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "exclusiveMaximum": true,
                    "example": "0.1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Static Memo object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "developer_fee_percent": {
                      "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                      "type": "string",
                      "format": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "exclusiveMaximum": true,
                      "example": "0.1"
                    },
                    "source_deposit_instructions": {
                      "readOnly": true,
                      "properties": {
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "ach",
                            "wire",
                            "ach_push",
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usd"
                          ]
                        },
                        "deposit_message": {
                          "description": "The message that the customer MUST include in their wire memo/message or ACH description.",
                          "type": "string"
                        },
                        "bank_name": {
                          "description": "The name of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_address": {
                          "description": "The address of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_routing_number": {
                          "description": "The routing number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_account_number": {
                          "description": "The account number of the bank that the customer should send the deposit to",
                          "type": "string"
                        },
                        "bank_beneficiary_name": {
                          "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                          "type": "string"
                        }
                      },
                      "example": {
                        "currency": "usd",
                        "deposit_message": "EXAMPLE_MEMO_MESSAGE",
                        "bank_name": "Lead Bank",
                        "bank_address": "1801 Main St., Kansas City, MO 64108",
                        "bank_beneficiary_name": "Bridge Ventures Inc",
                        "bank_account_number": "123456789",
                        "bank_routing_number": "87654321"
                      }
                    },
                    "destination": {
                      "required": [
                        "currency",
                        "payment_rail",
                        "address"
                      ],
                      "properties": {
                        "currency": {
                          "type": "string",
                          "enum": [
                            "usdc",
                            "usdt",
                            "dai"
                          ]
                        },
                        "payment_rail": {
                          "type": "string",
                          "enum": [
                            "arbitrum",
                            "avalanche_c_chain",
                            "base",
                            "ethereum",
                            "optimism",
                            "polygon",
                            "solana",
                            "stellar"
                          ]
                        },
                        "address": {
                          "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                          "type": "string"
                        },
                        "blockchain_memo": {
                          "type": "string",
                          "description": "The memo to include in the transaction, for blockchains that support memos only"
                        }
                      },
                      "example": {
                        "currency": "usdc",
                        "payment_rail": "polygon",
                        "address": "0xdeadbeef"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerID}/static_memos/{staticMemoID}/history": {
      "parameters": [
        {
          "name": "customerID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        },
        {
          "name": "staticMemoID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        },
        {
          "name": "tx_hash",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string"
          },
          "description": "The hash of the transaction"
        },
        {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer"
          },
          "description": "The numbers of items to return (default of 10, max of 100)"
        },
        {
          "in": "query",
          "name": "starting_after",
          "schema": {
            "type": "string"
          },
          "description": "This is an event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
        },
        {
          "in": "query",
          "name": "ending_before",
          "schema": {
            "type": "string"
          },
          "description": "This is an event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
        },
        {
          "name": "event_type",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string",
            "enum": [
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "refund",
              "microdeposit",
              "account_update",
              "deactivation",
              "activation"
            ]
          },
          "description": "Filter history by event type"
        }
      ],
      "get": {
        "summary": "Static Memo Activity",
        "tags": [
          "Static Memos"
        ],
        "description": "History of activity for a Static Memo",
        "responses": {
          "200": {
            "description": "List of Static Memo events",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Static Memo history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of activity",
                            "enum": [
                              "funds_received",
                              "payment_submitted",
                              "payment_processed",
                              "in_review",
                              "refund",
                              "account_update"
                            ]
                          },
                          "customer_id": {
                            "description": "The id of the Bridge customer that this static memo event belongs to",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "static_memo_id": {
                            "description": "The id of the Static Memo that this event belongs to",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "amount": {
                            "type": "string",
                            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "currency": {
                            "type": "string",
                            "enum": [
                              "usdc",
                              "usdt",
                              "dai",
                              "usd"
                            ]
                          },
                          "developer_fee_amount": {
                            "type": "string",
                            "description": "Amount of the developer fee if any, represented as a dollar denominated string. This is the final amount taken out of what is ultimately received by your customer, not a percentage. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "exchange_fee_amount": {
                            "type": "string",
                            "description": "Amount of the exchange fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "subtotal_amount": {
                            "type": "string",
                            "description": "Amount of the subtotal, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "gas_fee": {
                            "type": "string",
                            "description": "Amount of the gas fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "deposit_id": {
                            "type": "string",
                            "description": "The id of the deposit related to this event. This id can be used to link multiple events to the same transaction"
                          },
                          "destination_tx_hash": {
                            "type": "string",
                            "description": "The hash of the on-chain transfer to the destination address"
                          },
                          "source_deposit_instructions": {
                            "required": [
                              "deposit_message"
                            ],
                            "properties": {
                              "deposit_message": {
                                "description": "The message that the customer MUST include in their wire memo/message or ach push description",
                                "type": "string"
                              }
                            }
                          },
                          "source": {
                            "required": [
                              "payment_rail"
                            ],
                            "properties": {
                              "payment_rail": {
                                "type": "string",
                                "enum": [
                                  "ach",
                                  "wire",
                                  "ach_push",
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ]
                              },
                              "bank_beneficiary_name": {
                                "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                                "type": "string"
                              },
                              "bank_routing_number": {
                                "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                                "type": "string"
                              },
                              "bank_name": {
                                "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                                "type": "string"
                              },
                              "imad": {
                                "description": "The IMAD of a wire transfer",
                                "type": "string",
                                "pattern": "[a-z0-9]*",
                                "minLength": 1,
                                "maxLength": 40
                              },
                              "omad": {
                                "description": "The OMAD of a wire transfer",
                                "type": "string",
                                "pattern": "[a-z0-9]*",
                                "minLength": 1,
                                "maxLength": 40
                              },
                              "description": {
                                "description": "(ACH only) The description of the deposit that the customer sent",
                                "type": "string"
                              }
                            }
                          },
                          "created_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of creation of the event",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "History": {
                    "summary": "A list of event history for the Static Memo",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "value": {
                            "id": "sm_event_456",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "sm_123",
                            "type": "payment_submitted",
                            "amount": "120.0",
                            "currency": "usd",
                            "developer_fee_amount": "1.25",
                            "exchange_fee_amount": "2.2",
                            "subtotal_amount": "120.0",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "destination_tx_hash": "0xdeadbeef",
                            "source_deposit_instructions": {
                              "deposit_message": "BVI7depositmessage"
                            },
                            "source": {
                              "payment_rail": "ach_push",
                              "description": "ACH description, if available"
                            }
                          }
                        },
                        {
                          "value": {
                            "id": "sm_event_123",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "sm_123",
                            "type": "funds_received",
                            "amount": "123.45",
                            "currency": "usd",
                            "developer_fee_amount": "0.0",
                            "exchange_fee_amount": "0.0",
                            "subtotal_amount": "123.45",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "source_deposit_instructions": {
                              "deposit_message": "BVI7depositmessage"
                            },
                            "source": {
                              "payment_rail": "ach_push",
                              "description": "ACH description, if available"
                            }
                          }
                        },
                        {
                          "value": {
                            "id": "sm_event_457",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "sm_123",
                            "type": "payment_submitted",
                            "amount": "120.0",
                            "currency": "usd",
                            "developer_fee_amount": "1.25",
                            "exchange_fee_amount": "2.2",
                            "subtotal_amount": "120.0",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "destination_tx_hash": "0xdeadbeef",
                            "source_deposit_instructions": {
                              "deposit_message": "BVI7depositmessage"
                            },
                            "source": {
                              "payment_rail": "wire",
                              "bank_beneficiary_name": "Bank beneficiary",
                              "bank_routing_number": "1234567890",
                              "bank_name": "Bank name",
                              "imad": "IMAD of incoming wire, if available",
                              "omad": "OMAD of incoming wire, if available"
                            }
                          }
                        },
                        {
                          "value": {
                            "id": "sm_event_124",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "sm_123",
                            "type": "funds_received",
                            "amount": "123.45",
                            "currency": "usd",
                            "developer_fee_amount": "0.0",
                            "exchange_fee_amount": "0.0",
                            "subtotal_amount": "123.45",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "source_deposit_instructions": {
                              "deposit_message": "BVI7depositmessage"
                            },
                            "source": {
                              "payment_rail": "wire",
                              "bank_beneficiary_name": "Bank beneficiary",
                              "bank_routing_number": "1234567890",
                              "bank_name": "Bank name",
                              "imad": "IMAD of incoming wire, if available",
                              "omad": "OMAD of incoming wire, if available"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/virtual_accounts/history": {
      "parameters": [
        {
          "name": "tx_hash",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string"
          },
          "description": "The hash of the transaction"
        },
        {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer"
          },
          "description": "The numbers of items to return (default of 10, max of 100)"
        },
        {
          "in": "query",
          "name": "starting_after",
          "schema": {
            "type": "string"
          },
          "description": "This is an event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
        },
        {
          "in": "query",
          "name": "ending_before",
          "schema": {
            "type": "string"
          },
          "description": "This is an event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
        },
        {
          "name": "event_type",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string",
            "enum": [
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "refund",
              "microdeposit",
              "account_update",
              "deactivation",
              "activation"
            ]
          },
          "description": "Filter history by event type"
        }
      ],
      "get": {
        "summary": "Virtual Account Activity Across All Customers",
        "tags": [
          "Virtual Accounts"
        ],
        "description": "History of activity across all customers and Virtual Accounts",
        "responses": {
          "200": {
            "description": "List of Virtual Account events",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Virtual Account history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of activity",
                            "enum": [
                              "funds_received",
                              "payment_submitted",
                              "payment_processed",
                              "in_review",
                              "refund",
                              "microdeposit",
                              "account_update",
                              "deactivation",
                              "activation"
                            ]
                          },
                          "customer_id": {
                            "description": "The id of the Bridge customer that this Virtual Account event belongs to",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "virtual_account_id": {
                            "description": "The id of the Virtual Account that this Virtual Account event belongs to",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "amount": {
                            "type": "string",
                            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "currency": {
                            "type": "string",
                            "enum": [
                              "usdc",
                              "usdt",
                              "dai",
                              "usd"
                            ]
                          },
                          "developer_fee_amount": {
                            "type": "string",
                            "description": "Amount of the developer fee if any, represented as a dollar denominated string. This is the final amount taken out of what is ultimately received by your customer, not a percentage. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "exchange_fee_amount": {
                            "type": "string",
                            "description": "Amount of the exchange fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "subtotal_amount": {
                            "type": "string",
                            "description": "Amount of the subtotal, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "gas_fee": {
                            "type": "string",
                            "description": "Amount of the gas fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "deposit_id": {
                            "type": "string",
                            "description": "The id of the deposit related to this event. This id can be used to link multiple events to the same transaction"
                          },
                          "destination_tx_hash": {
                            "type": "string",
                            "description": "The hash of the on-chain transfer to the destination address"
                          },
                          "source": {
                            "required": [
                              "payment_rail"
                            ],
                            "properties": {
                              "payment_rail": {
                                "type": "string",
                                "enum": [
                                  "ach",
                                  "wire",
                                  "ach_push",
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ]
                              },
                              "description": {
                                "description": "(ACH only) The description of the deposit that the customer sent",
                                "type": "string",
                                "readOnly": true
                              },
                              "sender_name": {
                                "description": "(ACH only) The name of the business or individual who initiated the ACH",
                                "type": "string",
                                "readOnly": true
                              },
                              "sender_bank_routing_number": {
                                "description": "(ACH only) The routing number of the entity that initiated this ACH transaction",
                                "type": "string",
                                "readOnly": true
                              },
                              "trace_number": {
                                "description": "(ACH only) The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions",
                                "type": "string",
                                "readOnly": true
                              },
                              "bank_routing_number": {
                                "description": "(Wire only) The routing number of the bank that sent the wire to the Virtual Account",
                                "type": "string",
                                "readOnly": true
                              },
                              "bank_name": {
                                "description": "(Wire only) The name of the bank that sent the wire",
                                "type": "string",
                                "readOnly": true
                              },
                              "bank_beneficiary_name": {
                                "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                                "type": "string",
                                "readOnly": true
                              },
                              "imad": {
                                "description": "The IMAD of a wire transfer",
                                "type": "string",
                                "pattern": "[a-z0-9]*",
                                "minLength": 1,
                                "maxLength": 40,
                                "readOnly": true
                              }
                            }
                          },
                          "created_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of creation of the event",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "History": {
                    "summary": "A list of event history across all customers and Virtual Accounts",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "value": {
                            "id": "va_event_456",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "va_123",
                            "type": "payment_submitted",
                            "amount": "120.0",
                            "currency": "usd",
                            "developer_fee_amount": "1.25",
                            "exchange_fee_amount": "2.2",
                            "subtotal_amount": "120.0",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2024-01-01T00:00:00.000Z",
                            "destination_tx_hash": "0xdeadbeef",
                            "source": {
                              "payment_rail": "ach_push",
                              "description": "ACH description",
                              "sender_name": "The name of the business or individual who initiated the ACH",
                              "sender_bank_routing_number": "The routing number of the entity that initiated this ACH transaction",
                              "trace_number": "The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions"
                            }
                          }
                        },
                        {
                          "value": {
                            "id": "va_event_123",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "va_123",
                            "type": "funds_received",
                            "amount": "123.45",
                            "currency": "usd",
                            "developer_fee_amount": "0.0",
                            "exchange_fee_amount": "0.0",
                            "subtotal_amount": "123.45",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2024-01-01T00:00:00.000Z",
                            "source": {
                              "payment_rail": "ach_push",
                              "description": "ACH description",
                              "sender_name": "The name of the business or individual who initiated the ACH",
                              "sender_bank_routing_number": "The routing number of the entity that initiated this ACH transaction",
                              "trace_number": "The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/developer/fees": {
      "get": {
        "summary": "Get the configured fees",
        "description": "Get fees that have been configured for supported products.",
        "tags": [
          "Developers"
        ],
        "responses": {
          "200": {
            "description": "The configured fees for your developer account.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "default_liquidation_address_fee_percent"
                  ],
                  "properties": {
                    "default_liquidation_address_fee_percent": {
                      "description": "The default fee percent that will be applied to all your Liquidation Addresses. The value is a base 100 percentage, i.e. 10.2% is \"10.2\" in the API.",
                      "type": "string",
                      "format": "float",
                      "minimum": 0,
                      "maximum": 1,
                      "example": "0.5",
                      "exclusiveMaximum": true
                    }
                  }
                },
                "examples": {
                  "SuccessfulResponse": {
                    "summary": "The fees configured for the account.",
                    "value": {
                      "default_liquidation_address_fee_percent": "1.3"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update the configured fees",
        "description": "Update fees for supported products.",
        "tags": [
          "Developers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The default fee percent that will be applied to all your Liquidation Addresses. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "default_liquidation_address_fee_percent"
                ],
                "properties": {
                  "default_liquidation_address_fee_percent": {
                    "description": "The default fee percent that will be applied to all your Liquidation Addresses. The value is a base 100 percentage, i.e. 10.2% is \"10.2\" in the API.",
                    "type": "string",
                    "format": "float",
                    "minimum": 0,
                    "maximum": 1,
                    "example": "0.5",
                    "exclusiveMaximum": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The configured fees have been updated for your developer account.",
            "content": {
              "application/json": {
                "examples": {
                  "SuccessfulResponse": {
                    "summary": "The fees have been updated.",
                    "value": {
                      "summary": "A successful post request for updating fees."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/developer/fee_external_account": {
      "get": {
        "summary": "Get the configured fee External Account",
        "description": "Get the configured fee External Account.",
        "tags": [
          "Developers"
        ],
        "responses": {
          "200": {
            "description": "Get the configured fee External Account.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_owner_name",
                    "id",
                    "currency",
                    "customer_id",
                    "account_type",
                    "created_at",
                    "updated_at",
                    "active"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "account_owner_name",
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "customer_id": {
                          "description": "The id of the Bridge customer that this External Account belongs to",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "currency": {
                          "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                          "type": "string",
                          "enum": [
                            "usd",
                            "eur"
                          ]
                        },
                        "bank_name": {
                          "description": "Bank name of the account (e.g. \"Chase\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "account_owner_name": {
                          "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "last_4": {
                          "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "account_number": {
                          "writeOnly": true,
                          "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                          "type": "string",
                          "minLength": 12
                        },
                        "routing_number": {
                          "writeOnly": true,
                          "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                          "type": "string",
                          "minLength": 9
                        },
                        "account_type": {
                          "description": "Type of the bank account. The default is `us`",
                          "type": "string",
                          "enum": [
                            "us",
                            "iban"
                          ]
                        },
                        "iban": {
                          "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                          "required": [
                            "account_number",
                            "bic",
                            "country",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "bic": {
                              "type": "string",
                              "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account": {
                          "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                          "required": [
                            "account_number",
                            "routing_number",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The bank account number",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "routing_number": {
                              "type": "string",
                              "description": "The bank routing number",
                              "minLength": 9,
                              "maxLength": 9
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account_owner_type": {
                          "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                          "type": "string",
                          "enum": [
                            "individual",
                            "business"
                          ]
                        },
                        "first_name": {
                          "type": "string",
                          "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "business_name": {
                          "type": "string",
                          "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                        },
                        "address": {
                          "required": [
                            "street_line_1",
                            "country",
                            "city"
                          ],
                          "properties": {
                            "street_line_1": {
                              "type": "string",
                              "minLength": 1
                            },
                            "street_line_2": {
                              "type": "string",
                              "minLength": 1
                            },
                            "city": {
                              "type": "string",
                              "minLength": 1
                            },
                            "state": {
                              "type": "string",
                              "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "postal_code": {
                              "type": "string",
                              "description": "Must be supplied for countries that use postal codes.",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            }
                          },
                          "writeOnly": true,
                          "description": "Address of the beneficiary of this account. Required for `us` accounts."
                        },
                        "created_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of creation of the External Account",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of last update of the External Account",
                          "format": "date-time"
                        },
                        "active": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether or not this External Account is active"
                        },
                        "beneficiary_address_valid": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                        }
                      }
                    },
                    {
                      "properties": {
                        "account": {
                          "description": "US bank account information. It's populated when the `account_type` is `us`"
                        },
                        "currency": {
                          "description": "Currency associated with the bank account."
                        },
                        "account_type": {
                          "description": "Type of the bank account."
                        },
                        "account_owner_type": {
                          "description": "Type of the account ownership"
                        },
                        "first_name": {
                          "description": "First name of the individual account owner"
                        },
                        "last_name": {
                          "description": "Last name of the individual account owner"
                        },
                        "business_name": {
                          "description": "Business name of the business account owner"
                        },
                        "iban": {
                          "description": "IBAN bank account information. It's populated when the `account_type` is `iban`."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "SuccessfulExternalAccountResponse": {
                    "summary": "A successful External Account object",
                    "value": {
                      "id": "ea_123",
                      "account_type": "us",
                      "currency": "usd",
                      "customer_id": "cust_123",
                      "account_owner_name": "John Doe",
                      "bank_name": "Wells Fargo",
                      "last_4": "1111",
                      "active": true,
                      "beneficiary_address_valid": true,
                      "account": {
                        "last_4": "1111",
                        "routing_number": "121000248"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulIbanExternalAccountResponse": {
                    "summary": "A successful iban External Account object",
                    "value": {
                      "id": "ea_123",
                      "customer_id": "cust_123",
                      "account_type": "iban",
                      "currency": "eur",
                      "account_owner_name": "John Doe",
                      "bank_name": "AAC CAPITAL PARTNERS LIMITED",
                      "active": true,
                      "iban": {
                        "last_4": "5981",
                        "bic": "BARBGB2LLEI",
                        "country": "NLD"
                      },
                      "account_owner_type": "individual",
                      "first_name": "John",
                      "last_name": "Doe",
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Configure a fee External Account",
        "description": "Configure a fee External Account.",
        "tags": [
          "Developers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New External Account object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "account_owner_name",
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "A UUID that uniquely identifies a resource",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 42,
                    "readOnly": true
                  },
                  "customer_id": {
                    "description": "The id of the Bridge customer that this External Account belongs to",
                    "type": "string",
                    "minLength": 1,
                    "readOnly": true
                  },
                  "currency": {
                    "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                    "type": "string",
                    "enum": [
                      "usd",
                      "eur"
                    ]
                  },
                  "bank_name": {
                    "description": "Bank name of the account (e.g. \"Chase\")",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "account_owner_name": {
                    "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "last_4": {
                    "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                    "type": "string",
                    "minLength": 1,
                    "readOnly": true
                  },
                  "account_number": {
                    "writeOnly": true,
                    "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                    "type": "string",
                    "minLength": 12
                  },
                  "routing_number": {
                    "writeOnly": true,
                    "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                    "type": "string",
                    "minLength": 9
                  },
                  "account_type": {
                    "description": "Type of the bank account. The default is `us`",
                    "type": "string",
                    "enum": [
                      "us",
                      "iban"
                    ]
                  },
                  "iban": {
                    "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                    "required": [
                      "account_number",
                      "bic",
                      "country",
                      "last_4"
                    ],
                    "properties": {
                      "account_number": {
                        "type": "string",
                        "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                        "minLength": 1,
                        "writeOnly": true
                      },
                      "bic": {
                        "type": "string",
                        "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                        "minLength": 1
                      },
                      "country": {
                        "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 3
                      },
                      "last_4": {
                        "description": "Last 4 digits of the bank account number",
                        "minLength": 1,
                        "type": "string",
                        "readOnly": true
                      }
                    }
                  },
                  "account": {
                    "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                    "required": [
                      "account_number",
                      "routing_number",
                      "last_4"
                    ],
                    "properties": {
                      "account_number": {
                        "type": "string",
                        "description": "The bank account number",
                        "minLength": 1,
                        "writeOnly": true
                      },
                      "routing_number": {
                        "type": "string",
                        "description": "The bank routing number",
                        "minLength": 9,
                        "maxLength": 9
                      },
                      "last_4": {
                        "description": "Last 4 digits of the bank account number",
                        "minLength": 1,
                        "type": "string",
                        "readOnly": true
                      }
                    }
                  },
                  "account_owner_type": {
                    "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                    "type": "string",
                    "enum": [
                      "individual",
                      "business"
                    ]
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                  },
                  "business_name": {
                    "type": "string",
                    "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                  },
                  "address": {
                    "required": [
                      "street_line_1",
                      "country",
                      "city"
                    ],
                    "properties": {
                      "street_line_1": {
                        "type": "string",
                        "minLength": 1
                      },
                      "street_line_2": {
                        "type": "string",
                        "minLength": 1
                      },
                      "city": {
                        "type": "string",
                        "minLength": 1
                      },
                      "state": {
                        "type": "string",
                        "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                        "minLength": 2,
                        "maxLength": 2
                      },
                      "postal_code": {
                        "type": "string",
                        "description": "Must be supplied for countries that use postal codes.",
                        "minLength": 1
                      },
                      "country": {
                        "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 3
                      }
                    },
                    "writeOnly": true,
                    "description": "Address of the beneficiary of this account. Required for `us` accounts."
                  },
                  "created_at": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Time of creation of the External Account",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Time of last update of the External Account",
                    "format": "date-time"
                  },
                  "active": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Whether or not this External Account is active"
                  },
                  "beneficiary_address_valid": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "External Account object created",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "account_owner_name",
                    "id",
                    "currency",
                    "customer_id",
                    "account_type",
                    "created_at",
                    "updated_at",
                    "active"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "account_owner_name",
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A UUID that uniquely identifies a resource",
                          "type": "string",
                          "pattern": "[a-z0-9]*",
                          "minLength": 1,
                          "maxLength": 42,
                          "readOnly": true
                        },
                        "customer_id": {
                          "description": "The id of the Bridge customer that this External Account belongs to",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "currency": {
                          "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                          "type": "string",
                          "enum": [
                            "usd",
                            "eur"
                          ]
                        },
                        "bank_name": {
                          "description": "Bank name of the account (e.g. \"Chase\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "account_owner_name": {
                          "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 256
                        },
                        "last_4": {
                          "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                          "type": "string",
                          "minLength": 1,
                          "readOnly": true
                        },
                        "account_number": {
                          "writeOnly": true,
                          "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                          "type": "string",
                          "minLength": 12
                        },
                        "routing_number": {
                          "writeOnly": true,
                          "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                          "type": "string",
                          "minLength": 9
                        },
                        "account_type": {
                          "description": "Type of the bank account. The default is `us`",
                          "type": "string",
                          "enum": [
                            "us",
                            "iban"
                          ]
                        },
                        "iban": {
                          "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                          "required": [
                            "account_number",
                            "bic",
                            "country",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "bic": {
                              "type": "string",
                              "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account": {
                          "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                          "required": [
                            "account_number",
                            "routing_number",
                            "last_4"
                          ],
                          "properties": {
                            "account_number": {
                              "type": "string",
                              "description": "The bank account number",
                              "minLength": 1,
                              "writeOnly": true
                            },
                            "routing_number": {
                              "type": "string",
                              "description": "The bank routing number",
                              "minLength": 9,
                              "maxLength": 9
                            },
                            "last_4": {
                              "description": "Last 4 digits of the bank account number",
                              "minLength": 1,
                              "type": "string",
                              "readOnly": true
                            }
                          }
                        },
                        "account_owner_type": {
                          "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                          "type": "string",
                          "enum": [
                            "individual",
                            "business"
                          ]
                        },
                        "first_name": {
                          "type": "string",
                          "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
                        },
                        "business_name": {
                          "type": "string",
                          "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
                        },
                        "address": {
                          "required": [
                            "street_line_1",
                            "country",
                            "city"
                          ],
                          "properties": {
                            "street_line_1": {
                              "type": "string",
                              "minLength": 1
                            },
                            "street_line_2": {
                              "type": "string",
                              "minLength": 1
                            },
                            "city": {
                              "type": "string",
                              "minLength": 1
                            },
                            "state": {
                              "type": "string",
                              "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                              "minLength": 2,
                              "maxLength": 2
                            },
                            "postal_code": {
                              "type": "string",
                              "description": "Must be supplied for countries that use postal codes.",
                              "minLength": 1
                            },
                            "country": {
                              "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                              "type": "string",
                              "minLength": 3,
                              "maxLength": 3
                            }
                          },
                          "writeOnly": true,
                          "description": "Address of the beneficiary of this account. Required for `us` accounts."
                        },
                        "created_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of creation of the External Account",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "readOnly": true,
                          "type": "string",
                          "description": "Time of last update of the External Account",
                          "format": "date-time"
                        },
                        "active": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether or not this External Account is active"
                        },
                        "beneficiary_address_valid": {
                          "readOnly": true,
                          "type": "boolean",
                          "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
                        }
                      }
                    },
                    {
                      "properties": {
                        "account": {
                          "description": "US bank account information. It's populated when the `account_type` is `us`"
                        },
                        "currency": {
                          "description": "Currency associated with the bank account."
                        },
                        "account_type": {
                          "description": "Type of the bank account."
                        },
                        "account_owner_type": {
                          "description": "Type of the account ownership"
                        },
                        "first_name": {
                          "description": "First name of the individual account owner"
                        },
                        "last_name": {
                          "description": "Last name of the individual account owner"
                        },
                        "business_name": {
                          "description": "Business name of the business account owner"
                        },
                        "iban": {
                          "description": "IBAN bank account information. It's populated when the `account_type` is `iban`."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "SuccessfulExternalAccountResponse": {
                    "summary": "A successful External Account object",
                    "value": {
                      "id": "ea_123",
                      "account_type": "us",
                      "currency": "usd",
                      "customer_id": "cust_123",
                      "account_owner_name": "John Doe",
                      "bank_name": "Wells Fargo",
                      "last_4": "1111",
                      "active": true,
                      "beneficiary_address_valid": true,
                      "account": {
                        "last_4": "1111",
                        "routing_number": "121000248"
                      },
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  },
                  "SuccessfulIbanExternalAccountResponse": {
                    "summary": "A successful iban External Account object",
                    "value": {
                      "id": "ea_123",
                      "customer_id": "cust_123",
                      "account_type": "iban",
                      "currency": "eur",
                      "account_owner_name": "John Doe",
                      "bank_name": "AAC CAPITAL PARTNERS LIMITED",
                      "active": true,
                      "iban": {
                        "last_4": "5981",
                        "bic": "BARBGB2LLEI",
                        "country": "NLD"
                      },
                      "account_owner_type": "individual",
                      "first_name": "John",
                      "last_name": "Doe",
                      "created_at": "2020-01-01T00:00:00.000Z",
                      "updated_at": "2020-01-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/kyc_links": {
      "post": {
        "summary": "Generate the Links needs to complete KYC for an individual or business",
        "tags": [
          "KYC Links"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Information about the customer to create KYC Links for",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "full_name",
                  "email",
                  "type"
                ],
                "properties": {
                  "full_name": {
                    "description": "Full name of the customer, for a business, this would be the business entity's legal name",
                    "type": "string",
                    "minLength": 1
                  },
                  "email": {
                    "description": "Email of the customer",
                    "type": "string",
                    "minLength": 1
                  },
                  "type": {
                    "description": "Type of the customer (individual vs. business)",
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                      "individual",
                      "business"
                    ]
                  },
                  "endorsements": {
                    "description": "List of endorsements to request for the generated KYC link.\nFor example, `sepa` endorsement could be requested to allow an `individual` customer to submit `proof-of-address` documents in the KYC flow.",
                    "type": "array",
                    "minItems": 0,
                    "items": {
                      "type": "string",
                      "enum": [
                        "sepa"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "KYC Links generated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the KYC link"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "ID of the customer. This will be nil until the customer is approved for both KYC and TOS."
                    },
                    "full_name": {
                      "type": "string",
                      "description": "Full name of the customer, for a business, this would be the business entity's legal name"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email of the customer"
                    },
                    "kyc_link": {
                      "type": "string",
                      "description": "Link to the KYC flow"
                    },
                    "kyc_status": {
                      "type": "string",
                      "description": "Status of the KYC flow. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
                      "enum": [
                        "not_started",
                        "pending",
                        "incomplete",
                        "awaiting_ubo",
                        "manual_review",
                        "under_review",
                        "approved",
                        "rejected"
                      ]
                    },
                    "rejection_reasons": {
                      "readOnly": true,
                      "description": "Reasons why a customer KYC was rejected",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "description": "Reason why the kyc_status was rejected",
                        "properties": {
                          "developer_reason": {
                            "type": "string",
                            "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                          },
                          "reason": {
                            "type": "string",
                            "description": "Reason for why a customer was rejected. To be shared with the customer."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Time of creation of the rejection reason"
                          }
                        }
                      }
                    },
                    "tos_link": {
                      "type": "string",
                      "description": "Link to the TOS flow"
                    },
                    "tos_status": {
                      "type": "string",
                      "description": "Status of the TOS flow",
                      "enum": [
                        "pending",
                        "approved"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Time of creation of the KYC link",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "SuccessfulLiquidationAddressCreateResponse": {
                    "summary": "KYC Links generated",
                    "value": {
                      "id": "kyc_link_123",
                      "full_name": "John Doe",
                      "email": "johndoe@johndoe.com",
                      "type": "individual",
                      "kyc_link": "www.kyclink.com/blah",
                      "tos_link": "www.toslink.com/blah",
                      "kyc_status": "not_started",
                      "tos_status": "pending",
                      "customer_id": "cust_123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all KYC links.",
        "description": "Retrieve the full list of kyc links.",
        "tags": [
          "KYC Links"
        ],
        "responses": {
          "200": {
            "description": "Successful KYC links status response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Kyc Links",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "description": "total number of items in data",
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "ID of the KYC link"
                          },
                          "customer_id": {
                            "type": "string",
                            "description": "ID of the customer. This will be nil until the customer is approved for both KYC and TOS."
                          },
                          "full_name": {
                            "type": "string",
                            "description": "Full name of the customer, for a business, this would be the business entity's legal name"
                          },
                          "email": {
                            "type": "string",
                            "description": "Email of the customer"
                          },
                          "kyc_link": {
                            "type": "string",
                            "description": "Link to the KYC flow"
                          },
                          "kyc_status": {
                            "type": "string",
                            "description": "Status of the KYC flow. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
                            "enum": [
                              "not_started",
                              "pending",
                              "incomplete",
                              "awaiting_ubo",
                              "manual_review",
                              "under_review",
                              "approved",
                              "rejected"
                            ]
                          },
                          "rejection_reasons": {
                            "readOnly": true,
                            "description": "Reasons why a customer KYC was rejected",
                            "type": "array",
                            "minItems": 0,
                            "items": {
                              "description": "Reason why the kyc_status was rejected",
                              "properties": {
                                "developer_reason": {
                                  "type": "string",
                                  "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                                },
                                "reason": {
                                  "type": "string",
                                  "description": "Reason for why a customer was rejected. To be shared with the customer."
                                },
                                "created_at": {
                                  "type": "string",
                                  "description": "Time of creation of the rejection reason"
                                }
                              }
                            }
                          },
                          "tos_link": {
                            "type": "string",
                            "description": "Link to the TOS flow"
                          },
                          "tos_status": {
                            "type": "string",
                            "description": "Status of the TOS flow",
                            "enum": [
                              "pending",
                              "approved"
                            ]
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Time of creation of the KYC link",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "KycLinksGetResponse": {
                    "summary": "KYC link status for multiple customers",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "id": "kyc_link_123",
                          "full_name": "John Doe",
                          "email": "johndoe@johndoe.com",
                          "type": "individual",
                          "kyc_link": "www.kyclink.com/blah",
                          "tos_link": "www.toslink.com/blah",
                          "kyc_status": "approved",
                          "rejection_reasons": [],
                          "tos_status": "approved",
                          "customer_id": "cust_123"
                        },
                        {
                          "id": "kyc_link_456",
                          "full_name": "Jane Doe",
                          "email": "janedoe@janedoe.com",
                          "type": "individual",
                          "kyc_link": "www.kyclink.com/blah",
                          "tos_link": "www.toslink.com/blah",
                          "kyc_status": "rejected",
                          "rejection_reasons": [
                            {
                              "developer_reason": "Missing required ID details.",
                              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                              "created_at": "2020-01-02T00:00:00.000Z"
                            },
                            {
                              "developer_reason": "Blurry face portrait.",
                              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                              "created_at": "2020-01-02T00:00:00.000Z"
                            }
                          ],
                          "tos_status": "approved",
                          "customer_id": "cust_456"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/kyc_links/{kycLinkID}": {
      "parameters": [
        {
          "name": "kycLinkID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "get": {
        "summary": "Check the status of a KYC link",
        "description": "Retrieve the status of a KYC request from the passed in KYC link id",
        "tags": [
          "KYC Links"
        ],
        "responses": {
          "200": {
            "description": "Successful KYC link status response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the KYC link"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "ID of the customer. This will be nil until the customer is approved for both KYC and TOS."
                    },
                    "full_name": {
                      "type": "string",
                      "description": "Full name of the customer, for a business, this would be the business entity's legal name"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email of the customer"
                    },
                    "kyc_link": {
                      "type": "string",
                      "description": "Link to the KYC flow"
                    },
                    "kyc_status": {
                      "type": "string",
                      "description": "Status of the KYC flow. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
                      "enum": [
                        "not_started",
                        "pending",
                        "incomplete",
                        "awaiting_ubo",
                        "manual_review",
                        "under_review",
                        "approved",
                        "rejected"
                      ]
                    },
                    "rejection_reasons": {
                      "readOnly": true,
                      "description": "Reasons why a customer KYC was rejected",
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "description": "Reason why the kyc_status was rejected",
                        "properties": {
                          "developer_reason": {
                            "type": "string",
                            "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                          },
                          "reason": {
                            "type": "string",
                            "description": "Reason for why a customer was rejected. To be shared with the customer."
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Time of creation of the rejection reason"
                          }
                        }
                      }
                    },
                    "tos_link": {
                      "type": "string",
                      "description": "Link to the TOS flow"
                    },
                    "tos_status": {
                      "type": "string",
                      "description": "Status of the TOS flow",
                      "enum": [
                        "pending",
                        "approved"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Time of creation of the KYC link",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "ApprovedKYCLinkGetResponse": {
                    "summary": "KYC link status for an approved customer",
                    "value": {
                      "id": "kyc_link_123",
                      "full_name": "John Doe",
                      "email": "johndoe@johndoe.com",
                      "type": "individual",
                      "kyc_link": "www.kyclink.com/blah",
                      "tos_link": "www.toslink.com/blah",
                      "kyc_status": "approved",
                      "rejection_reasons": [],
                      "tos_status": "approved",
                      "customer_id": "cust_123"
                    }
                  },
                  "RejectedKYCLinkGetResponse": {
                    "summary": "KYC link status for a rejected customer",
                    "value": {
                      "id": "kyc_link_123",
                      "full_name": "John Doe",
                      "email": "johndoe@johndoe.com",
                      "type": "individual",
                      "kyc_link": "www.kyclink.com/blah",
                      "tos_link": "www.toslink.com/blah",
                      "kyc_status": "rejected",
                      "rejection_reasons": [
                        {
                          "developer_reason": "Missing required ID details.",
                          "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                          "created_at": "2020-01-02T00:00:00.000Z"
                        },
                        {
                          "developer_reason": "Blurry face portrait.",
                          "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                          "created_at": "2020-01-02T00:00:00.000Z"
                        }
                      ],
                      "tos_status": "approved",
                      "customer_id": "cust_123"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/static_memos/history": {
      "parameters": [
        {
          "name": "tx_hash",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string"
          },
          "description": "The hash of the transaction"
        },
        {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer"
          },
          "description": "The numbers of items to return (default of 10, max of 100)"
        },
        {
          "in": "query",
          "name": "starting_after",
          "schema": {
            "type": "string"
          },
          "description": "This is an event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
        },
        {
          "in": "query",
          "name": "ending_before",
          "schema": {
            "type": "string"
          },
          "description": "This is an event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
        },
        {
          "name": "event_type",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string",
            "enum": [
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "refund",
              "microdeposit",
              "account_update",
              "deactivation",
              "activation"
            ]
          },
          "description": "Filter history by event type"
        }
      ],
      "get": {
        "summary": "Static Memo Activity Across All Customers",
        "tags": [
          "Static Memos"
        ],
        "description": "History of activity across all customers and Virtual Accounts",
        "responses": {
          "200": {
            "description": "List of Static Memo events",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Static Memo history",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of events returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of activity",
                            "enum": [
                              "funds_received",
                              "payment_submitted",
                              "payment_processed",
                              "in_review",
                              "refund",
                              "account_update"
                            ]
                          },
                          "customer_id": {
                            "description": "The id of the Bridge customer that this static memo event belongs to",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "static_memo_id": {
                            "description": "The id of the Static Memo that this event belongs to",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "amount": {
                            "type": "string",
                            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "currency": {
                            "type": "string",
                            "enum": [
                              "usdc",
                              "usdt",
                              "dai",
                              "usd"
                            ]
                          },
                          "developer_fee_amount": {
                            "type": "string",
                            "description": "Amount of the developer fee if any, represented as a dollar denominated string. This is the final amount taken out of what is ultimately received by your customer, not a percentage. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "exchange_fee_amount": {
                            "type": "string",
                            "description": "Amount of the exchange fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "subtotal_amount": {
                            "type": "string",
                            "description": "Amount of the subtotal, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "gas_fee": {
                            "type": "string",
                            "description": "Amount of the gas fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
                          },
                          "deposit_id": {
                            "type": "string",
                            "description": "The id of the deposit related to this event. This id can be used to link multiple events to the same transaction"
                          },
                          "destination_tx_hash": {
                            "type": "string",
                            "description": "The hash of the on-chain transfer to the destination address"
                          },
                          "source_deposit_instructions": {
                            "required": [
                              "deposit_message"
                            ],
                            "properties": {
                              "deposit_message": {
                                "description": "The message that the customer MUST include in their wire memo/message or ach push description",
                                "type": "string"
                              }
                            }
                          },
                          "source": {
                            "required": [
                              "payment_rail"
                            ],
                            "properties": {
                              "payment_rail": {
                                "type": "string",
                                "enum": [
                                  "ach",
                                  "wire",
                                  "ach_push",
                                  "arbitrum",
                                  "avalanche_c_chain",
                                  "base",
                                  "ethereum",
                                  "optimism",
                                  "polygon",
                                  "solana",
                                  "stellar"
                                ]
                              },
                              "bank_beneficiary_name": {
                                "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                                "type": "string"
                              },
                              "bank_routing_number": {
                                "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                                "type": "string"
                              },
                              "bank_name": {
                                "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                                "type": "string"
                              },
                              "imad": {
                                "description": "The IMAD of a wire transfer",
                                "type": "string",
                                "pattern": "[a-z0-9]*",
                                "minLength": 1,
                                "maxLength": 40
                              },
                              "omad": {
                                "description": "The OMAD of a wire transfer",
                                "type": "string",
                                "pattern": "[a-z0-9]*",
                                "minLength": 1,
                                "maxLength": 40
                              },
                              "description": {
                                "description": "(ACH only) The description of the deposit that the customer sent",
                                "type": "string"
                              }
                            }
                          },
                          "created_at": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Time of creation of the event",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "History": {
                    "summary": "A list of event history across all customers and Virtual Accounts",
                    "value": {
                      "count": 2,
                      "data": [
                        {
                          "value": {
                            "id": "sm_event_456",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "sm_123",
                            "type": "payment_submitted",
                            "amount": "120.0",
                            "currency": "usd",
                            "developer_fee_amount": "1.25",
                            "exchange_fee_amount": "2.2",
                            "subtotal_amount": "120.0",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "destination_tx_hash": "0xdeadbeef",
                            "source_deposit_instructions": {
                              "deposit_message": "BVI7depositmessage"
                            },
                            "source": {
                              "payment_rail": "ach_push",
                              "description": "ACH description, if available"
                            }
                          }
                        },
                        {
                          "value": {
                            "id": "sm_event_123",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "sm_123",
                            "type": "funds_received",
                            "amount": "123.45",
                            "currency": "usd",
                            "developer_fee_amount": "0.0",
                            "exchange_fee_amount": "0.0",
                            "subtotal_amount": "123.45",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "source_deposit_instructions": {
                              "deposit_message": "BVI7depositmessage"
                            },
                            "source": {
                              "payment_rail": "ach_push",
                              "description": "ACH description, if available"
                            }
                          }
                        },
                        {
                          "value": {
                            "id": "sm_event_457",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "sm_123",
                            "type": "payment_submitted",
                            "amount": "120.0",
                            "currency": "usd",
                            "developer_fee_amount": "1.25",
                            "exchange_fee_amount": "2.2",
                            "subtotal_amount": "120.0",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "destination_tx_hash": "0xdeadbeef",
                            "source_deposit_instructions": {
                              "deposit_message": "BVI7depositmessage"
                            },
                            "source": {
                              "payment_rail": "wire",
                              "bank_beneficiary_name": "Bank beneficiary",
                              "bank_routing_number": "1234567890",
                              "bank_name": "Bank name",
                              "imad": "IMAD of incoming wire, if available",
                              "omad": "OMAD of incoming wire, if available"
                            }
                          }
                        },
                        {
                          "value": {
                            "id": "sm_event_124",
                            "customer_id": "cust_alice",
                            "virtual_account_id": "sm_123",
                            "type": "funds_received",
                            "amount": "123.45",
                            "currency": "usd",
                            "developer_fee_amount": "0.0",
                            "exchange_fee_amount": "0.0",
                            "subtotal_amount": "123.45",
                            "gas_fee": "0.0",
                            "deposit_id": "deposit_123",
                            "created_at": "2020-01-01T00:00:00.000Z",
                            "source_deposit_instructions": {
                              "deposit_message": "BVI7depositmessage"
                            },
                            "source": {
                              "payment_rail": "wire",
                              "bank_beneficiary_name": "Bank beneficiary",
                              "bank_routing_number": "1234567890",
                              "bank_name": "Bank name",
                              "imad": "IMAD of incoming wire, if available",
                              "omad": "OMAD of incoming wire, if available"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "summary": "Get all webhook endpoints",
        "description": "Get the full list of active and disabled webhook endpoints configured on Bridge",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "List of webhook endpoints (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhooks",
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id",
                          "url",
                          "status",
                          "public_key"
                        ],
                        "properties": {
                          "id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "url": {
                            "type": "string",
                            "description": "The URL that the webhook will send events to"
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the webhook. Only active webhooks will receive events automatically.",
                            "enum": [
                              "active",
                              "disabled",
                              "deleted"
                            ]
                          },
                          "public_key": {
                            "type": "string",
                            "description": "The public key (in PEM format) that should be used to verify the authenticity of webhook events"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "WebhooksFound": {
                    "summary": "A non-empty list of webhook endpoints",
                    "value": {
                      "data": [
                        {
                          "summary": "A successful webhook endpoint object.",
                          "value": {
                            "id": "wep_123",
                            "url": "https://my_endpoint.xyz/hooks",
                            "status": "active",
                            "public_key": "-----BEGIN PUBLIC KEY-----\\nFAKEhFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
                          }
                        },
                        {
                          "summary": "A successful webhook endpoint object.",
                          "value": {
                            "id": "wep_456",
                            "url": "https://my_endpoint.xyz/hooks",
                            "status": "active",
                            "public_key": "-----BEGIN PUBLIC KEY-----\\nFAKEc27UdTQxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cxG4a5w0BAQEXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
                          }
                        }
                      ]
                    }
                  },
                  "NoWebhooksFound": {
                    "summary": "An empty list of webhook endpoints",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a webhook endpoint",
        "description": "Create a new webhook endpoint to receive events from Bridge. Webhook endpoints begin in a disabled state and can be enabled with a PUT request. A maximum of 5 webhooks can be active or disabled at one time.",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Information about the webhook endpoint to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "url",
                  "event_epoch"
                ],
                "properties": {
                  "url": {
                    "description": "The URL that the webhook will send events to. It must use the HTTPS scheme and have a valid X.509 certificate. The URL doesn't need to be live, but the host must be reachable.",
                    "type": "string",
                    "minLength": 1
                  },
                  "event_epoch": {
                    "description": "Specifies the starting point from which this webhook will receive events. This should usually be set to \"webhook_creation\", unless there is a reason why this webhook needs to process events from before its creation. When this value is set to \"webhook_creation\", the webhook will receive a small number of events preceding its creation for convenience.",
                    "type": "string",
                    "enum": [
                      "webhook_creation",
                      "beginning_of_time"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook endpoint created",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "url",
                    "status",
                    "public_key"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL that the webhook will send events to"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the webhook. Only active webhooks will receive events automatically.",
                      "enum": [
                        "active",
                        "disabled",
                        "deleted"
                      ]
                    },
                    "public_key": {
                      "type": "string",
                      "description": "The public key (in PEM format) that should be used to verify the authenticity of webhook events"
                    }
                  }
                },
                "examples": {
                  "SuccessfulWebhookCreateResponse": {
                    "summary": "Webhook created",
                    "value": {
                      "id": "wep_123",
                      "url": "https://my_endpoint.xyz/hooks",
                      "status": "disabled",
                      "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request containing missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "BadCustomerRequestErrorExample": {
                    "summary": "Bad customer request",
                    "value": {
                      "code": "bad_customer_request",
                      "message": "fields missing from customer body.",
                      "name": "first_name,ssn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookID}": {
      "parameters": [
        {
          "name": "webhookID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "put": {
        "summary": "Update a webhook",
        "description": "Update the specified webhook object",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "description": "Updated webhook endpoint object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "url": {
                    "description": "The new HTTPS URL that Bridge will send events to.",
                    "type": "string",
                    "minLength": 1
                  },
                  "status": {
                    "description": "The new status of the webhook endpoint.  If set to \"active\", the webhook will be enabled and will send requests to the new URL.  If set to \"disabled\", the webhook will be disabled and will not send requests to the URL.",
                    "type": "string",
                    "enum": [
                      "active",
                      "disabled"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful webhook object response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "url",
                    "status",
                    "public_key"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL that the webhook will send events to"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the webhook. Only active webhooks will receive events automatically.",
                      "enum": [
                        "active",
                        "disabled",
                        "deleted"
                      ]
                    },
                    "public_key": {
                      "type": "string",
                      "description": "The public key (in PEM format) that should be used to verify the authenticity of webhook events"
                    }
                  }
                },
                "examples": {
                  "SuccessfulWebhookResponse": {
                    "summary": "Successful webhook endpoint update",
                    "value": {
                      "id": "wep_123",
                      "url": "https://my_updated_endpoint.xyz/hooks",
                      "status": "active",
                      "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a webhook",
        "tags": [
          "Webhooks"
        ],
        "description": "Delete the specified webhook object. This webhook will no longer be accessible via API.",
        "responses": {
          "200": {
            "description": "Successfully deleted webhook response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id",
                    "url",
                    "status",
                    "public_key"
                  ],
                  "properties": {
                    "id": {
                      "description": "A UUID that uniquely identifies a resource",
                      "type": "string",
                      "pattern": "[a-z0-9]*",
                      "minLength": 1,
                      "maxLength": 42,
                      "readOnly": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL that the webhook will send events to"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the webhook. Only active webhooks will receive events automatically.",
                      "enum": [
                        "active",
                        "disabled",
                        "deleted"
                      ]
                    },
                    "public_key": {
                      "type": "string",
                      "description": "The public key (in PEM format) that should be used to verify the authenticity of webhook events"
                    }
                  }
                },
                "examples": {
                  "DeletedCustomerResponse": {
                    "summary": "Successful webhook endpoint delete",
                    "value": {
                      "id": "wep_123",
                      "url": "https://my_deleted_endpoint.xyz/hooks",
                      "status": "deleted",
                      "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No resource found",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "summary": "Invalid customer id",
                    "value": {
                      "code": "Invalid",
                      "message": "Unknown customer id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookID}/events": {
      "parameters": [
        {
          "name": "webhookID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "get": {
        "summary": "List upcoming events",
        "description": "List the next 10 events that will be delivered to the specified webhook.",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "List of events (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook Events",
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "api_version",
                          "event_id",
                          "event_category",
                          "event_type",
                          "event_object_id",
                          "event_object",
                          "event_object_changes",
                          "event_created_at"
                        ],
                        "properties": {
                          "api_version": {
                            "type": "string",
                            "readOnly": true
                          },
                          "event_id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "event_sequence": {
                            "type": "integer",
                            "readOnly": true
                          },
                          "event_category": {
                            "type": "string",
                            "enum": [
                              "customer",
                              "external_account",
                              "kyc_link",
                              "liquidation_address",
                              "liquidation_address.drain",
                              "static_memo",
                              "transfer",
                              "virtual_account",
                              "virtual_account.activity"
                            ]
                          },
                          "event_type": {
                            "type": "string",
                            "description": "The values here will be prefixed with the event_category. For example, a customer created event will be `customer.created`",
                            "enum": [
                              "created",
                              "updated",
                              "updated.status_transitioned",
                              "deleted",
                              "canceled"
                            ]
                          },
                          "event_object_id": {
                            "description": "A UUID that uniquely identifies a resource",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42,
                            "readOnly": true
                          },
                          "event_object_status": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "not_started",
                              "incomplete",
                              "active",
                              "rejected",
                              "under_review",
                              "manual_review",
                              "awaiting_ubo",
                              "approved",
                              "awaiting_funds",
                              "funds_received",
                              "payment_submitted",
                              "payment_processed",
                              "in_review",
                              "canceled",
                              "error",
                              "returned",
                              "refunded",
                              "undeliverable"
                            ]
                          },
                          "event_object": {
                            "type": "object",
                            "description": "The object that was affected by the event",
                            "readOnly": true
                          },
                          "event_object_changes": {
                            "type": "object",
                            "description": "The changes that were made to the object",
                            "readOnly": true
                          },
                          "event_created_at": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "WebhookEventsFound": {
                    "summary": "A non-empty list of webhook events",
                    "value": {
                      "data": [
                        {
                          "summary": "A list of events for the webhook endpoint",
                          "value": {
                            "data": {
                              "type": "array",
                              "minItems": 0,
                              "items": [
                                {
                                  "api_version": "v0",
                                  "event_id": "wh_tmneA3b1rTv1q4gkvmPU53n",
                                  "event_sequence": 1,
                                  "event_category": "transfer",
                                  "event_type": "transfer.deleted",
                                  "event_object_id": "cc598628-29ab-448e-851f-7aaffb1a1171",
                                  "event_object_status": null,
                                  "event_object": {
                                    "id": "cc598628-29ab-448e-851f-7aaffb1a1171",
                                    "state": "awaiting_funds",
                                    "amount": "50.0",
                                    "source": {
                                      "currency": "usdc",
                                      "from_address": "0xd48f4e51c2fcd1c8489eb1a64588b29b76ad0a3f",
                                      "payment_rail": "ethereum"
                                    },
                                    "receipt": {
                                      "gas_fee": "0.0",
                                      "exchange_fee": "0.0",
                                      "final_amount": "50.0",
                                      "developer_fee": "0.0",
                                      "initial_amount": "50.0",
                                      "subtotal_amount": "50.0",
                                      "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                                    },
                                    "currency": "usd",
                                    "created_at": "2024-05-02T17:48:19.366Z",
                                    "updated_at": "2024-05-02T17:48:19.366Z",
                                    "destination": {
                                      "currency": "usd",
                                      "payment_rail": "ach",
                                      "external_account_id": "24fd61e9-80b6-464a-b5ee-9f7a521cb1f0"
                                    },
                                    "on_behalf_of": "474c32b3-f3d6-43e3-92ce-a7d4e07fa0a4",
                                    "developer_fee": "0.0",
                                    "source_deposit_instructions": {
                                      "amount": "50.0",
                                      "currency": "usdc",
                                      "to_address": null,
                                      "from_address": "0xd48f4e51c2fcd1c8489eb1a64588b29b76ad0a3f",
                                      "payment_rail": "ethereum"
                                    }
                                  },
                                  "event_object_changes": {
                                    "state": [
                                      "pending",
                                      "canceled"
                                    ],
                                    "updated_at": [
                                      "2024-05-02T15:14:02.842Z",
                                      "2024-05-02T15:15:07.163Z"
                                    ]
                                  },
                                  "event_created_at": "2024-05-02T17:48:19.465Z"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "NoWebhooksFound": {
                    "summary": "An empty list of webhook events",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookID}/logs": {
      "parameters": [
        {
          "name": "webhookID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "get": {
        "summary": "View logs",
        "description": "Display the most recent logs for deliveries to the specified webhook.",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Recent delivery looks for the webhook (the returned list is empty if none found)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Delivery Logs",
                  "type": "object",
                  "required": [
                    "count",
                    "data"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of logs returned"
                    },
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "status",
                          "event_id",
                          "response_body",
                          "created_at"
                        ],
                        "properties": {
                          "status": {
                            "type": "integer",
                            "description": "The status code of the delivery"
                          },
                          "event_id": {
                            "description": "The id of the event for the delivery",
                            "type": "string",
                            "pattern": "[a-z0-9]*",
                            "minLength": 1,
                            "maxLength": 42
                          },
                          "response_body": {
                            "type": "string",
                            "description": "The response body of the delivery"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The time of the delivery"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "WebhookEventsFound": {
                    "summary": "A non-empty list of webhook events",
                    "value": {
                      "count": 1,
                      "data": [
                        {
                          "data": {
                            "type": "array",
                            "minItems": 0,
                            "items": [
                              {
                                "status": 200,
                                "event_id": "wh_event_id_123",
                                "response_body": "{\"message\":\"OK\"}",
                                "created_at": "2024-01-01T00:00:00.000Z"
                              },
                              {
                                "status": 200,
                                "event_id": "wh_event_id_456",
                                "response_body": "{\"message\":\"OK\"}",
                                "created_at": "2024-01-01T00:00:00.000Z"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "NoWebhookEventsFound": {
                    "summary": "An empty list of webhook events",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookID}/send": {
      "parameters": [
        {
          "name": "webhookID",
          "in": "path",
          "required": true,
          "schema": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      ],
      "post": {
        "summary": "Send event",
        "description": "Send an event to the specified webhook endpoint. This will not effect other events in the delivery queue. This operation is possible for both active and disabled webhook endpoints.",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "description": "Specify the event to send to your endpoint.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "event_id": {
                    "description": "The ID of the event that will be delivered to your endpoint",
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook Event Sent",
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message indicating the status of the request"
                    }
                  }
                },
                "examples": {
                  "WebhookEventSendSuccessResponse": {
                    "summary": "Successful webhook event send",
                    "value": {
                      "message": "Successfully sent the webhook event. This does not guarantee immediate delivery to the endpoint."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "MissingTokenError": {
                    "summary": "No Api-Key header",
                    "description": "The header may be missing or misspelled.",
                    "value": {
                      "code": "required",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Missing Api-Key header"
                    }
                  },
                  "InvalidTokenError": {
                    "summary": "Invalid key in Api-Key header",
                    "value": {
                      "code": "invalid",
                      "location": "header",
                      "name": "Api-Key",
                      "message": "Invalid Api-Key header"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. User may try and send the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "source": {
                      "title": "ErrorSource",
                      "required": [
                        "location",
                        "key"
                      ],
                      "properties": {
                        "location": {
                          "type": "string",
                          "enum": [
                            "path",
                            "query",
                            "body",
                            "header"
                          ]
                        },
                        "key": {
                          "type": "string",
                          "description": "Comma separated names of the properties or parameters causing the error"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnexpectedError": {
                    "summary": "An unexpected error",
                    "value": {
                      "errors": [
                        {
                          "code": "unexpected",
                          "message": "An expected error occurred, you may try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exchange_rates": {
      "get": {
        "summary": "Get current exchange rate between two currencies.",
        "description": "Returns the current exchange rate from the \"from\" currency to the \"to\" currency. This data is backed by Morningstar, whom provides industry-trusted data. The exchange rate is updated roughly every 30s. Note that as of this writing, Bridge does not offer a \"quote\" by which a user can lock in a rate for a given amount of time. This is provided only as a courtesy to estimate what you are likely to get in a subsequent transfer request that involves currency exchange.\nNote that as of 7/16/2024, only USD->EUR is supported.\n",
        "tags": [
          "Exchange Rates"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The currency code to convert from.",
            "example": "usd"
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The currency code to convert to.",
            "example": "eur"
          }
        ],
        "responses": {
          "200": {
            "description": "The exchange rate information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "midmarket_rate": {
                      "type": "string",
                      "example": "0.93425",
                      "description": "The midmarket exchange rate."
                    },
                    "buy_rate": {
                      "type": "string",
                      "example": "0.9389",
                      "description": "The rate for buying the target currency, including Bridge's fee."
                    },
                    "sell_rate": {
                      "type": "string",
                      "example": "0.9296",
                      "description": "The rate for selling the target currency, including Bridge's fee."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "examples": {
      "SuccessfulCustomerResponse": {
        "summary": "A successful customer object",
        "value": {
          "id": "cust_1",
          "first_name": "John",
          "last_name": "Doe",
          "email": "johndoe@johndoe.com",
          "status": "active",
          "type": "individual",
          "has_accepted_terms_of_service": true,
          "address": {
            "street_line_1": "123 Washington St",
            "street_line_2": "Apt 2F",
            "city": "New York",
            "postal_code": "10001",
            "state": "NY",
            "country": "USA"
          },
          "rejection_reasons": [],
          "requirements_due": [
            "external_account"
          ],
          "future_requirements_due": [
            "id_verification"
          ],
          "endorsements": [
            {
              "name": "base",
              "status": "approved"
            },
            {
              "name": "sepa",
              "status": "incomplete",
              "additional_requirements": [
                "kyc_with_proof_of_address",
                "tos_v2_acceptance"
              ]
            }
          ],
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulCustomerResponse2": {
        "summary": "A successful customer object",
        "value": {
          "id": "cust_2",
          "first_name": "Harper",
          "last_name": "Stern",
          "status": "active",
          "type": "individual",
          "email": "harperstern@harperstern.com",
          "has_accepted_terms_of_service": true,
          "address": {
            "street_line_1": "1 5th avenue",
            "city": "New York",
            "state": "NY",
            "postal_code": "10010",
            "country": "USA"
          },
          "rejection_reasons": [],
          "requirements_due": [
            "external_account"
          ],
          "future_requirements_due": [
            "id_verification"
          ],
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "RejectedCustomerResponse": {
        "summary": "A rejected customer object",
        "value": {
          "id": "cust_1",
          "first_name": "John",
          "last_name": "Doe",
          "email": "johndoe@johndoe.com",
          "status": "rejected",
          "type": "individual",
          "has_accepted_terms_of_service": true,
          "address": {
            "street_line_1": "123 Washington St",
            "street_line_2": "Apt 2F",
            "city": "New York",
            "postal_code": "10001",
            "state": "NY",
            "country": "USA"
          },
          "requirements_due": [
            "external_account"
          ],
          "rejection_reasons": [
            {
              "developer_reason": "Missing required ID details.",
              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
              "created_at": "2020-01-02T00:00:00.000Z"
            },
            {
              "developer_reason": "Blurry face portrait.",
              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
              "created_at": "2020-01-02T00:00:00.000Z"
            }
          ],
          "future_requirements_due": [
            "id_verification"
          ],
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulOfframpTransferResponse": {
        "summary": "A successful offramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "awaiting_funds",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "destination": {
            "payment_rail": "ach",
            "currency": "usd",
            "external_account_id": "ext_123"
          },
          "source_deposit_instructions": {
            "payment_rail": "ethereum",
            "amount": "75.0",
            "currency": "usdc",
            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fe": "0.0",
            "final_amount": "75.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulSepaOfframpTransferResponse": {
        "summary": "A successful SEPA offramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "awaiting_funds",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "destination": {
            "payment_rail": "sepa",
            "currency": "eur",
            "external_account_id": "ext_123",
            "sepa_reference": "SEPA reference"
          },
          "source_deposit_instructions": {
            "payment_rail": "ethereum",
            "amount": "75.0",
            "currency": "usdc",
            "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fe": "0.0",
            "final_amount": "68.27",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulOfframpTransferResponse2": {
        "summary": "A successful offramp transfer object",
        "value": {
          "id": "transfer_456",
          "client_reference_id": "client_transfer_id_456",
          "state": "funds_received",
          "on_behalf_of": "cust_123",
          "amount": "500.25",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "ach",
            "currency": "usd",
            "external_account_id": "ext_123"
          },
          "destination": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "to_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "receipt": {
            "initial_amount": "500.25",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "500.25",
            "gas_fee": "0.0",
            "final_amount": "500.25",
            "destination_tx_hash": "0xdeadbeef",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-02T00:00:00.000Z",
          "updated_at": "2020-01-03T00:00:00.000Z"
        }
      },
      "SuccessfulWireOnrampTransferResponse": {
        "summary": "A successful wire onramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "pending",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "wire",
            "currency": "usd",
            "external_account_id": null,
            "bank_beneficiary_name": "Sender name, if available",
            "bank_routing_number": "Sender routing, if available",
            "bank_name": "Sender bank, if available",
            "imad": "IMAD of incoming wire, if available",
            "omad": "OMAD of incoming wire, if available"
          },
          "destination": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "source_deposit_instructions": {
            "payment_rail": "wire",
            "amount": "75.0",
            "currency": "usd",
            "deposit_message": "BVI7depositmessage",
            "bank_name": "Bank name",
            "bank_address": "Bank address",
            "bank_routing_number": "123456789",
            "bank_account_number": "1234567890",
            "bank_beneficiary_name": "Bank beneficiary"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fee": "0.0",
            "final_amount": "75.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulAchOnrampTransferResponse": {
        "summary": "A successful ACH onramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "pending",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "ach_push",
            "currency": "usd",
            "external_account_id": null,
            "description": "ACH description, if available"
          },
          "destination": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "source_deposit_instructions": {
            "payment_rail": "ach_push",
            "amount": "75.0",
            "currency": "usd",
            "deposit_message": "BVI7depositmessage",
            "bank_name": "Bank name",
            "bank_address": "Bank address",
            "bank_routing_number": "123456789",
            "bank_account_number": "1234567890",
            "bank_beneficiary_name": "Bank beneficiary"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "subtotal_amount": "75.0",
            "gas_fee": "0.0",
            "final_amount": "75.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulSepaOnrampTransferResponse": {
        "summary": "A successful SEPA onramp transfer object",
        "value": {
          "id": "transfer_123",
          "client_reference_id": "client_transfer_id_123",
          "state": "pending",
          "on_behalf_of": "cust_123",
          "amount": "75.0",
          "developer_fee": "0.0",
          "source": {
            "payment_rail": "sepa",
            "currency": "eur",
            "external_account_id": null
          },
          "destination": {
            "payment_rail": "ethereum",
            "currency": "usdc",
            "external_account_id": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "source_deposit_instructions": {
            "payment_rail": "sepa",
            "amount": "75.0",
            "currency": "eur",
            "deposit_message": "BRG7depositmessage",
            "bank_name": "Bank name",
            "bank_address": "Bank address",
            "iban": "123456789",
            "bic": "1234567890",
            "account_holder_name": "Bank account holder name"
          },
          "receipt": {
            "initial_amount": "75.0",
            "developer_fee": "0.0",
            "exchange_fee": "0.0",
            "gas_fee": "0.0",
            "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulExternalAccountResponse": {
        "summary": "A successful External Account object",
        "value": {
          "id": "ea_123",
          "account_type": "us",
          "currency": "usd",
          "customer_id": "cust_123",
          "account_owner_name": "John Doe",
          "bank_name": "Wells Fargo",
          "last_4": "1111",
          "active": true,
          "beneficiary_address_valid": true,
          "account": {
            "last_4": "1111",
            "routing_number": "121000248"
          },
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulIbanExternalAccountResponse": {
        "summary": "A successful iban External Account object",
        "value": {
          "id": "ea_123",
          "customer_id": "cust_123",
          "account_type": "iban",
          "currency": "eur",
          "account_owner_name": "John Doe",
          "bank_name": "AAC CAPITAL PARTNERS LIMITED",
          "active": true,
          "iban": {
            "last_4": "5981",
            "bic": "BARBGB2LLEI",
            "country": "NLD"
          },
          "account_owner_type": "individual",
          "first_name": "John",
          "last_name": "Doe",
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulPrefundedAccountResponse": {
        "summary": "A successful Prefunded Account object",
        "value": {
          "id": "f15972de-4cdd-460c-9da3-34f7321bfa3f",
          "currency": "usd",
          "available_balance": "134.12",
          "name": "my_account",
          "created_at": "2020-01-01T00:00:00.000Z",
          "updated_at": "2020-01-02T00:00:00.000Z"
        }
      },
      "SuccessfulPrefundedAccountHistoryResponse": {
        "summary": "A successful Prefunded Account history",
        "value": {
          "count": 1,
          "data": [
            {
              "id": "abced012-4cdd-460c-9da3-34f7321bfa3f",
              "amount": "500.00",
              "available_balance": "1300.31",
              "currency": "usd",
              "name": "my_account",
              "type": "funding",
              "created_at": "2020-01-01T00:00:00.000Z"
            }
          ]
        }
      },
      "VirtualAccountPaymentSubmmittedEventFromAchPush": {
        "value": {
          "id": "va_event_456",
          "customer_id": "cust_alice",
          "virtual_account_id": "va_123",
          "type": "payment_submitted",
          "amount": "120.0",
          "currency": "usd",
          "developer_fee_amount": "1.25",
          "exchange_fee_amount": "2.2",
          "subtotal_amount": "120.0",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2024-01-01T00:00:00.000Z",
          "destination_tx_hash": "0xdeadbeef",
          "source": {
            "payment_rail": "ach_push",
            "description": "ACH description",
            "sender_name": "The name of the business or individual who initiated the ACH",
            "sender_bank_routing_number": "The routing number of the entity that initiated this ACH transaction",
            "trace_number": "The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions"
          }
        }
      },
      "VirtualAccountFundsReceivedEventFromAchPush": {
        "value": {
          "id": "va_event_123",
          "customer_id": "cust_alice",
          "virtual_account_id": "va_123",
          "type": "funds_received",
          "amount": "123.45",
          "currency": "usd",
          "developer_fee_amount": "0.0",
          "exchange_fee_amount": "0.0",
          "subtotal_amount": "123.45",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2024-01-01T00:00:00.000Z",
          "source": {
            "payment_rail": "ach_push",
            "description": "ACH description",
            "sender_name": "The name of the business or individual who initiated the ACH",
            "sender_bank_routing_number": "The routing number of the entity that initiated this ACH transaction",
            "trace_number": "The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions"
          }
        }
      },
      "StaticMemoPaymentSubmittedEventFromAchPush": {
        "value": {
          "id": "sm_event_456",
          "customer_id": "cust_alice",
          "virtual_account_id": "sm_123",
          "type": "payment_submitted",
          "amount": "120.0",
          "currency": "usd",
          "developer_fee_amount": "1.25",
          "exchange_fee_amount": "2.2",
          "subtotal_amount": "120.0",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2020-01-01T00:00:00.000Z",
          "destination_tx_hash": "0xdeadbeef",
          "source_deposit_instructions": {
            "deposit_message": "BVI7depositmessage"
          },
          "source": {
            "payment_rail": "ach_push",
            "description": "ACH description, if available"
          }
        }
      },
      "StaticMemoFundsReceivedEventFromAchPush": {
        "value": {
          "id": "sm_event_123",
          "customer_id": "cust_alice",
          "virtual_account_id": "sm_123",
          "type": "funds_received",
          "amount": "123.45",
          "currency": "usd",
          "developer_fee_amount": "0.0",
          "exchange_fee_amount": "0.0",
          "subtotal_amount": "123.45",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2020-01-01T00:00:00.000Z",
          "source_deposit_instructions": {
            "deposit_message": "BVI7depositmessage"
          },
          "source": {
            "payment_rail": "ach_push",
            "description": "ACH description, if available"
          }
        }
      },
      "StaticMemoPaymentSubmittedEventFromWire": {
        "value": {
          "id": "sm_event_457",
          "customer_id": "cust_alice",
          "virtual_account_id": "sm_123",
          "type": "payment_submitted",
          "amount": "120.0",
          "currency": "usd",
          "developer_fee_amount": "1.25",
          "exchange_fee_amount": "2.2",
          "subtotal_amount": "120.0",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2020-01-01T00:00:00.000Z",
          "destination_tx_hash": "0xdeadbeef",
          "source_deposit_instructions": {
            "deposit_message": "BVI7depositmessage"
          },
          "source": {
            "payment_rail": "wire",
            "bank_beneficiary_name": "Bank beneficiary",
            "bank_routing_number": "1234567890",
            "bank_name": "Bank name",
            "imad": "IMAD of incoming wire, if available",
            "omad": "OMAD of incoming wire, if available"
          }
        }
      },
      "StaticMemoFundsReceivedEventFromWire": {
        "value": {
          "id": "sm_event_124",
          "customer_id": "cust_alice",
          "virtual_account_id": "sm_123",
          "type": "funds_received",
          "amount": "123.45",
          "currency": "usd",
          "developer_fee_amount": "0.0",
          "exchange_fee_amount": "0.0",
          "subtotal_amount": "123.45",
          "gas_fee": "0.0",
          "deposit_id": "deposit_123",
          "created_at": "2020-01-01T00:00:00.000Z",
          "source_deposit_instructions": {
            "deposit_message": "BVI7depositmessage"
          },
          "source": {
            "payment_rail": "wire",
            "bank_beneficiary_name": "Bank beneficiary",
            "bank_routing_number": "1234567890",
            "bank_name": "Bank name",
            "imad": "IMAD of incoming wire, if available",
            "omad": "OMAD of incoming wire, if available"
          }
        }
      },
      "CryptoPayinResponse": {
        "summary": "A successful payin",
        "value": {
          "id": "payin_456",
          "customer_id": "cust_123",
          "payment_rail": "ethereum",
          "currency": "usdc",
          "amount": "100.88",
          "state": "completed",
          "transaction_hash": "0xc13d7905be5c989378a945487cd2a1193627ae606009e28e296d48ddaec66162",
          "to_address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c"
        }
      },
      "WirePayinResponse": {
        "summary": "A successful payin",
        "value": {
          "id": "payin_456",
          "customer_id": "cust_123",
          "payment_rail": "wire",
          "currency": "usd",
          "amount": "400.25",
          "state": "completed"
        }
      },
      "WirePayoutResponse": {
        "summary": "A successful payout",
        "value": {
          "id": "payout_789",
          "customer_id": "cust_123",
          "payment_rail": "wire",
          "currency": "usd",
          "amount": "9999.99",
          "external_account_id": "ea_123",
          "state": "completed"
        }
      },
      "PlaidLinkRequestSuccessResponse": {
        "summary": "Successful Plaid Link token creation",
        "value": {
          "link_token": "plaid_link_token_123",
          "link_token_expires_at": "2023-03-23T03:22:34.086Z",
          "callback_url": "https://api.bridge.xyz/v0/plaid_exchange_public_token/plaid_link_token_123"
        }
      },
      "SuccessfulKycLinkCreateResponse": {
        "summary": "Successful KYC link creation",
        "value": {
          "id": "kyc_link_123",
          "full_name": "John Doe",
          "email": "johndoe@johndoe.com",
          "type": "individual",
          "kyc_link": "www.kyclink.com/blah",
          "tos_link": "www.toslink.com/blah",
          "kyc_status": "not_started",
          "tos_status": "pending",
          "customer_id": "cust_123"
        }
      },
      "ApprovedKycLinkGetResponse": {
        "summary": "Approved KYC link",
        "value": {
          "id": "kyc_link_123",
          "full_name": "John Doe",
          "email": "johndoe@johndoe.com",
          "type": "individual",
          "kyc_link": "www.kyclink.com/blah",
          "tos_link": "www.toslink.com/blah",
          "kyc_status": "approved",
          "rejection_reasons": [],
          "tos_status": "approved",
          "customer_id": "cust_123"
        }
      },
      "RejectedKycLinkGetResponse": {
        "summary": "Rejected KYC link",
        "value": {
          "id": "kyc_link_123",
          "full_name": "John Doe",
          "email": "johndoe@johndoe.com",
          "type": "individual",
          "kyc_link": "www.kyclink.com/blah",
          "tos_link": "www.toslink.com/blah",
          "kyc_status": "rejected",
          "rejection_reasons": [
            {
              "developer_reason": "Missing required ID details.",
              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
              "created_at": "2020-01-02T00:00:00.000Z"
            },
            {
              "developer_reason": "Blurry face portrait.",
              "reason": "Cannot validate ID -- upload a clear photo of the full ID",
              "created_at": "2020-01-02T00:00:00.000Z"
            }
          ],
          "tos_status": "approved",
          "customer_id": "cust_123"
        }
      },
      "KycLinksGetResponse": {
        "summary": "A list of KYC links",
        "value": {
          "count": 2,
          "data": [
            {
              "id": "kyc_link_123",
              "full_name": "John Doe",
              "email": "johndoe@johndoe.com",
              "type": "individual",
              "kyc_link": "www.kyclink.com/blah",
              "tos_link": "www.toslink.com/blah",
              "kyc_status": "approved",
              "rejection_reasons": [],
              "tos_status": "approved",
              "customer_id": "cust_123"
            },
            {
              "id": "kyc_link_456",
              "full_name": "Jane Doe",
              "email": "janedoe@janedoe.com",
              "type": "individual",
              "kyc_link": "www.kyclink.com/blah",
              "tos_link": "www.toslink.com/blah",
              "kyc_status": "rejected",
              "rejection_reasons": [
                {
                  "developer_reason": "Missing required ID details.",
                  "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                  "created_at": "2020-01-02T00:00:00.000Z"
                },
                {
                  "developer_reason": "Blurry face portrait.",
                  "reason": "Cannot validate ID -- upload a clear photo of the full ID",
                  "created_at": "2020-01-02T00:00:00.000Z"
                }
              ],
              "tos_status": "approved",
              "customer_id": "cust_456"
            }
          ]
        }
      },
      "SuccessfulLiquidationAddressCreateResponse": {
        "summary": "A successful Liquidation Address creation response",
        "value": {
          "id": "la_123",
          "chain": "ethereum",
          "external_account_id": "ext_123",
          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
          "currency": "usdc",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulSepaLiquidationAddressCreateResponse": {
        "summary": "A creation response using SEPA as the destination rail",
        "value": {
          "id": "la_123",
          "chain": "ethereum",
          "external_account_id": "ext_123",
          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
          "currency": "usdc",
          "destination_sepa_reference": "SEPA reference",
          "destination_payment_rail": "sepa",
          "destination_currency": "eur",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulLiquidationAddressGetResponse": {
        "summary": "A successful get response for a Liquidation Address",
        "value": {
          "id": "la_123",
          "chain": "ethereum",
          "external_account_id": "ext_123",
          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
          "currency": "usdc",
          "destination_payment_rail": "wire",
          "destination_currency": "usd",
          "destination_wire_message": "a wire message",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulSepaLiquidationAddressGetResponse": {
        "summary": "A successful get response for a SEPA Liquidation Address",
        "value": {
          "id": "la_123",
          "chain": "ethereum",
          "external_account_id": "ext_123",
          "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
          "currency": "usdc",
          "destination_payment_rail": "sepa",
          "destination_currency": "eur",
          "destination_sepa_reference": "a SEPA reference",
          "created_at": "2023-11-22T21:31:30.515Z",
          "updated_at": "2023-11-22T21:31:30.515Z"
        }
      },
      "SuccessfulGetAllLiquidationAddressResponse": {
        "summary": "A successful get request for a list of Liquidation Addresses",
        "value": {
          "count": 1,
          "data": {
            "type": "array",
            "minItems": 0,
            "items": {
              "id": "la_123",
              "chain": "ethereum",
              "external_account_id": "ext_123",
              "address": "0x4d0280da2f2fDA5103914bCc5aad114743152A9c",
              "currency": "usdc",
              "created_at": "2023-11-22T21:31:30.515Z",
              "updated_at": "2023-11-22T21:31:30.515Z"
            }
          }
        }
      },
      "PlaidExchangePublicTokenSuccessResponse": {
        "summary": "Successful Plaid public token exchange",
        "value": {
          "message": "Successfully exchanged public token for access token"
        }
      },
      "SuccessfulLiquidationAddressDrainsToCryptoResponse": {
        "summary": "A successful get request for a Liquidation Address's drain to crypto",
        "value": {
          "count": 1,
          "data": [
            {
              "id": "la_123",
              "amount": "100.25",
              "customer_id": "cust_123",
              "liquidation_address_id": "la_456",
              "currency": "usdc",
              "state": "funds_received",
              "created_at": "2020-01-01T00:00:00.000Z",
              "updated_at": "2020-01-02T00:00:00.000Z",
              "deposit_tx_hash": "0xc13d7905be5c989378a945487cd2a1193627ae606009e28e296d48ddaec66162",
              "destination": {
                "payment_rail": "ethereum",
                "currency": "usdt",
                "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
              },
              "destination_tx_hash": "0xdeadbeef",
              "receipt": {
                "initial_amount": "100.25",
                "developer_fee": "0.2",
                "subtotal_amount": "100.05",
                "exchange_rate": "1.000000",
                "converted_amount": "100.05",
                "outgoing_amount": "100.05",
                "destination_currency": "usd",
                "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
              }
            }
          ]
        }
      },
      "SuccessfulLiquidationAddressDrainsToFiatResponse": {
        "summary": "A successful get request for a Liquidation Address's drain to fiat",
        "value": {
          "count": 1,
          "data": [
            {
              "id": "la_123",
              "amount": "100.25",
              "customer_id": "cust_123",
              "liquidation_address_id": "la_456",
              "currency": "usdc",
              "state": "funds_received",
              "created_at": "2020-01-01T00:00:00.000Z",
              "updated_at": "2020-01-02T00:00:00.000Z",
              "deposit_tx_hash": "0xc13d7905be5c989378a945487cd2a1193627ae606009e28e296d48ddaec66162",
              "destination": {
                "payment_rail": "wire",
                "currency": "usd",
                "external_account_id": "ext_acct_789",
                "wire_message": "a wire message",
                "imad": "123456"
              },
              "receipt": {
                "initial_amount": "100.25",
                "developer_fee": "0.2",
                "subtotal_amount": "100.05",
                "exchange_rate": "1.000000",
                "converted_amount": "100.05",
                "outgoing_amount": "100.05",
                "destination_currency": "usd",
                "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
              }
            }
          ]
        }
      },
      "SuccessfulLiquidationAddressBalanceResponse": {
        "summary": "A successful get request for a Liquidation Address's balance",
        "value": {
          "active_balance": "0",
          "pending_balance": "100.25"
        }
      },
      "SuccessfulDeveloperFeesShowResponse": {
        "summary": "A successful get request for configured fees.",
        "value": {
          "default_liquidation_address_fee_percent": "1.3"
        }
      },
      "SuccessfulDeveloperFeesUpdateResponse": {
        "summary": "A successful post request for updating fees."
      },
      "SuccessfulWebhookResponse": {
        "summary": "A successful webhook endpoint object.",
        "value": {
          "id": "wep_123",
          "url": "https://my_endpoint.xyz/hooks",
          "status": "active",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFAKEhFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
        }
      },
      "SuccessfulWebhookResponse2": {
        "summary": "A successful webhook endpoint object.",
        "value": {
          "id": "wep_456",
          "url": "https://my_endpoint.xyz/hooks",
          "status": "active",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFAKEc27UdTQxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cxG4a5w0BAQEXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
        }
      },
      "SuccessfulWebhookCreateResponse": {
        "summary": "Successful webhook endpoint creation",
        "value": {
          "id": "wep_123",
          "url": "https://my_endpoint.xyz/hooks",
          "status": "disabled",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
        }
      },
      "SuccessfulWebhookUpdateResponse": {
        "summary": "Successful webhook endpoint update",
        "value": {
          "id": "wep_123",
          "url": "https://my_updated_endpoint.xyz/hooks",
          "status": "active",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
        }
      },
      "SuccessfulWebhookDeleteResponse": {
        "summary": "Successful webhook endpoint delete",
        "value": {
          "id": "wep_123",
          "url": "https://my_deleted_endpoint.xyz/hooks",
          "status": "deleted",
          "public_key": "-----BEGIN PUBLIC KEY-----\\nFJJ3hFnaPLmxxG4a5w0BAQEFAAOCAQ8AMIIBCgKCAQEAtYhc6PV2LOs/nqDRHi0B\\nMKTsdMLHtg58a1NDxaYfw4IZJ3hpy1qIFUgt5X0HhCYZE0Y40MyLGIejPyitEjYw\\ni9/aE+9F/PN+btqN7OK6cVuF9s/R9cZCtNc27UdTQXrUO5T8GXNAMmRr0KFh8yPv\\nfIgpoZn5ZhnyRbZpDvrxHzLmcZJFAX8Ca+KZLzgGVybEqJtP6fKAT0zrrUS1z44s\\nRDOLiXl543cRAmBnUyrT6cXiNz/PNbm4zRK5Nx7LGxBFrCWQCao4Yi8hrwWsnHxg\\n0Tcy3UyZhAcgL6ydVJfLD5x58Ri4BN32WPBtgSSO6JxZZwCiX0d1BOgq7+eNgmzN\\nJQIDAQAB\\n-----END PUBLIC KEY-----\\n"
        }
      },
      "SuccessfulWebhookEventsResponse": {
        "summary": "A list of events for the webhook endpoint",
        "value": {
          "data": {
            "type": "array",
            "minItems": 0,
            "items": [
              {
                "api_version": "v0",
                "event_id": "wh_tmneA3b1rTv1q4gkvmPU53n",
                "event_sequence": 1,
                "event_category": "transfer",
                "event_type": "transfer.deleted",
                "event_object_id": "cc598628-29ab-448e-851f-7aaffb1a1171",
                "event_object_status": null,
                "event_object": {
                  "id": "cc598628-29ab-448e-851f-7aaffb1a1171",
                  "state": "awaiting_funds",
                  "amount": "50.0",
                  "source": {
                    "currency": "usdc",
                    "from_address": "0xd48f4e51c2fcd1c8489eb1a64588b29b76ad0a3f",
                    "payment_rail": "ethereum"
                  },
                  "receipt": {
                    "gas_fee": "0.0",
                    "exchange_fee": "0.0",
                    "final_amount": "50.0",
                    "developer_fee": "0.0",
                    "initial_amount": "50.0",
                    "subtotal_amount": "50.0",
                    "url": "https://dashboard.bridge.xyz/transaction/00000000-0000-0000-0000-000000000000/receipt/00000000-0000-0000-0000-000000000000"
                  },
                  "currency": "usd",
                  "created_at": "2024-05-02T17:48:19.366Z",
                  "updated_at": "2024-05-02T17:48:19.366Z",
                  "destination": {
                    "currency": "usd",
                    "payment_rail": "ach",
                    "external_account_id": "24fd61e9-80b6-464a-b5ee-9f7a521cb1f0"
                  },
                  "on_behalf_of": "474c32b3-f3d6-43e3-92ce-a7d4e07fa0a4",
                  "developer_fee": "0.0",
                  "source_deposit_instructions": {
                    "amount": "50.0",
                    "currency": "usdc",
                    "to_address": null,
                    "from_address": "0xd48f4e51c2fcd1c8489eb1a64588b29b76ad0a3f",
                    "payment_rail": "ethereum"
                  }
                },
                "event_object_changes": {
                  "state": [
                    "pending",
                    "canceled"
                  ],
                  "updated_at": [
                    "2024-05-02T15:14:02.842Z",
                    "2024-05-02T15:15:07.163Z"
                  ]
                },
                "event_created_at": "2024-05-02T17:48:19.465Z"
              }
            ]
          }
        }
      },
      "SuccessfulWebhookLogsResponse": {
        "summary": "A list of delivery logs for the webhook endpoint",
        "value": {
          "data": {
            "type": "array",
            "minItems": 0,
            "items": [
              {
                "status": 200,
                "event_id": "wh_event_id_123",
                "response_body": "{\"message\":\"OK\"}",
                "created_at": "2024-01-01T00:00:00.000Z"
              },
              {
                "status": 200,
                "event_id": "wh_event_id_456",
                "response_body": "{\"message\":\"OK\"}",
                "created_at": "2024-01-01T00:00:00.000Z"
              }
            ]
          }
        }
      },
      "WebhookEventSendSuccessResponse": {
        "summary": "Successful webhook event send",
        "value": {
          "message": "Successfully sent the webhook event. This does not guarantee immediate delivery to the endpoint."
        }
      }
    },
    "schemas": {
      "Id": {
        "description": "A UUID that uniquely identifies a resource",
        "type": "string",
        "pattern": "[a-z0-9]*",
        "minLength": 1,
        "maxLength": 42
      },
      "client_reference_id": {
        "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "Omad": {
        "description": "The OMAD of a wire transfer",
        "type": "string",
        "pattern": "[a-z0-9]*",
        "minLength": 1,
        "maxLength": 40
      },
      "Imad": {
        "description": "The IMAD of a wire transfer",
        "type": "string",
        "pattern": "[a-z0-9]*",
        "minLength": 1,
        "maxLength": 40
      },
      "TraceNumber": {
        "description": "The trace number of an ACH transfer",
        "type": "string",
        "pattern": "[0-9]",
        "minLength": 15,
        "maxLength": 15
      },
      "WireMessage": {
        "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "SepaReference": {
        "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
        "type": "string",
        "minLength": 6,
        "maxLength": 140
      },
      "SwiftReference": {
        "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "Customer": {
        "properties": {
          "id": {
            "readOnly": true,
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "status": {
            "type": "string",
            "description": "Status of the customer. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
            "enum": [
              "not_started",
              "pending",
              "incomplete",
              "awaiting_ubo",
              "manual_review",
              "under_review",
              "active",
              "rejected"
            ]
          },
          "capabilities": {
            "type": "object",
            "properties": {
              "payin_crypto": {
                "type": "string",
                "description": "State of the customer capability",
                "enum": [
                  "pending",
                  "active",
                  "inactive",
                  "rejected"
                ]
              },
              "payout_crypto": {
                "type": "string",
                "description": "State of the customer capability",
                "enum": [
                  "pending",
                  "active",
                  "inactive",
                  "rejected"
                ]
              },
              "payin_fiat": {
                "type": "string",
                "description": "State of the customer capability",
                "enum": [
                  "pending",
                  "active",
                  "inactive",
                  "rejected"
                ]
              },
              "payout_fiat": {
                "type": "string",
                "description": "State of the customer capability",
                "enum": [
                  "pending",
                  "active",
                  "inactive",
                  "rejected"
                ]
              }
            }
          },
          "future_requirements_due": {
            "readOnly": true,
            "description": "Information about requirements that may be needed in the future for the customer (eg. enhanced KYC checks for high volume transactions etc.). Please consult our KYC guide on how to resolve each requirement.",
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "enum": [
                "id_verification"
              ]
            }
          },
          "requirements_due": {
            "readOnly": true,
            "description": "KYC requirements still needed to be completed. Please consult our KYC guide on how to resolve each requirement.",
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "enum": [
                "external_account",
                "id_verification"
              ]
            }
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the customer",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of last update of the customer",
            "format": "date-time"
          },
          "rejection_reasons": {
            "readOnly": true,
            "description": "Reasons why a customer KYC was rejected",
            "type": "array",
            "minItems": 0,
            "items": {
              "description": "Reason why the kyc_status was rejected",
              "properties": {
                "developer_reason": {
                  "type": "string",
                  "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                },
                "reason": {
                  "type": "string",
                  "description": "Reason for why a customer was rejected. To be shared with the customer."
                },
                "created_at": {
                  "type": "string",
                  "description": "Time of creation of the rejection reason"
                }
              }
            }
          },
          "has_accepted_terms_of_service": {
            "readOnly": true,
            "description": "Whether the customer has accepted the terms of service.",
            "type": "boolean"
          },
          "endorsements": {
            "readOnly": true,
            "description": "A summary of whether the customer has received approvals to complete onboarding or use certain products/services offered by Bridge.",
            "type": "array",
            "minItems": 0,
            "items": {
              "required": [
                "name",
                "status"
              ],
              "properties": {
                "name": {
                  "description": "The endorsement type.",
                  "type": "string",
                  "enum": [
                    "base",
                    "sepa"
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "incomplete",
                    "approved",
                    "revoked"
                  ]
                },
                "additional_requirements": {
                  "description": "Additional requirements that need to be completed for obtaining the approval for the endorsement. \n\n1. `kyc_approval` and `tos_acceptance` are required for the `base` endorsement. \n2. `kyc_with_proof_of_address` and `tos_v2_acceptance` are required for `sepa`. If `tos_v2_acceptance` is not completed, a ToS acceptance link can be retrieved for the current customer from the endpoint `/v0/customers/{customerID}/tos_acceptance_link`. To fulfill the `kyc_with_proof_of_address` requirement, a KYC link can be specifically requested for the current customer via the endpoint `/v0/customers/{customerID}/kyc_link`, with `endorsement=sepa` included in the query string",
                  "type": "array",
                  "minItems": 0,
                  "items": {
                    "type": "string",
                    "enum": [
                      "kyc_approval",
                      "tos_acceptance",
                      "kyc_with_proof_of_address",
                      "tos_v2_acceptance"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Endorsement": {
        "required": [
          "name",
          "status"
        ],
        "properties": {
          "name": {
            "description": "The endorsement type.",
            "type": "string",
            "enum": [
              "base",
              "sepa"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "incomplete",
              "approved",
              "revoked"
            ]
          },
          "additional_requirements": {
            "description": "Additional requirements that need to be completed for obtaining the approval for the endorsement. \n\n1. `kyc_approval` and `tos_acceptance` are required for the `base` endorsement. \n2. `kyc_with_proof_of_address` and `tos_v2_acceptance` are required for `sepa`. If `tos_v2_acceptance` is not completed, a ToS acceptance link can be retrieved for the current customer from the endpoint `/v0/customers/{customerID}/tos_acceptance_link`. To fulfill the `kyc_with_proof_of_address` requirement, a KYC link can be specifically requested for the current customer via the endpoint `/v0/customers/{customerID}/kyc_link`, with `endorsement=sepa` included in the query string",
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "enum": [
                "kyc_approval",
                "tos_acceptance",
                "kyc_with_proof_of_address",
                "tos_v2_acceptance"
              ]
            }
          }
        }
      },
      "EndorsementRequirementEnum": {
        "type": "string",
        "enum": [
          "kyc_approval",
          "tos_acceptance",
          "kyc_with_proof_of_address",
          "tos_v2_acceptance"
        ]
      },
      "Address": {
        "required": [
          "street_line_1",
          "country",
          "city"
        ],
        "properties": {
          "street_line_1": {
            "type": "string",
            "minLength": 1
          },
          "street_line_2": {
            "type": "string",
            "minLength": 1
          },
          "city": {
            "type": "string",
            "minLength": 1
          },
          "state": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
            "minLength": 2,
            "maxLength": 2
          },
          "postal_code": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes.",
            "minLength": 1
          },
          "country": {
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          }
        }
      },
      "IbanBankAccount": {
        "required": [
          "account_number",
          "bic",
          "country",
          "last_4"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
            "minLength": 1,
            "writeOnly": true
          },
          "bic": {
            "type": "string",
            "description": "The Business Identifier Code (BIC) that will be used to send the funds",
            "minLength": 1
          },
          "country": {
            "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "last_4": {
            "description": "Last 4 digits of the bank account number",
            "minLength": 1,
            "type": "string",
            "readOnly": true
          }
        }
      },
      "UsBankAccount": {
        "required": [
          "account_number",
          "routing_number",
          "last_4"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The bank account number",
            "minLength": 1,
            "writeOnly": true
          },
          "routing_number": {
            "type": "string",
            "description": "The bank routing number",
            "minLength": 9,
            "maxLength": 9
          },
          "last_4": {
            "description": "Last 4 digits of the bank account number",
            "minLength": 1,
            "type": "string",
            "readOnly": true
          }
        }
      },
      "CreateIndividualCustomerPayload": {
        "allOf": [
          {
            "title": "Individual Customer",
            "required": [
              "type",
              "signed_agreement_id",
              "first_name",
              "last_name",
              "email",
              "address",
              "tax_identification_number",
              "birth_date"
            ],
            "properties": {
              "type": {
                "description": "Type of the customer (individual vs. business).",
                "type": "string",
                "minLength": 1,
                "enum": [
                  "individual"
                ]
              },
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "email": {
                "type": "string",
                "minLength": 1,
                "maxLength": 512
              },
              "phone": {
                "description": "Phone in format \"+12223334444\"",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "address": {
                "writeOnly": true,
                "required": [
                  "street_line_1",
                  "country",
                  "city"
                ],
                "properties": {
                  "street_line_1": {
                    "type": "string",
                    "minLength": 1
                  },
                  "street_line_2": {
                    "type": "string",
                    "minLength": 1
                  },
                  "city": {
                    "type": "string",
                    "minLength": 1
                  },
                  "state": {
                    "type": "string",
                    "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "postal_code": {
                    "type": "string",
                    "description": "Must be supplied for countries that use postal codes.",
                    "minLength": 1
                  },
                  "country": {
                    "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3
                  }
                }
              },
              "birth_date": {
                "writeOnly": true,
                "type": "string",
                "description": "Date of birth in format yyyy-mm-dd",
                "minLength": 10,
                "maxLength": 10
              },
              "tax_identification_number": {
                "description": "For individual US customers, SSN should be used. For non-US individual customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative.",
                "writeOnly": true,
                "type": "string"
              },
              "signed_agreement_id": {
                "writeOnly": true,
                "type": "string",
                "description": "ID of the signed agreement, fetched through the Bridge UI",
                "minLength": 1,
                "maxLength": 256
              },
              "gov_id_country": {
                "writeOnly": true,
                "type": "string",
                "description": "Three-letter alpha-3 country code of the provided government id as defined in the ISO 3166-1 spec.",
                "minLength": 3,
                "maxLength": 3
              },
              "gov_id_image_front": {
                "writeOnly": true,
                "type": "string",
                "description": "Base64 encoded image* of the front of the customer's government issued ID \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                "minLength": 1,
                "maxLength": 256
              },
              "gov_id_image_back": {
                "writeOnly": true,
                "type": "string",
                "description": "Base64 encoded image* of the back of the customer's government issued ID \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                "minLength": 1,
                "maxLength": 256
              },
              "proof_of_address_document": {
                "writeOnly": true,
                "type": "string",
                "description": "Base64 encoded image* of the *Proof-of-Address* document \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif.\nRequired for new customers from the European Economic Area (EEA), including associated principalities and territories. Please refer to [SEPA/Euro services](https://apidocs.bridge.xyz/docs/sepa-euro-transactions) for more details. Utility bills and bank statements are recommended for proof of address.",
                "minLength": 1,
                "maxLength": 256
              },
              "endorsements": {
                "writeOnly": true,
                "type": "array",
                "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`. N.B. If `sepa` is explicitly requested, `individual` customers will be prompted (and required) to provide proof of address in the hosted KYC flow.",
                "items": {
                  "enum": [
                    "base",
                    "sepa"
                  ]
                }
              }
            }
          },
          {
            "title": "Individual Customer",
            "properties": {
              "sof_eu_questionnaire": {
                "writeOnly": true,
                "type": "object",
                "required": [
                  "acting_as_intermediary",
                  "employment_status",
                  "expected_monthly_payments",
                  "most_recent_occupation",
                  "primary_purpose",
                  "source_of_funds"
                ],
                "properties": {
                  "acting_as_intermediary": {
                    "type": "string",
                    "description": "Is the customer acting as an intermediary for a third party?",
                    "enum": [
                      "yes",
                      "no"
                    ]
                  },
                  "employment_status": {
                    "type": "string",
                    "description": "What is the customer's current employment status?",
                    "enum": [
                      "employed",
                      "homemaker",
                      "retired",
                      "self_employed",
                      "student",
                      "unemployed"
                    ]
                  },
                  "expected_monthly_payments": {
                    "type": "string",
                    "description": "What is the expected monthly volume of payments the customer will be sending or receiving?",
                    "enum": [
                      "0_4999",
                      "5000_9999",
                      "10000_49999",
                      "50000_plus"
                    ]
                  },
                  "most_recent_occupation": {
                    "type": "string",
                    "description": "What is the customer's most recent occupation? Specify the relevant alphanumeric occupation code. See the [list of occupations](https://dash.readme.com/project/bridge-docs/v0/page/sof-eu-most-recent-occupation-list) for the complete list of valid occupations and codes."
                  },
                  "primary_purpose": {
                    "type": "string",
                    "description": "What is the primary purpose of the customer's account?",
                    "enum": [
                      "business_transactions",
                      "charitable_donations",
                      "investment_purposes",
                      "other",
                      "payments_to_friends_or_family_abroad",
                      "personal_or_living_expenses",
                      "protect_wealth",
                      "purchase_goods_and_services"
                    ]
                  },
                  "primary_purpose_other": {
                    "type": "string",
                    "description": "Required if the primary purpose is 'other'."
                  },
                  "source_of_funds": {
                    "type": "string",
                    "description": "What is the source of funds for the customer's account?",
                    "enum": [
                      "business_income",
                      "gambling_proceeds",
                      "gifts",
                      "government_benefits",
                      "inheritance",
                      "investments_loans",
                      "pension_retirement",
                      "salary",
                      "sale_of_assets_real_estate",
                      "savings",
                      "someone_elses_funds"
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateIndividualCustomerPayload": {
        "title": "Individual Customer",
        "required": [
          "type",
          "signed_agreement_id",
          "first_name",
          "last_name",
          "email",
          "address",
          "tax_identification_number",
          "birth_date"
        ],
        "properties": {
          "type": {
            "description": "Type of the customer (individual vs. business).",
            "type": "string",
            "minLength": 1,
            "enum": [
              "individual"
            ]
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "phone": {
            "description": "Phone in format \"+12223334444\"",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "address": {
            "writeOnly": true,
            "required": [
              "street_line_1",
              "country",
              "city"
            ],
            "properties": {
              "street_line_1": {
                "type": "string",
                "minLength": 1
              },
              "street_line_2": {
                "type": "string",
                "minLength": 1
              },
              "city": {
                "type": "string",
                "minLength": 1
              },
              "state": {
                "type": "string",
                "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                "minLength": 2,
                "maxLength": 2
              },
              "postal_code": {
                "type": "string",
                "description": "Must be supplied for countries that use postal codes.",
                "minLength": 1
              },
              "country": {
                "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              }
            }
          },
          "birth_date": {
            "writeOnly": true,
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd",
            "minLength": 10,
            "maxLength": 10
          },
          "tax_identification_number": {
            "description": "For individual US customers, SSN should be used. For non-US individual customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative.",
            "writeOnly": true,
            "type": "string"
          },
          "signed_agreement_id": {
            "writeOnly": true,
            "type": "string",
            "description": "ID of the signed agreement, fetched through the Bridge UI",
            "minLength": 1,
            "maxLength": 256
          },
          "gov_id_country": {
            "writeOnly": true,
            "type": "string",
            "description": "Three-letter alpha-3 country code of the provided government id as defined in the ISO 3166-1 spec.",
            "minLength": 3,
            "maxLength": 3
          },
          "gov_id_image_front": {
            "writeOnly": true,
            "type": "string",
            "description": "Base64 encoded image* of the front of the customer's government issued ID \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
            "minLength": 1,
            "maxLength": 256
          },
          "gov_id_image_back": {
            "writeOnly": true,
            "type": "string",
            "description": "Base64 encoded image* of the back of the customer's government issued ID \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
            "minLength": 1,
            "maxLength": 256
          },
          "proof_of_address_document": {
            "writeOnly": true,
            "type": "string",
            "description": "Base64 encoded image* of the *Proof-of-Address* document \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif.\nRequired for new customers from the European Economic Area (EEA), including associated principalities and territories. Please refer to [SEPA/Euro services](https://apidocs.bridge.xyz/docs/sepa-euro-transactions) for more details. Utility bills and bank statements are recommended for proof of address.",
            "minLength": 1,
            "maxLength": 256
          },
          "endorsements": {
            "writeOnly": true,
            "type": "array",
            "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`. N.B. If `sepa` is explicitly requested, `individual` customers will be prompted (and required) to provide proof of address in the hosted KYC flow.",
            "items": {
              "enum": [
                "base",
                "sepa"
              ]
            }
          }
        }
      },
      "CreateBusinessCustomerPayload": {
        "allOf": [
          {
            "title": "Business Customer (Beta)",
            "required": [
              "type",
              "name",
              "description",
              "email",
              "business_type",
              "source_of_funds",
              "website",
              "address",
              "tax_identification_number",
              "signed_agreement_id",
              "is_dao",
              "transmits_customer_funds",
              "compliance_screening_explanation",
              "ultimate_beneficial_owners",
              "formation_document",
              "ownership_document"
            ],
            "properties": {
              "type": {
                "description": "Type of the customer (individual vs. business)",
                "type": "string",
                "minLength": 1,
                "enum": [
                  "business"
                ]
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "description": {
                "type": "string",
                "minLength": 1,
                "maxLength": 512
              },
              "email": {
                "type": "string",
                "minLength": 1,
                "maxLength": 512
              },
              "source_of_funds": {
                "description": "The source of funds for the business, e.g. profits, income, venture capital, etc.",
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "business_type": {
                "description": "The type of business structure that most closely matches the business customer",
                "type": "string",
                "minLength": 1,
                "enum": [
                  "cooperative",
                  "corporation",
                  "llc",
                  "other",
                  "partnership",
                  "sole_prop",
                  "trust"
                ]
              },
              "website": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "address": {
                "writeOnly": true,
                "required": [
                  "street_line_1",
                  "country",
                  "city"
                ],
                "properties": {
                  "street_line_1": {
                    "type": "string",
                    "minLength": 1
                  },
                  "street_line_2": {
                    "type": "string",
                    "minLength": 1
                  },
                  "city": {
                    "type": "string",
                    "minLength": 1
                  },
                  "state": {
                    "type": "string",
                    "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "postal_code": {
                    "type": "string",
                    "description": "Must be supplied for countries that use postal codes.",
                    "minLength": 1
                  },
                  "country": {
                    "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3
                  }
                }
              },
              "tax_identification_number": {
                "description": "For business US customers, TIN should be used. For non-US business customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative.",
                "writeOnly": true,
                "type": "string"
              },
              "signed_agreement_id": {
                "writeOnly": true,
                "type": "string",
                "description": "Required ID of the signed agreement, fetched through the Bridge UI",
                "minLength": 1,
                "maxLength": 256
              },
              "statement_of_funds": {
                "writeOnly": true,
                "type": "string",
                "description": "Base64 encoded image* of the *Statement of Funds* document following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .",
                "minLength": 1,
                "maxLength": 512
              },
              "is_dao": {
                "type": "boolean",
                "description": "Whether the business is a DAO (Decentralized Autonomous Organization)"
              },
              "transmits_customer_funds": {
                "type": "boolean",
                "description": "True if the business transmits funds on behalf of its customers"
              },
              "compliance_screening_explanation": {
                "type": "string",
                "description": "Required if transmits_customer_funds is true. An explanation of types of compliance screening (KYC, KYB, or AML) the customer performs before transmitting funds on behalf of its customers.",
                "minLength": 1,
                "maxLength": 512
              },
              "ultimate_beneficial_owners": {
                "type": "array",
                "description": "List of ultimate beneficial owners",
                "items": {
                  "required": [
                    "first_name",
                    "last_name",
                    "birth_date",
                    "email",
                    "phone",
                    "tax_identification_number",
                    "address",
                    "gov_id_image_front"
                  ],
                  "properties": {
                    "first_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "middle_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "last_name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "birth_date": {
                      "type": "string",
                      "description": "Date of birth in format yyyy-mm-dd",
                      "minLength": 10,
                      "maxLength": 10
                    },
                    "email": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 512
                    },
                    "phone": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "tax_identification_number": {
                      "type": "string",
                      "description": "For US owners, SSN should be used. For non-US individual owners, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
                    },
                    "address": {
                      "required": [
                        "street_line_1",
                        "country",
                        "city"
                      ],
                      "properties": {
                        "street_line_1": {
                          "type": "string",
                          "minLength": 1
                        },
                        "street_line_2": {
                          "type": "string",
                          "minLength": 1
                        },
                        "city": {
                          "type": "string",
                          "minLength": 1
                        },
                        "state": {
                          "type": "string",
                          "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                          "minLength": 2,
                          "maxLength": 2
                        },
                        "postal_code": {
                          "type": "string",
                          "description": "Must be supplied for countries that use postal codes.",
                          "minLength": 1
                        },
                        "country": {
                          "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                          "type": "string",
                          "minLength": 3,
                          "maxLength": 3
                        }
                      }
                    },
                    "gov_id_country": {
                      "type": "string",
                      "description": "Three-letter alpha-3 country code of the submitted government id as defined in the ISO 3166-1 spec.",
                      "minLength": 3,
                      "maxLength": 3
                    },
                    "gov_id_image_front": {
                      "type": "string",
                      "description": "Base64 encoded image* of the front of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "gov_id_image_back": {
                      "type": "string",
                      "description": "Base64 encoded image* of the back of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                      "minLength": 1,
                      "maxLength": 256
                    },
                    "proof_of_address_document": {
                      "type": "string",
                      "description": "Base64 encoded image* of a proof of address document for the beneficial owner, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                      "minLength": 1,
                      "maxLength": 256
                    }
                  }
                }
              },
              "formation_document": {
                "writeOnly": true,
                "type": "string",
                "description": "Base64 encoded image* of the *Formation Document* following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                "minLength": 1,
                "maxLength": 512
              },
              "ownership_document": {
                "writeOnly": true,
                "type": "string",
                "description": "Base64 encoded image* of the *Ownership Document* following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                "minLength": 1,
                "maxLength": 512
              },
              "proof_of_address_document": {
                "writeOnly": true,
                "type": "string",
                "description": "Base64 encoded image* of the *Proof-of-Address* document \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif.\nRequired for new customers from the European Economic Area (EEA), including associated principalities and territories. Please refer to [SEPA/Euro services](https://apidocs.bridge.xyz/docs/sepa-euro-transactions) for more details. Utility bills and bank statements are recommended for proof of address.",
                "minLength": 1,
                "maxLength": 512
              },
              "endorsements": {
                "writeOnly": true,
                "type": "array",
                "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`.",
                "items": {
                  "enum": [
                    "base",
                    "sepa"
                  ]
                }
              }
            }
          },
          {
            "title": "Business Customer (Beta)",
            "properties": {
              "sof_eu_questionnaire": {
                "writeOnly": true,
                "type": "object",
                "title": "Business Customer Source of Funds (SOF) / Expected Usage (EU) Questionnaire",
                "required": [
                  "estimated_annual_revenue_usd",
                  "expected_monthly_payments_usd",
                  "operates_in_prohibited_countries",
                  "primary_purpose",
                  "high_risk_activities",
                  "source_of_funds",
                  "source_of_funds_description",
                  "transmits_customer_funds"
                ],
                "properties": {
                  "estimated_annual_revenue_usd": {
                    "type": "string",
                    "description": "Estimated annual revenue in USD",
                    "enum": [
                      99999,
                      100000999999,
                      10000009999999,
                      1000000049999999,
                      "50000000_24999999\"",
                      "250000000_plus"
                    ]
                  },
                  "expected_monthly_payments_usd": {
                    "type": "integer",
                    "description": "Expected monthly payments in USD"
                  },
                  "operates_in_prohibited_countries": {
                    "type": "string",
                    "description": "Does the business operate in any prohibited countries?",
                    "enum": [
                      "yes",
                      "no"
                    ]
                  },
                  "primary_purpose": {
                    "type": "string",
                    "description": "What is the primary purpose of the business account?",
                    "enum": [
                      "business_transactions",
                      "charitable_donations",
                      "investment_purposes",
                      "other",
                      "payments_to_friends_or_family_abroad",
                      "payroll",
                      "personal_or_living_expenses",
                      "protect_wealth",
                      "purchase_goods_and_services",
                      "receive_payment_for_goods_and_services",
                      "tax_optimization"
                    ]
                  },
                  "primary_purpose_other": {
                    "type": "string",
                    "description": "Required if the primary purpose is 'other'."
                  },
                  "high_risk_activities": {
                    "type": "array",
                    "description": "List of high-risk activities the business is involved in.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "none_of_the_above",
                        "adult_entertainment",
                        "gambling",
                        "hold_client_funds",
                        "investment_services",
                        "lending_banking",
                        "marijuana_or_related_services",
                        "money_services",
                        "operate_foreign_exchange_virtual_currencies_brokerage_otc",
                        "safe_deposit_box_rentals",
                        "third_party_payment_processing",
                        "weapons_firearms_and_explosives"
                      ]
                    }
                  },
                  "source_of_funds": {
                    "type": "string",
                    "description": "What is the source of funds for the business account?",
                    "enum": [
                      "business_loans",
                      "business_revenue",
                      "equity_funding",
                      "grants",
                      "investment_proceeds",
                      "legal_settlement_tax_refund",
                      "pension_retirement",
                      "sale_of_assets",
                      "third_party_funds"
                    ]
                  },
                  "source_of_funds_description": {
                    "type": "string",
                    "description": "Description of the source of funds for the business' account."
                  },
                  "transmits_customer_funds": {
                    "type": "string",
                    "description": "Does the business transmit funds on behalf of its customers?",
                    "enum": [
                      "yes",
                      "no"
                    ]
                  },
                  "transmits_customer_funds_description": {
                    "type": "string",
                    "description": "If the business transmits funds on behalf of its customers, please elaborate here."
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateBusinessCustomerPayload": {
        "title": "Business Customer (Beta)",
        "required": [
          "type",
          "name",
          "description",
          "email",
          "business_type",
          "source_of_funds",
          "website",
          "address",
          "tax_identification_number",
          "signed_agreement_id",
          "is_dao",
          "transmits_customer_funds",
          "compliance_screening_explanation",
          "ultimate_beneficial_owners",
          "formation_document",
          "ownership_document"
        ],
        "properties": {
          "type": {
            "description": "Type of the customer (individual vs. business)",
            "type": "string",
            "minLength": 1,
            "enum": [
              "business"
            ]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "source_of_funds": {
            "description": "The source of funds for the business, e.g. profits, income, venture capital, etc.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "business_type": {
            "description": "The type of business structure that most closely matches the business customer",
            "type": "string",
            "minLength": 1,
            "enum": [
              "cooperative",
              "corporation",
              "llc",
              "other",
              "partnership",
              "sole_prop",
              "trust"
            ]
          },
          "website": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "address": {
            "writeOnly": true,
            "required": [
              "street_line_1",
              "country",
              "city"
            ],
            "properties": {
              "street_line_1": {
                "type": "string",
                "minLength": 1
              },
              "street_line_2": {
                "type": "string",
                "minLength": 1
              },
              "city": {
                "type": "string",
                "minLength": 1
              },
              "state": {
                "type": "string",
                "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                "minLength": 2,
                "maxLength": 2
              },
              "postal_code": {
                "type": "string",
                "description": "Must be supplied for countries that use postal codes.",
                "minLength": 1
              },
              "country": {
                "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              }
            }
          },
          "tax_identification_number": {
            "description": "For business US customers, TIN should be used. For non-US business customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative.",
            "writeOnly": true,
            "type": "string"
          },
          "signed_agreement_id": {
            "writeOnly": true,
            "type": "string",
            "description": "Required ID of the signed agreement, fetched through the Bridge UI",
            "minLength": 1,
            "maxLength": 256
          },
          "statement_of_funds": {
            "writeOnly": true,
            "type": "string",
            "description": "Base64 encoded image* of the *Statement of Funds* document following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .",
            "minLength": 1,
            "maxLength": 512
          },
          "is_dao": {
            "type": "boolean",
            "description": "Whether the business is a DAO (Decentralized Autonomous Organization)"
          },
          "transmits_customer_funds": {
            "type": "boolean",
            "description": "True if the business transmits funds on behalf of its customers"
          },
          "compliance_screening_explanation": {
            "type": "string",
            "description": "Required if transmits_customer_funds is true. An explanation of types of compliance screening (KYC, KYB, or AML) the customer performs before transmitting funds on behalf of its customers.",
            "minLength": 1,
            "maxLength": 512
          },
          "ultimate_beneficial_owners": {
            "type": "array",
            "description": "List of ultimate beneficial owners",
            "items": {
              "required": [
                "first_name",
                "last_name",
                "birth_date",
                "email",
                "phone",
                "tax_identification_number",
                "address",
                "gov_id_image_front"
              ],
              "properties": {
                "first_name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "middle_name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "last_name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "birth_date": {
                  "type": "string",
                  "description": "Date of birth in format yyyy-mm-dd",
                  "minLength": 10,
                  "maxLength": 10
                },
                "email": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "phone": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "tax_identification_number": {
                  "type": "string",
                  "description": "For US owners, SSN should be used. For non-US individual owners, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
                },
                "address": {
                  "required": [
                    "street_line_1",
                    "country",
                    "city"
                  ],
                  "properties": {
                    "street_line_1": {
                      "type": "string",
                      "minLength": 1
                    },
                    "street_line_2": {
                      "type": "string",
                      "minLength": 1
                    },
                    "city": {
                      "type": "string",
                      "minLength": 1
                    },
                    "state": {
                      "type": "string",
                      "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                      "minLength": 2,
                      "maxLength": 2
                    },
                    "postal_code": {
                      "type": "string",
                      "description": "Must be supplied for countries that use postal codes.",
                      "minLength": 1
                    },
                    "country": {
                      "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 3
                    }
                  }
                },
                "gov_id_country": {
                  "type": "string",
                  "description": "Three-letter alpha-3 country code of the submitted government id as defined in the ISO 3166-1 spec.",
                  "minLength": 3,
                  "maxLength": 3
                },
                "gov_id_image_front": {
                  "type": "string",
                  "description": "Base64 encoded image* of the front of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                  "minLength": 1,
                  "maxLength": 256
                },
                "gov_id_image_back": {
                  "type": "string",
                  "description": "Base64 encoded image* of the back of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                  "minLength": 1,
                  "maxLength": 256
                },
                "proof_of_address_document": {
                  "type": "string",
                  "description": "Base64 encoded image* of a proof of address document for the beneficial owner, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
                  "minLength": 1,
                  "maxLength": 256
                }
              }
            }
          },
          "formation_document": {
            "writeOnly": true,
            "type": "string",
            "description": "Base64 encoded image* of the *Formation Document* following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
            "minLength": 1,
            "maxLength": 512
          },
          "ownership_document": {
            "writeOnly": true,
            "type": "string",
            "description": "Base64 encoded image* of the *Ownership Document* following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
            "minLength": 1,
            "maxLength": 512
          },
          "proof_of_address_document": {
            "writeOnly": true,
            "type": "string",
            "description": "Base64 encoded image* of the *Proof-of-Address* document \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif.\nRequired for new customers from the European Economic Area (EEA), including associated principalities and territories. Please refer to [SEPA/Euro services](https://apidocs.bridge.xyz/docs/sepa-euro-transactions) for more details. Utility bills and bank statements are recommended for proof of address.",
            "minLength": 1,
            "maxLength": 512
          },
          "endorsements": {
            "writeOnly": true,
            "type": "array",
            "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`.",
            "items": {
              "enum": [
                "base",
                "sepa"
              ]
            }
          }
        }
      },
      "BeneficialOwner": {
        "required": [
          "first_name",
          "last_name",
          "birth_date",
          "email",
          "phone",
          "tax_identification_number",
          "address",
          "gov_id_image_front"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "middle_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "birth_date": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd",
            "minLength": 10,
            "maxLength": 10
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "phone": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "tax_identification_number": {
            "type": "string",
            "description": "For US owners, SSN should be used. For non-US individual owners, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
          },
          "address": {
            "required": [
              "street_line_1",
              "country",
              "city"
            ],
            "properties": {
              "street_line_1": {
                "type": "string",
                "minLength": 1
              },
              "street_line_2": {
                "type": "string",
                "minLength": 1
              },
              "city": {
                "type": "string",
                "minLength": 1
              },
              "state": {
                "type": "string",
                "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                "minLength": 2,
                "maxLength": 2
              },
              "postal_code": {
                "type": "string",
                "description": "Must be supplied for countries that use postal codes.",
                "minLength": 1
              },
              "country": {
                "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              }
            }
          },
          "gov_id_country": {
            "type": "string",
            "description": "Three-letter alpha-3 country code of the submitted government id as defined in the ISO 3166-1 spec.",
            "minLength": 3,
            "maxLength": 3
          },
          "gov_id_image_front": {
            "type": "string",
            "description": "Base64 encoded image* of the front of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
            "minLength": 1,
            "maxLength": 256
          },
          "gov_id_image_back": {
            "type": "string",
            "description": "Base64 encoded image* of the back of the beneficial owner's government ID, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
            "minLength": 1,
            "maxLength": 256
          },
          "proof_of_address_document": {
            "type": "string",
            "description": "Base64 encoded image* of a proof of address document for the beneficial owner, following the data-uri scheme i.e. data:image/[type];base64,[base_64_encoded_file_contents] \n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif",
            "minLength": 1,
            "maxLength": 256
          }
        }
      },
      "Payin": {
        "required": [
          "customer_id",
          "payment_rail",
          "currency",
          "amount",
          "state"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "customer_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd"
            ]
          },
          "amount": {
            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc.",
            "type": "string"
          },
          "state": {
            "description": "current state of the payin (more info to come!)",
            "type": "string",
            "readOnly": true
          },
          "transaction_hash": {
            "description": "The hash of the depositing transaction, for crypto payins",
            "type": "string",
            "readOnly": true
          },
          "to_address": {
            "description": "The destination address of the transaction, for crypto payins",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "FakePayin": {
        "required": [
          "customer_id",
          "payment_rail",
          "currency",
          "amount",
          "state"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "customer_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd"
            ]
          },
          "amount": {
            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string"
          },
          "state": {
            "description": "current state of the payin (more info to come!)",
            "type": "string",
            "readOnly": true
          },
          "transaction_hash": {
            "description": "The hash of the depositing transaction, for crypto payins only",
            "type": "string"
          },
          "to_address": {
            "description": "The destination address of the transaction, for crypto payins only",
            "type": "string"
          }
        }
      },
      "Payout": {
        "required": [
          "customer_id",
          "payment_rail",
          "currency",
          "amount",
          "external_account_id",
          "state"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "customer_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd"
            ]
          },
          "amount": {
            "description": "Amount of the payout, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string"
          },
          "external_account_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "state": {
            "description": "current state of the payout (more info to come!)",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TransferRequest": {
        "required": [
          "amount",
          "on_behalf_of",
          "source",
          "destination"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "client_reference_id": {
            "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "amount": {
            "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "on_behalf_of": {
            "description": "The id of the Bridge customer that you are moving funds on behalf of.",
            "type": "string"
          },
          "developer_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "source": {
            "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
            "allOf": [
              {
                "required": [
                  "currency",
                  "payment_rail"
                ],
                "properties": {
                  "currency": {
                    "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` is supported as the destination currency",
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd",
                      "eur"
                    ]
                  },
                  "payment_rail": {
                    "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` is supported as the destination currency;\n\nWhen `swift` is specified as the source rail:\n  1. the source currency must be `usd`;\n  2. only `usdc` is supported as the destination currency",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "sepa",
                      "solana",
                      "stellar",
                      "swift"
                    ]
                  },
                  "external_account_id": {
                    "description": "A UUID that uniquely identifies a resource",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 42
                  },
                  "omad": {
                    "readOnly": true,
                    "description": "The OMAD of a wire transfer",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 40
                  },
                  "imad": {
                    "readOnly": true,
                    "description": "The IMAD of a wire transfer",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 40
                  },
                  "bank_beneficiary_name": {
                    "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                    "type": "string",
                    "readOnly": true
                  },
                  "bank_routing_number": {
                    "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                    "type": "string",
                    "readOnly": true
                  },
                  "bank_name": {
                    "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                    "type": "string",
                    "readOnly": true
                  },
                  "description": {
                    "description": "(ACH only) The description of the deposit that the customer sent",
                    "type": "string",
                    "readOnly": true
                  }
                }
              },
              {
                "properties": {
                  "from_address": {
                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "destination": {
            "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
            "allOf": [
              {
                "required": [
                  "currency",
                  "payment_rail"
                ],
                "properties": {
                  "currency": {
                    "description": "When `eur` is specified as the destination currency:\n  1. the destination rail must be `sepa`;\n  2. only `usdc` is supported as the source currency",
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd",
                      "eur"
                    ]
                  },
                  "payment_rail": {
                    "description": "When `sepa` is specified as the destination rail:\n  1. the destination currency must be `eur`;\n  2. only `usdc` is supported as the source currency;\n\n When `swift` is specified as the destination rail:\n  1. the destination currency must be `usd`;\n  2. only `usdc` is supported as the source currency",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "sepa",
                      "solana",
                      "stellar",
                      "swift"
                    ]
                  },
                  "external_account_id": {
                    "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 42
                  },
                  "omad": {
                    "readOnly": true,
                    "description": "The OMAD of a wire transfer",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 40
                  },
                  "imad": {
                    "readOnly": true,
                    "description": "The IMAD of a wire transfer",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 40
                  },
                  "trace_number": {
                    "readOnly": true,
                    "description": "The trace number of an ACH transfer",
                    "type": "string",
                    "pattern": "[0-9]",
                    "minLength": 15,
                    "maxLength": 15
                  },
                  "wire_message": {
                    "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "sepa_reference": {
                    "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 140
                  },
                  "swift_reference": {
                    "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  }
                }
              },
              {
                "properties": {
                  "to_address": {
                    "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                    "type": "string"
                  },
                  "wire_message": {
                    "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire.  This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "TransferResponse": {
        "required": [
          "id",
          "amount",
          "developer_fee",
          "currency",
          "on_behalf_of",
          "source",
          "destination",
          "state",
          "receipt",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "client_reference_id": {
            "description": "A client-provided reference ID that uniquely identifies a resource in the client's system",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "amount": {
            "description": "Amount of the transfer, expressed as a decimal string.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "currency": {
            "description": "Fiat currency for the transfer amount and developer fee. It's the source currency if that is a fiat currency or the fiat currency to which the source currency is pegged.",
            "type": "string",
            "enum": [
              "usd",
              "eur"
            ]
          },
          "on_behalf_of": {
            "description": "The id of the Bridge customer that you are moving funds on behalf of.",
            "type": "string"
          },
          "developer_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account. This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.",
            "type": "string"
          },
          "source": {
            "description": "The source of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
            "allOf": [
              {
                "required": [
                  "currency",
                  "payment_rail"
                ],
                "properties": {
                  "currency": {
                    "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` is supported as the destination currency",
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd",
                      "eur"
                    ]
                  },
                  "payment_rail": {
                    "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` is supported as the destination currency;\n\nWhen `swift` is specified as the source rail:\n  1. the source currency must be `usd`;\n  2. only `usdc` is supported as the destination currency",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "sepa",
                      "solana",
                      "stellar",
                      "swift"
                    ]
                  },
                  "external_account_id": {
                    "description": "A UUID that uniquely identifies a resource",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 42
                  },
                  "omad": {
                    "readOnly": true,
                    "description": "The OMAD of a wire transfer",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 40
                  },
                  "imad": {
                    "readOnly": true,
                    "description": "The IMAD of a wire transfer",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 40
                  },
                  "bank_beneficiary_name": {
                    "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                    "type": "string",
                    "readOnly": true
                  },
                  "bank_routing_number": {
                    "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                    "type": "string",
                    "readOnly": true
                  },
                  "bank_name": {
                    "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                    "type": "string",
                    "readOnly": true
                  },
                  "description": {
                    "description": "(ACH only) The description of the deposit that the customer sent",
                    "type": "string",
                    "readOnly": true
                  }
                }
              },
              {
                "properties": {
                  "currency": {
                    "description": "The source currency",
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd",
                      "eur"
                    ]
                  },
                  "payment_rail": {
                    "description": "The source payment rail",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "sepa",
                      "solana",
                      "stellar",
                      "swift"
                    ]
                  },
                  "from_address": {
                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "destination": {
            "description": "The destination of the transfer, which could be an external bank account, a bridge account, or a crypto wallet address",
            "allOf": [
              {
                "required": [
                  "currency",
                  "payment_rail"
                ],
                "properties": {
                  "currency": {
                    "description": "When `eur` is specified as the destination currency:\n  1. the destination rail must be `sepa`;\n  2. only `usdc` is supported as the source currency",
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd",
                      "eur"
                    ]
                  },
                  "payment_rail": {
                    "description": "When `sepa` is specified as the destination rail:\n  1. the destination currency must be `eur`;\n  2. only `usdc` is supported as the source currency;\n\n When `swift` is specified as the destination rail:\n  1. the destination currency must be `usd`;\n  2. only `usdc` is supported as the source currency",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "sepa",
                      "solana",
                      "stellar",
                      "swift"
                    ]
                  },
                  "external_account_id": {
                    "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 42
                  },
                  "omad": {
                    "readOnly": true,
                    "description": "The OMAD of a wire transfer",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 40
                  },
                  "imad": {
                    "readOnly": true,
                    "description": "The IMAD of a wire transfer",
                    "type": "string",
                    "pattern": "[a-z0-9]*",
                    "minLength": 1,
                    "maxLength": 40
                  },
                  "trace_number": {
                    "readOnly": true,
                    "description": "The trace number of an ACH transfer",
                    "type": "string",
                    "pattern": "[0-9]",
                    "minLength": 15,
                    "maxLength": 15
                  },
                  "wire_message": {
                    "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "sepa_reference": {
                    "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 140
                  },
                  "swift_reference": {
                    "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  }
                }
              },
              {
                "properties": {
                  "currency": {
                    "description": "The destination currency",
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd",
                      "eur"
                    ]
                  },
                  "payment_rail": {
                    "description": "The destination payment rail",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "sepa",
                      "solana",
                      "stellar",
                      "swift"
                    ]
                  },
                  "to_address": {
                    "description": "The crypto wallet address that the customer wishes to ultimately receive funds at, in order to complete this transfer",
                    "type": "string"
                  },
                  "wire_message": {
                    "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire.  This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard.",
                    "type": "string"
                  },
                  "blockchain_memo": {
                    "description": "A message to be sent with a crypto transaction, only allowed when the payment rail is Stellar.",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "state": {
            "description": "Status of the transfer. See [Transfer States](https://apidocs.bridge.xyz/docs/transfers-1#transfer-states) for more details.",
            "readOnly": true,
            "type": "string",
            "enum": [
              "awaiting_funds",
              "in_review",
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "canceled",
              "error",
              "returned",
              "refunded"
            ]
          },
          "source_deposit_instructions": {
            "readOnly": true,
            "description": "Some transfers require a deposit to be made by the customer before Bridge can start the process.  Instructions for how to kick off the transfer will be included here.  The deposit must match these instructions exactly, or the transfer will fail.",
            "allOf": [
              {
                "readOnly": true,
                "required": [
                  "payment_rail",
                  "amount",
                  "currency"
                ],
                "properties": {
                  "payment_rail": {
                    "description": "The payment rail that Bridge is expecting funds to arrive on.  For a crypto based source on the transfer, this is the chain, i.e. ethereum or polygon",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "solana",
                      "stellar"
                    ]
                  },
                  "amount": {
                    "description": "Amount of the deposit, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                    "type": "string"
                  },
                  "currency": {
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd"
                    ]
                  },
                  "from_address": {
                    "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
                    "type": "string"
                  },
                  "to_address": {
                    "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
                    "type": "string"
                  },
                  "deposit_message": {
                    "description": "The message that the customer MUST include in their wire memo/message or ach push description",
                    "type": "string"
                  },
                  "bank_name": {
                    "description": "The name of the bank that the customer should send the deposit to",
                    "type": "string"
                  },
                  "bank_address": {
                    "description": "The address of the bank that the customer should send the deposit to",
                    "type": "string"
                  },
                  "bank_routing_number": {
                    "description": "The routing number of the bank that the customer should send the deposit to",
                    "type": "string"
                  },
                  "bank_account_number": {
                    "description": "The account number of the bank that the customer should send the deposit to",
                    "type": "string"
                  },
                  "bank_beneficiary_name": {
                    "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                    "type": "string"
                  }
                }
              },
              {
                "properties": {
                  "currency": {
                    "description": "The source currency",
                    "type": "string",
                    "enum": [
                      "usdc",
                      "usdt",
                      "dai",
                      "usd",
                      "eur"
                    ]
                  },
                  "payment_rail": {
                    "description": "The source payment rail",
                    "type": "string",
                    "enum": [
                      "ach",
                      "wire",
                      "ach_push",
                      "arbitrum",
                      "avalanche_c_chain",
                      "base",
                      "ethereum",
                      "optimism",
                      "polygon",
                      "sepa",
                      "solana",
                      "stellar",
                      "swift"
                    ]
                  },
                  "amount": {
                    "description": "Amount of the deposit, expressed as a decimal string. It's denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
                    "type": "string"
                  },
                  "deposit_message": {
                    "description": "The message that the customer MUST include in their `wire memo/message`, `ach push description`, `sepa reference`, or `swift reference/remittance information`.",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "receipt": {
            "description": "Receipt information of a transfer",
            "required": [
              "initial_amount",
              "developer_fee",
              "exchange_fee",
              "subtotal_amount"
            ],
            "properties": {
              "initial_amount": {
                "description": "The initial amount of the transfer, represented as a decimal string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see the top-level `currency` field for more info)",
                "type": "string"
              },
              "developer_fee": {
                "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the transfer's fiat currency (see the top-level `currency` field for more info).",
                "type": "string"
              },
              "exchange_fee": {
                "description": "The fee, expressed as a decimal string, represents the amount Bridge charges for facilitating the transfer.  This is the final amount to take out of what is ultimately received by your customer, not a percentage.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                "type": "string"
              },
              "subtotal_amount": {
                "description": "The initial amount of the transfer less fixed fees (including the developer_fee and exchange_fee). Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
                "type": "string"
              },
              "remaining_prefunded_balance": {
                "description": "For Prefunded Accounts, this value will represent the remaining account balance after the transfer.",
                "type": "string"
              },
              "gas_fee": {
                "description": "The fee, expressed as a decimal string. It's deducted from the withdrawn amount to pay for gas.  Only nonzero to crypto withdrawals that cost gas (e.g. USDT or DAI), and only known when the transaction is confirmed on-chain.  Will be missing if not yet known.\n\nIt's denominated in the fiat currency to which the destination currency is pegged.",
                "type": "string"
              },
              "final_amount": {
                "description": "The final amount of the transfer, expressed as a decimal string, equal to the subtotal_amount minus any gas fees.  If the gas fee is not known, this field will be missing.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the destination currency if that is a fiat currency or the fiat currency to which the destination currency is pegged.",
                "type": "string"
              },
              "source_tx_hash": {
                "description": "The hash of the on-chain deposit to the source address, where applicable"
              },
              "destination_tx_hash": {
                "description": "The hash of the on-chain transfer to the destination address, where applicable"
              },
              "exchange_rate": {
                "description": "The effective exchange rate can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee. This rate includes a currency conversion spread and is subject to a rounding precision loss during the calculation. Currently it's populated for SEPA onramp/offramp transfers only."
              },
              "url": {
                "description": "The URL of a user-facing copy of the receipt.",
                "type": "string"
              }
            }
          },
          "return_details": {
            "readOnly": true,
            "description": "Return information, if the transfer has been returned.",
            "properties": {
              "reason": {
                "description": "The reason for the return, as given by the returning financial institution.",
                "type": "string"
              }
            }
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the transfer",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of update of the transfer",
            "format": "date-time"
          }
        }
      },
      "TransferReturnDetails": {
        "properties": {
          "reason": {
            "description": "The reason for the return, as given by the returning financial institution.",
            "type": "string"
          }
        }
      },
      "Receipt": {
        "required": [
          "initial_amount",
          "developer_fee",
          "exchange_fee",
          "subtotal_amount"
        ],
        "properties": {
          "initial_amount": {
            "description": "The initial amount of the transfer, represented as a decimal string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see the top-level `currency` field for more info)",
            "type": "string"
          },
          "developer_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount you wish to reserve for your own account.  This fee is the final amount deducted from what your customer ultimately receives, rather than a percentage.\n\nIt is denominated in the transfer's fiat currency (see the top-level `currency` field for more info).",
            "type": "string"
          },
          "exchange_fee": {
            "description": "The fee, expressed as a decimal string, represents the amount Bridge charges for facilitating the transfer.  This is the final amount to take out of what is ultimately received by your customer, not a percentage.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
            "type": "string"
          },
          "subtotal_amount": {
            "description": "The initial amount of the transfer less fixed fees (including the developer_fee and exchange_fee). Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the transfer's fiat currency (see top-level `currency` field for more info).",
            "type": "string"
          },
          "remaining_prefunded_balance": {
            "description": "For Prefunded Accounts, this value will represent the remaining account balance after the transfer.",
            "type": "string"
          },
          "gas_fee": {
            "description": "The fee, expressed as a decimal string. It's deducted from the withdrawn amount to pay for gas.  Only nonzero to crypto withdrawals that cost gas (e.g. USDT or DAI), and only known when the transaction is confirmed on-chain.  Will be missing if not yet known.\n\nIt's denominated in the fiat currency to which the destination currency is pegged.",
            "type": "string"
          },
          "final_amount": {
            "description": "The final amount of the transfer, expressed as a decimal string, equal to the subtotal_amount minus any gas fees.  If the gas fee is not known, this field will be missing.  Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.\n\nIt's denominated in the destination currency if that is a fiat currency or the fiat currency to which the destination currency is pegged.",
            "type": "string"
          },
          "source_tx_hash": {
            "description": "The hash of the on-chain deposit to the source address, where applicable"
          },
          "destination_tx_hash": {
            "description": "The hash of the on-chain transfer to the destination address, where applicable"
          },
          "exchange_rate": {
            "description": "The effective exchange rate can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee. This rate includes a currency conversion spread and is subject to a rounding precision loss during the calculation. Currently it's populated for SEPA onramp/offramp transfers only."
          },
          "url": {
            "description": "The URL of a user-facing copy of the receipt.",
            "type": "string"
          }
        }
      },
      "DrainReceipt": {
        "required": [
          "initial_amount",
          "developer_fee",
          "exchange_rate",
          "subtotal_amount",
          "converted_amount",
          "outgoing_amount",
          "destination_currency"
        ],
        "properties": {
          "initial_amount": {
            "description": "The initial amount of the drain, denominated in the fiat currency to which the currency of the Liquidation Address is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.000000000000000001\" etc.",
            "type": "string"
          },
          "developer_fee": {
            "description": "The developer fee, denominated in the fiat currency to which the currency of the Liquidation Address is pegged. This fee is a specific amount deducted from the initial total before conversion, rather than a percentage.",
            "type": "string"
          },
          "subtotal_amount": {
            "description": "The initial amount of the drain less the `developer_fee`, denominated in the fiat currency to which the Liquidation Address currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.000000000000000001\" etc.",
            "type": "string"
          },
          "gas_fee": {
            "description": "The fee that is deducted from the withdrawn amount to pay for gas.  Only included for crypto withdrawals that cost gas (e.g. USDT or DAI). It's denominated in the fiat currency to which the destination currency is pegged.",
            "type": "string"
          },
          "converted_amount": {
            "description": "The converted amount of the drain. It's denominated in the destination currency or its pegged fiat currency.",
            "type": "string"
          },
          "exchange_rate": {
            "description": "The effective exchange rate that can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee."
          },
          "outgoing_amount": {
            "description": "The final amount of the drain, equal to the `converted_amount` minus any gas fees. It's denominated in the destination currency or its pegged fiat currency.",
            "type": "string"
          },
          "destination_currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd"
            ],
            "description": "The currency of the fund sent to the customer."
          },
          "url": {
            "description": "The URL of a user-facing copy of the receipt.",
            "type": "string"
          }
        }
      },
      "PutWebhookPayload": {
        "properties": {
          "url": {
            "description": "The new HTTPS URL that Bridge will send events to.",
            "type": "string",
            "minLength": 1
          },
          "status": {
            "description": "The new status of the webhook endpoint.  If set to \"active\", the webhook will be enabled and will send requests to the new URL.  If set to \"disabled\", the webhook will be disabled and will not send requests to the URL.",
            "type": "string",
            "enum": [
              "active",
              "disabled"
            ]
          }
        }
      },
      "SendWebhookPayload": {
        "properties": {
          "event_id": {
            "description": "The ID of the event that will be delivered to your endpoint",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "TransferSource": {
        "required": [
          "currency",
          "payment_rail"
        ],
        "properties": {
          "currency": {
            "description": "When `eur` is specified as the source currency:\n  1. the source rail must be `sepa`;\n  2. only `usdc` is supported as the destination currency",
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd",
              "eur"
            ]
          },
          "payment_rail": {
            "description": "When `sepa` is specified as the source rail:\n  1. the source currency must be `eur`;\n  2. only `usdc` is supported as the destination currency;\n\nWhen `swift` is specified as the source rail:\n  1. the source currency must be `usd`;\n  2. only `usdc` is supported as the destination currency",
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "sepa",
              "solana",
              "stellar",
              "swift"
            ]
          },
          "external_account_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "omad": {
            "readOnly": true,
            "description": "The OMAD of a wire transfer",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 40
          },
          "imad": {
            "readOnly": true,
            "description": "The IMAD of a wire transfer",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 40
          },
          "bank_beneficiary_name": {
            "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "bank_routing_number": {
            "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "bank_name": {
            "description": "(Wire only) The name of the bank that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "description": {
            "description": "(ACH only) The description of the deposit that the customer sent",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TransferDestination": {
        "required": [
          "currency",
          "payment_rail"
        ],
        "properties": {
          "currency": {
            "description": "When `eur` is specified as the destination currency:\n  1. the destination rail must be `sepa`;\n  2. only `usdc` is supported as the source currency",
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd",
              "eur"
            ]
          },
          "payment_rail": {
            "description": "When `sepa` is specified as the destination rail:\n  1. the destination currency must be `eur`;\n  2. only `usdc` is supported as the source currency;\n\n When `swift` is specified as the destination rail:\n  1. the destination currency must be `usd`;\n  2. only `usdc` is supported as the source currency",
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "sepa",
              "solana",
              "stellar",
              "swift"
            ]
          },
          "external_account_id": {
            "description": "External bank account Bridge should send the funds to. The currency associated with the External Account must match the destination currency.",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "omad": {
            "readOnly": true,
            "description": "The OMAD of a wire transfer",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 40
          },
          "imad": {
            "readOnly": true,
            "description": "The IMAD of a wire transfer",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 40
          },
          "trace_number": {
            "readOnly": true,
            "description": "The trace number of an ACH transfer",
            "type": "string",
            "pattern": "[0-9]",
            "minLength": 15,
            "maxLength": 15
          },
          "wire_message": {
            "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "sepa_reference": {
            "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
            "type": "string",
            "minLength": 6,
            "maxLength": 140
          },
          "swift_reference": {
            "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          }
        }
      },
      "DrainDestination": {
        "required": [
          "payment_rail",
          "currency"
        ],
        "properties": {
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd"
            ]
          },
          "to_address": {
            "description": "The crypto wallet address that the customer will ultimately receive funds at",
            "type": "string"
          },
          "blockchain_memo": {
            "description": "The memo to include in the transaction, for blockchains that support memos only",
            "type": "string"
          },
          "external_account_id": {
            "description": "External bank account to which Bridge will send the funds.",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "wire_message": {
            "description": "A message to be sent with a wire transfer.",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "sepa_reference": {
            "description": "A reference message to be sent with a SEPA transaction.",
            "type": "string",
            "minLength": 6,
            "maxLength": 140
          },
          "swift_reference": {
            "description": "A payment reference message or remittance information to be included in a SWIFT transaction.",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "imad": {
            "description": "The IMAD of a wire transfer",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 40
          },
          "trace_number": {
            "readOnly": true,
            "description": "The trace number of an ACH transfer",
            "type": "string",
            "pattern": "[0-9]",
            "minLength": 15,
            "maxLength": 15
          }
        }
      },
      "DrainReturnDetails": {
        "properties": {
          "reason": {
            "description": "The reason for the return, as given by the returning financial institution.",
            "type": "string"
          }
        }
      },
      "DepositInstructions": {
        "readOnly": true,
        "required": [
          "payment_rail",
          "amount",
          "currency"
        ],
        "properties": {
          "payment_rail": {
            "description": "The payment rail that Bridge is expecting funds to arrive on.  For a crypto based source on the transfer, this is the chain, i.e. ethereum or polygon",
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "amount": {
            "description": "Amount of the deposit, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd"
            ]
          },
          "from_address": {
            "description": "The crypto wallet address that the customer will send funds from, in order to kick off this transfer",
            "type": "string"
          },
          "to_address": {
            "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
            "type": "string"
          },
          "deposit_message": {
            "description": "The message that the customer MUST include in their wire memo/message or ach push description",
            "type": "string"
          },
          "bank_name": {
            "description": "The name of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_address": {
            "description": "The address of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_routing_number": {
            "description": "The routing number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_account_number": {
            "description": "The account number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_beneficiary_name": {
            "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
            "type": "string"
          }
        }
      },
      "PrefundedAccount": {
        "required": [
          "id",
          "available_balance",
          "currency",
          "name"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "available_balance": {
            "description": "Amount available for spending, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string",
            "readOnly": true
          },
          "currency": {
            "description": "currency associated with the bank account.",
            "readOnly": true,
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "name": {
            "description": "Serialized name of the account which identifies the counterparty.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "PrefundedAccountHistory": {
        "required": [
          "id",
          "amount",
          "available_balance",
          "currency",
          "name",
          "type",
          "created_at"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "amount": {
            "description": "Amount of the transaction, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string",
            "readOnly": true
          },
          "available_balance": {
            "description": "Amount available for spending, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string",
            "readOnly": true
          },
          "currency": {
            "description": "currency associated with the bank account.",
            "readOnly": true,
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "name": {
            "description": "Serialized name of the account.",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "description": "The type of the transaction.",
            "type": "string",
            "enum": [
              "funding",
              "refunded transfer"
            ],
            "readOnly": true
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the External Account",
            "format": "date-time"
          }
        }
      },
      "ExternalAccount": {
        "required": [
          "account_owner_name",
          "id"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "customer_id": {
            "description": "The id of the Bridge customer that this External Account belongs to",
            "type": "string",
            "minLength": 1,
            "readOnly": true
          },
          "currency": {
            "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
            "type": "string",
            "enum": [
              "usd",
              "eur"
            ]
          },
          "bank_name": {
            "description": "Bank name of the account (e.g. \"Chase\")",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "account_owner_name": {
            "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "last_4": {
            "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
            "type": "string",
            "minLength": 1,
            "readOnly": true
          },
          "account_number": {
            "writeOnly": true,
            "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
            "type": "string",
            "minLength": 12
          },
          "routing_number": {
            "writeOnly": true,
            "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
            "type": "string",
            "minLength": 9
          },
          "account_type": {
            "description": "Type of the bank account. The default is `us`",
            "type": "string",
            "enum": [
              "us",
              "iban"
            ]
          },
          "iban": {
            "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
            "required": [
              "account_number",
              "bic",
              "country",
              "last_4"
            ],
            "properties": {
              "account_number": {
                "type": "string",
                "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                "minLength": 1,
                "writeOnly": true
              },
              "bic": {
                "type": "string",
                "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                "minLength": 1
              },
              "country": {
                "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              },
              "last_4": {
                "description": "Last 4 digits of the bank account number",
                "minLength": 1,
                "type": "string",
                "readOnly": true
              }
            }
          },
          "account": {
            "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
            "required": [
              "account_number",
              "routing_number",
              "last_4"
            ],
            "properties": {
              "account_number": {
                "type": "string",
                "description": "The bank account number",
                "minLength": 1,
                "writeOnly": true
              },
              "routing_number": {
                "type": "string",
                "description": "The bank routing number",
                "minLength": 9,
                "maxLength": 9
              },
              "last_4": {
                "description": "Last 4 digits of the bank account number",
                "minLength": 1,
                "type": "string",
                "readOnly": true
              }
            }
          },
          "account_owner_type": {
            "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
            "type": "string",
            "enum": [
              "individual",
              "business"
            ]
          },
          "first_name": {
            "type": "string",
            "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
          },
          "business_name": {
            "type": "string",
            "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
          },
          "address": {
            "required": [
              "street_line_1",
              "country",
              "city"
            ],
            "properties": {
              "street_line_1": {
                "type": "string",
                "minLength": 1
              },
              "street_line_2": {
                "type": "string",
                "minLength": 1
              },
              "city": {
                "type": "string",
                "minLength": 1
              },
              "state": {
                "type": "string",
                "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                "minLength": 2,
                "maxLength": 2
              },
              "postal_code": {
                "type": "string",
                "description": "Must be supplied for countries that use postal codes.",
                "minLength": 1
              },
              "country": {
                "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              }
            },
            "writeOnly": true,
            "description": "Address of the beneficiary of this account. Required for `us` accounts."
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the External Account",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of last update of the External Account",
            "format": "date-time"
          },
          "active": {
            "readOnly": true,
            "type": "boolean",
            "description": "Whether or not this External Account is active"
          },
          "beneficiary_address_valid": {
            "readOnly": true,
            "type": "boolean",
            "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
          }
        }
      },
      "ExternalAccountResponse": {
        "required": [
          "account_owner_name",
          "id",
          "currency",
          "customer_id",
          "account_type",
          "created_at",
          "updated_at",
          "active"
        ],
        "allOf": [
          {
            "required": [
              "account_owner_name",
              "id"
            ],
            "properties": {
              "id": {
                "description": "A UUID that uniquely identifies a resource",
                "type": "string",
                "pattern": "[a-z0-9]*",
                "minLength": 1,
                "maxLength": 42,
                "readOnly": true
              },
              "customer_id": {
                "description": "The id of the Bridge customer that this External Account belongs to",
                "type": "string",
                "minLength": 1,
                "readOnly": true
              },
              "currency": {
                "description": "Currency associated with the bank account. Default is `usd`. When `eur` is specified, the account type must be `iban`",
                "type": "string",
                "enum": [
                  "usd",
                  "eur"
                ]
              },
              "bank_name": {
                "description": "Bank name of the account (e.g. \"Chase\")",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "account_owner_name": {
                "description": "Owner of the account Bank Account (e.g. \"John Doe\")",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "last_4": {
                "description": "Last 4 digits of the bank account number for `us` account type. This field is getting deprecated in favor of the `account.last_4` field",
                "type": "string",
                "minLength": 1,
                "readOnly": true
              },
              "account_number": {
                "writeOnly": true,
                "description": "Account number of your bank account. This field is getting deprecated in favor of the `account.account_number` field for US accounts.",
                "type": "string",
                "minLength": 12
              },
              "routing_number": {
                "writeOnly": true,
                "description": "Routing number of your bank account. This field is getting deprecated in favor of the `account.routing_number` field for US accounts.",
                "type": "string",
                "minLength": 9
              },
              "account_type": {
                "description": "Type of the bank account. The default is `us`",
                "type": "string",
                "enum": [
                  "us",
                  "iban"
                ]
              },
              "iban": {
                "description": "IBAN bank account information. Required when the `account_type` is `iban`.",
                "required": [
                  "account_number",
                  "bic",
                  "country",
                  "last_4"
                ],
                "properties": {
                  "account_number": {
                    "type": "string",
                    "description": "The International Bank Account Number (IBAN) that will be used to send the funds",
                    "minLength": 1,
                    "writeOnly": true
                  },
                  "bic": {
                    "type": "string",
                    "description": "The Business Identifier Code (BIC) that will be used to send the funds",
                    "minLength": 1
                  },
                  "country": {
                    "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3
                  },
                  "last_4": {
                    "description": "Last 4 digits of the bank account number",
                    "minLength": 1,
                    "type": "string",
                    "readOnly": true
                  }
                }
              },
              "account": {
                "description": "US bank account information. Required when the `account_type` is `us`. However, the top-level `account_number` and `routing_number` fields in deprecation will continue to be supported.",
                "required": [
                  "account_number",
                  "routing_number",
                  "last_4"
                ],
                "properties": {
                  "account_number": {
                    "type": "string",
                    "description": "The bank account number",
                    "minLength": 1,
                    "writeOnly": true
                  },
                  "routing_number": {
                    "type": "string",
                    "description": "The bank routing number",
                    "minLength": 9,
                    "maxLength": 9
                  },
                  "last_4": {
                    "description": "Last 4 digits of the bank account number",
                    "minLength": 1,
                    "type": "string",
                    "readOnly": true
                  }
                }
              },
              "account_owner_type": {
                "description": "The type of the account ownership. Required when the `account_type` is `iban`. For `individual` ownership, `first_name` and `last_name` are required. For `business` ownership, `business_name` is required.",
                "type": "string",
                "enum": [
                  "individual",
                  "business"
                ]
              },
              "first_name": {
                "type": "string",
                "description": "First name of the individual account holder. Required when the `account_owner_type` is `individual`"
              },
              "last_name": {
                "type": "string",
                "description": "Last name of the individual account holder. Required when the `account_owner_type` is `individual`"
              },
              "business_name": {
                "type": "string",
                "description": "Business name of the business account holder. Required when the `account_owner_type` is `business`"
              },
              "address": {
                "required": [
                  "street_line_1",
                  "country",
                  "city"
                ],
                "properties": {
                  "street_line_1": {
                    "type": "string",
                    "minLength": 1
                  },
                  "street_line_2": {
                    "type": "string",
                    "minLength": 1
                  },
                  "city": {
                    "type": "string",
                    "minLength": 1
                  },
                  "state": {
                    "type": "string",
                    "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "postal_code": {
                    "type": "string",
                    "description": "Must be supplied for countries that use postal codes.",
                    "minLength": 1
                  },
                  "country": {
                    "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3
                  }
                },
                "writeOnly": true,
                "description": "Address of the beneficiary of this account. Required for `us` accounts."
              },
              "created_at": {
                "readOnly": true,
                "type": "string",
                "description": "Time of creation of the External Account",
                "format": "date-time"
              },
              "updated_at": {
                "readOnly": true,
                "type": "string",
                "description": "Time of last update of the External Account",
                "format": "date-time"
              },
              "active": {
                "readOnly": true,
                "type": "boolean",
                "description": "Whether or not this External Account is active"
              },
              "beneficiary_address_valid": {
                "readOnly": true,
                "type": "boolean",
                "description": "Whether the beneficiary address is valid. A valid beneficiary address is required for all US External Accounts"
              }
            }
          },
          {
            "properties": {
              "account": {
                "description": "US bank account information. It's populated when the `account_type` is `us`"
              },
              "currency": {
                "description": "Currency associated with the bank account."
              },
              "account_type": {
                "description": "Type of the bank account."
              },
              "account_owner_type": {
                "description": "Type of the account ownership"
              },
              "first_name": {
                "description": "First name of the individual account owner"
              },
              "last_name": {
                "description": "Last name of the individual account owner"
              },
              "business_name": {
                "description": "Business name of the business account owner"
              },
              "iban": {
                "description": "IBAN bank account information. It's populated when the `account_type` is `iban`."
              }
            }
          }
        ]
      },
      "UpdateExternalAccountInput": {
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "required": [
              "street_line_1",
              "country",
              "city"
            ],
            "properties": {
              "street_line_1": {
                "type": "string",
                "minLength": 1
              },
              "street_line_2": {
                "type": "string",
                "minLength": 1
              },
              "city": {
                "type": "string",
                "minLength": 1
              },
              "state": {
                "type": "string",
                "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions.",
                "minLength": 2,
                "maxLength": 2
              },
              "postal_code": {
                "type": "string",
                "description": "Must be supplied for countries that use postal codes.",
                "minLength": 1
              },
              "country": {
                "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              }
            },
            "writeOnly": true,
            "description": "address of the beneficiary of this account"
          }
        }
      },
      "LiquidationAddress": {
        "required": [
          "id",
          "currency",
          "chain",
          "external_account_id",
          "address",
          "destination_payment_rail",
          "destination_currency",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai"
            ]
          },
          "chain": {
            "type": "string",
            "enum": [
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "external_account_id": {
            "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "destination_wire_message": {
            "description": "A message to be sent with a wire transfer.",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "destination_sepa_reference": {
            "description": "A reference message to be sent with a SEPA transaction.",
            "type": "string",
            "minLength": 6,
            "maxLength": 140
          },
          "destination_swift_reference": {
            "description": "A payment reference message or remittance information to be included in a SWIFT transaction.",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "destination_payment_rail": {
            "description": "The payment rail that Bridge will use to send funds to the customer.",
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "sepa",
              "solana",
              "stellar",
              "swift"
            ]
          },
          "destination_currency": {
            "description": "The currency that Bridge will use to send funds to the customer.",
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd",
              "eur"
            ]
          },
          "address": {
            "description": "The crypto wallet address the customer will send funds to in order to initiate the payment processing",
            "type": "string",
            "readOnly": true
          },
          "destination_address": {
            "type": "string",
            "description": "The crypto wallet address that Bridge will use to send funds to the customer."
          },
          "destination_blockchain_memo": {
            "type": "string",
            "description": "The memo to include in the transaction, for blockchains that support memos only"
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the Liquidation Address",
            "format": "date-time"
          },
          "updated_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of last update of the Liquidation Address",
            "format": "date-time"
          }
        }
      },
      "CreateKycLinks": {
        "required": [
          "full_name",
          "email",
          "type"
        ],
        "properties": {
          "full_name": {
            "description": "Full name of the customer, for a business, this would be the business entity's legal name",
            "type": "string",
            "minLength": 1
          },
          "email": {
            "description": "Email of the customer",
            "type": "string",
            "minLength": 1
          },
          "type": {
            "description": "Type of the customer (individual vs. business)",
            "type": "string",
            "minLength": 1,
            "enum": [
              "individual",
              "business"
            ]
          },
          "endorsements": {
            "description": "List of endorsements to request for the generated KYC link.\nFor example, `sepa` endorsement could be requested to allow an `individual` customer to submit `proof-of-address` documents in the KYC flow.",
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "enum": [
                "sepa"
              ]
            }
          }
        }
      },
      "CreateStaticMemo": {
        "required": [
          "source",
          "destination"
        ],
        "properties": {
          "developer_fee_percent": {
            "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
            "type": "string",
            "format": "number",
            "minimum": 0,
            "maximum": 100,
            "exclusiveMaximum": true,
            "example": "0.1"
          },
          "source": {
            "required": [
              "currency",
              "payment_rail"
            ],
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usd"
                ]
              },
              "payment_rail": {
                "type": "string",
                "enum": [
                  "ach",
                  "wire",
                  "ach_push",
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              }
            },
            "example": {
              "currency": "usd",
              "payment_rail": "wire"
            }
          },
          "destination": {
            "required": [
              "currency",
              "payment_rail",
              "address"
            ],
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai"
                ]
              },
              "payment_rail": {
                "type": "string",
                "enum": [
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "address": {
                "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                "type": "string"
              },
              "blockchain_memo": {
                "type": "string",
                "description": "The memo to include in the transaction, for blockchains that support memos only"
              }
            },
            "example": {
              "currency": "usdc",
              "payment_rail": "polygon",
              "address": "0xdeadbeef"
            }
          }
        }
      },
      "UpdateStaticMemo": {
        "properties": {
          "destination": {
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai"
                ]
              },
              "payment_rail": {
                "type": "string",
                "enum": [
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "address": {
                "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                "type": "string"
              }
            },
            "example": {
              "currency": "usdc",
              "payment_rail": "polygon",
              "address": "0xdeadbeef"
            }
          },
          "developer_fee_percent": {
            "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
            "type": "string",
            "format": "number",
            "minimum": 0,
            "maximum": 100,
            "exclusiveMaximum": true,
            "example": "0.1"
          }
        }
      },
      "UpdateStaticMemoDestination": {
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai"
            ]
          },
          "payment_rail": {
            "type": "string",
            "enum": [
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "address": {
            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
            "type": "string"
          }
        },
        "example": {
          "currency": "usdc",
          "payment_rail": "polygon",
          "address": "0xdeadbeef"
        }
      },
      "StaticMemoDeveloperFeePercent": {
        "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
        "type": "string",
        "format": "number",
        "minimum": 0,
        "maximum": 100,
        "exclusiveMaximum": true,
        "example": "0.1"
      },
      "StaticMemoSourceInput": {
        "required": [
          "currency",
          "payment_rail"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          }
        },
        "example": {
          "currency": "usd",
          "payment_rail": "wire"
        }
      },
      "StaticMemoDestination": {
        "required": [
          "currency",
          "payment_rail",
          "address"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai"
            ]
          },
          "payment_rail": {
            "type": "string",
            "enum": [
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "address": {
            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
            "type": "string"
          },
          "blockchain_memo": {
            "type": "string",
            "description": "The memo to include in the transaction, for blockchains that support memos only"
          }
        },
        "example": {
          "currency": "usdc",
          "payment_rail": "polygon",
          "address": "0xdeadbeef"
        }
      },
      "StaticMemoResponse": {
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "developer_fee_percent": {
            "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
            "type": "string",
            "format": "number",
            "minimum": 0,
            "maximum": 100,
            "exclusiveMaximum": true,
            "example": "0.1"
          },
          "source_deposit_instructions": {
            "readOnly": true,
            "properties": {
              "payment_rail": {
                "type": "string",
                "enum": [
                  "ach",
                  "wire",
                  "ach_push",
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "currency": {
                "type": "string",
                "enum": [
                  "usd"
                ]
              },
              "deposit_message": {
                "description": "The message that the customer MUST include in their wire memo/message or ACH description.",
                "type": "string"
              },
              "bank_name": {
                "description": "The name of the bank that the customer should send the deposit to",
                "type": "string"
              },
              "bank_address": {
                "description": "The address of the bank that the customer should send the deposit to",
                "type": "string"
              },
              "bank_routing_number": {
                "description": "The routing number of the bank that the customer should send the deposit to",
                "type": "string"
              },
              "bank_account_number": {
                "description": "The account number of the bank that the customer should send the deposit to",
                "type": "string"
              },
              "bank_beneficiary_name": {
                "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
                "type": "string"
              }
            },
            "example": {
              "currency": "usd",
              "deposit_message": "EXAMPLE_MEMO_MESSAGE",
              "bank_name": "Lead Bank",
              "bank_address": "1801 Main St., Kansas City, MO 64108",
              "bank_beneficiary_name": "Bridge Ventures Inc",
              "bank_account_number": "123456789",
              "bank_routing_number": "87654321"
            }
          },
          "destination": {
            "required": [
              "currency",
              "payment_rail",
              "address"
            ],
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai"
                ]
              },
              "payment_rail": {
                "type": "string",
                "enum": [
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "address": {
                "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                "type": "string"
              },
              "blockchain_memo": {
                "type": "string",
                "description": "The memo to include in the transaction, for blockchains that support memos only"
              }
            },
            "example": {
              "currency": "usdc",
              "payment_rail": "polygon",
              "address": "0xdeadbeef"
            }
          }
        }
      },
      "StaticMemoSourceDepositInstructions": {
        "readOnly": true,
        "properties": {
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "deposit_message": {
            "description": "The message that the customer MUST include in their wire memo/message or ACH description.",
            "type": "string"
          },
          "bank_name": {
            "description": "The name of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_address": {
            "description": "The address of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_routing_number": {
            "description": "The routing number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_account_number": {
            "description": "The account number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_beneficiary_name": {
            "description": "The name of the beneficiary of the bank account that the customer should send the deposit to",
            "type": "string"
          }
        },
        "example": {
          "currency": "usd",
          "deposit_message": "EXAMPLE_MEMO_MESSAGE",
          "bank_name": "Lead Bank",
          "bank_address": "1801 Main St., Kansas City, MO 64108",
          "bank_beneficiary_name": "Bridge Ventures Inc",
          "bank_account_number": "123456789",
          "bank_routing_number": "87654321"
        }
      },
      "VirtualAccountEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of activity",
            "enum": [
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "refund",
              "microdeposit",
              "account_update",
              "deactivation",
              "activation"
            ]
          },
          "customer_id": {
            "description": "The id of the Bridge customer that this Virtual Account event belongs to",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "virtual_account_id": {
            "description": "The id of the Virtual Account that this Virtual Account event belongs to",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "amount": {
            "type": "string",
            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd"
            ]
          },
          "developer_fee_amount": {
            "type": "string",
            "description": "Amount of the developer fee if any, represented as a dollar denominated string. This is the final amount taken out of what is ultimately received by your customer, not a percentage. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "exchange_fee_amount": {
            "type": "string",
            "description": "Amount of the exchange fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "subtotal_amount": {
            "type": "string",
            "description": "Amount of the subtotal, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "gas_fee": {
            "type": "string",
            "description": "Amount of the gas fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "deposit_id": {
            "type": "string",
            "description": "The id of the deposit related to this event. This id can be used to link multiple events to the same transaction"
          },
          "destination_tx_hash": {
            "type": "string",
            "description": "The hash of the on-chain transfer to the destination address"
          },
          "source": {
            "required": [
              "payment_rail"
            ],
            "properties": {
              "payment_rail": {
                "type": "string",
                "enum": [
                  "ach",
                  "wire",
                  "ach_push",
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "description": {
                "description": "(ACH only) The description of the deposit that the customer sent",
                "type": "string",
                "readOnly": true
              },
              "sender_name": {
                "description": "(ACH only) The name of the business or individual who initiated the ACH",
                "type": "string",
                "readOnly": true
              },
              "sender_bank_routing_number": {
                "description": "(ACH only) The routing number of the entity that initiated this ACH transaction",
                "type": "string",
                "readOnly": true
              },
              "trace_number": {
                "description": "(ACH only) The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions",
                "type": "string",
                "readOnly": true
              },
              "bank_routing_number": {
                "description": "(Wire only) The routing number of the bank that sent the wire to the Virtual Account",
                "type": "string",
                "readOnly": true
              },
              "bank_name": {
                "description": "(Wire only) The name of the bank that sent the wire",
                "type": "string",
                "readOnly": true
              },
              "bank_beneficiary_name": {
                "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                "type": "string",
                "readOnly": true
              },
              "imad": {
                "description": "The IMAD of a wire transfer",
                "type": "string",
                "pattern": "[a-z0-9]*",
                "minLength": 1,
                "maxLength": 40,
                "readOnly": true
              }
            }
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the event",
            "format": "date-time"
          }
        }
      },
      "VirtualAccountEventSource": {
        "required": [
          "payment_rail"
        ],
        "properties": {
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "description": {
            "description": "(ACH only) The description of the deposit that the customer sent",
            "type": "string",
            "readOnly": true
          },
          "sender_name": {
            "description": "(ACH only) The name of the business or individual who initiated the ACH",
            "type": "string",
            "readOnly": true
          },
          "sender_bank_routing_number": {
            "description": "(ACH only) The routing number of the entity that initiated this ACH transaction",
            "type": "string",
            "readOnly": true
          },
          "trace_number": {
            "description": "(ACH only) The unique, a 15-digit number associated with each ACH transaction that is used for tracking and reconciling transactions",
            "type": "string",
            "readOnly": true
          },
          "bank_routing_number": {
            "description": "(Wire only) The routing number of the bank that sent the wire to the Virtual Account",
            "type": "string",
            "readOnly": true
          },
          "bank_name": {
            "description": "(Wire only) The name of the bank that sent the wire",
            "type": "string",
            "readOnly": true
          },
          "bank_beneficiary_name": {
            "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
            "type": "string",
            "readOnly": true
          },
          "imad": {
            "description": "The IMAD of a wire transfer",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 40,
            "readOnly": true
          }
        }
      },
      "CreateVirtualAccount": {
        "required": [
          "source",
          "destination"
        ],
        "properties": {
          "developer_fee_percent": {
            "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
            "type": "string",
            "format": "number",
            "minimum": 0,
            "maximum": 100,
            "exclusiveMaximum": true,
            "example": "0.1"
          },
          "source": {
            "required": [
              "currency"
            ],
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usd"
                ]
              }
            },
            "example": {
              "currency": "usd"
            }
          },
          "destination": {
            "required": [
              "currency",
              "payment_rail",
              "address"
            ],
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai"
                ]
              },
              "payment_rail": {
                "type": "string",
                "enum": [
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "address": {
                "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                "type": "string"
              },
              "blockchain_memo": {
                "type": "string",
                "description": "The memo to include in the transaction, for blockchains that support memos only"
              }
            },
            "example": {
              "currency": "usdc",
              "payment_rail": "polygon",
              "address": "0xdeadbeef"
            }
          }
        }
      },
      "UpdateVirtualAccount": {
        "properties": {
          "destination": {
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai"
                ]
              },
              "payment_rail": {
                "type": "string",
                "enum": [
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "address": {
                "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                "type": "string"
              }
            },
            "example": {
              "currency": "usdc",
              "payment_rail": "polygon",
              "address": "0xdeadbeef"
            }
          },
          "developer_fee_percent": {
            "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
            "type": "string",
            "format": "number",
            "minimum": 0,
            "maximum": 100,
            "exclusiveMaximum": true,
            "example": "0.1"
          }
        }
      },
      "UpdateVirtualAccountDestination": {
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai"
            ]
          },
          "payment_rail": {
            "type": "string",
            "enum": [
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "address": {
            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
            "type": "string"
          }
        },
        "example": {
          "currency": "usdc",
          "payment_rail": "polygon",
          "address": "0xdeadbeef"
        }
      },
      "VirtualAccountDeveloperFeePercent": {
        "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
        "type": "string",
        "format": "number",
        "minimum": 0,
        "maximum": 100,
        "exclusiveMaximum": true,
        "example": "0.1"
      },
      "VirtualAccountActivationStatus": {
        "description": "The activation status of the Virtual Account",
        "type": "string",
        "enum": [
          "activated",
          "deactivated"
        ]
      },
      "VirtualAccountSourceInput": {
        "required": [
          "currency"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          }
        },
        "example": {
          "currency": "usd"
        }
      },
      "VirtualAccountDestination": {
        "required": [
          "currency",
          "payment_rail",
          "address"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai"
            ]
          },
          "payment_rail": {
            "type": "string",
            "enum": [
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "address": {
            "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
            "type": "string"
          },
          "blockchain_memo": {
            "type": "string",
            "description": "The memo to include in the transaction, for blockchains that support memos only"
          }
        },
        "example": {
          "currency": "usdc",
          "payment_rail": "polygon",
          "address": "0xdeadbeef"
        }
      },
      "VirtualAccountResponse": {
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "status": {
            "description": "The activation status of the Virtual Account",
            "type": "string",
            "enum": [
              "activated",
              "deactivated"
            ]
          },
          "developer_fee_percent": {
            "description": "The developer fee percent that will be applied to this Virtual Account. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
            "type": "string",
            "format": "number",
            "minimum": 0,
            "maximum": 100,
            "exclusiveMaximum": true,
            "example": "0.1"
          },
          "source_deposit_instructions": {
            "readOnly": true,
            "properties": {
              "payment_rail": {
                "type": "string",
                "enum": [
                  "ach",
                  "wire",
                  "ach_push",
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ],
                "deprecated": true
              },
              "payment_rails": {
                "description": "The payment rails supported by these deposit instructions",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "ach",
                    "wire",
                    "ach_push",
                    "arbitrum",
                    "avalanche_c_chain",
                    "base",
                    "ethereum",
                    "optimism",
                    "polygon",
                    "solana",
                    "stellar"
                  ]
                }
              },
              "currency": {
                "type": "string",
                "enum": [
                  "usd"
                ]
              },
              "bank_name": {
                "description": "The name of the bank that the customer should send the deposit to",
                "type": "string"
              },
              "bank_address": {
                "description": "The address of the bank that the customer should send the deposit to",
                "type": "string"
              },
              "bank_routing_number": {
                "description": "The routing number of the bank that the customer should send the deposit to",
                "type": "string"
              },
              "bank_account_number": {
                "description": "The account number of the bank that the customer should send the deposit to",
                "type": "string"
              }
            },
            "example": {
              "currency": "usd",
              "payment_rails": [
                "ach_push",
                "wire"
              ],
              "bank_name": "Lead Bank",
              "bank_address": "1801 Main St., Kansas City, MO 64108",
              "bank_beneficiary_name": "Customer Name",
              "bank_account_number": "123456789",
              "bank_routing_number": "87654321"
            }
          },
          "destination": {
            "required": [
              "currency",
              "payment_rail",
              "address"
            ],
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai"
                ]
              },
              "payment_rail": {
                "type": "string",
                "enum": [
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "address": {
                "description": "The crypto wallet address that the customer wishes to ultimately receive funds at",
                "type": "string"
              },
              "blockchain_memo": {
                "type": "string",
                "description": "The memo to include in the transaction, for blockchains that support memos only"
              }
            },
            "example": {
              "currency": "usdc",
              "payment_rail": "polygon",
              "address": "0xdeadbeef"
            }
          }
        }
      },
      "VirtualAccountSourceDepositInstructions": {
        "readOnly": true,
        "properties": {
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ],
            "deprecated": true
          },
          "payment_rails": {
            "description": "The payment rails supported by these deposit instructions",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ach",
                "wire",
                "ach_push",
                "arbitrum",
                "avalanche_c_chain",
                "base",
                "ethereum",
                "optimism",
                "polygon",
                "solana",
                "stellar"
              ]
            }
          },
          "currency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "bank_name": {
            "description": "The name of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_address": {
            "description": "The address of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_routing_number": {
            "description": "The routing number of the bank that the customer should send the deposit to",
            "type": "string"
          },
          "bank_account_number": {
            "description": "The account number of the bank that the customer should send the deposit to",
            "type": "string"
          }
        },
        "example": {
          "currency": "usd",
          "payment_rails": [
            "ach_push",
            "wire"
          ],
          "bank_name": "Lead Bank",
          "bank_address": "1801 Main St., Kansas City, MO 64108",
          "bank_beneficiary_name": "Customer Name",
          "bank_account_number": "123456789",
          "bank_routing_number": "87654321"
        }
      },
      "StaticMemoEvent": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of activity",
            "enum": [
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "refund",
              "account_update"
            ]
          },
          "customer_id": {
            "description": "The id of the Bridge customer that this static memo event belongs to",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "static_memo_id": {
            "description": "The id of the Static Memo that this event belongs to",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "amount": {
            "type": "string",
            "description": "Amount of the payin, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd"
            ]
          },
          "developer_fee_amount": {
            "type": "string",
            "description": "Amount of the developer fee if any, represented as a dollar denominated string. This is the final amount taken out of what is ultimately received by your customer, not a percentage. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "exchange_fee_amount": {
            "type": "string",
            "description": "Amount of the exchange fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "subtotal_amount": {
            "type": "string",
            "description": "Amount of the subtotal, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "gas_fee": {
            "type": "string",
            "description": "Amount of the gas fee if any, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\" etc."
          },
          "deposit_id": {
            "type": "string",
            "description": "The id of the deposit related to this event. This id can be used to link multiple events to the same transaction"
          },
          "destination_tx_hash": {
            "type": "string",
            "description": "The hash of the on-chain transfer to the destination address"
          },
          "source_deposit_instructions": {
            "required": [
              "deposit_message"
            ],
            "properties": {
              "deposit_message": {
                "description": "The message that the customer MUST include in their wire memo/message or ach push description",
                "type": "string"
              }
            }
          },
          "source": {
            "required": [
              "payment_rail"
            ],
            "properties": {
              "payment_rail": {
                "type": "string",
                "enum": [
                  "ach",
                  "wire",
                  "ach_push",
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "bank_beneficiary_name": {
                "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
                "type": "string"
              },
              "bank_routing_number": {
                "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
                "type": "string"
              },
              "bank_name": {
                "description": "(Wire only) The name of the bank that the customer sent the deposit to",
                "type": "string"
              },
              "imad": {
                "description": "The IMAD of a wire transfer",
                "type": "string",
                "pattern": "[a-z0-9]*",
                "minLength": 1,
                "maxLength": 40
              },
              "omad": {
                "description": "The OMAD of a wire transfer",
                "type": "string",
                "pattern": "[a-z0-9]*",
                "minLength": 1,
                "maxLength": 40
              },
              "description": {
                "description": "(ACH only) The description of the deposit that the customer sent",
                "type": "string"
              }
            }
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the event",
            "format": "date-time"
          }
        }
      },
      "StaticMemoEventSourceDepositInstructions": {
        "required": [
          "deposit_message"
        ],
        "properties": {
          "deposit_message": {
            "description": "The message that the customer MUST include in their wire memo/message or ach push description",
            "type": "string"
          }
        }
      },
      "StaticMemoEventSource": {
        "required": [
          "payment_rail"
        ],
        "properties": {
          "payment_rail": {
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "bank_beneficiary_name": {
            "description": "(Wire only) The name of the beneficiary of the bank account that the customer sent the deposit to",
            "type": "string"
          },
          "bank_routing_number": {
            "description": "(Wire only) The routing number of the bank that the customer sent the deposit to",
            "type": "string"
          },
          "bank_name": {
            "description": "(Wire only) The name of the bank that the customer sent the deposit to",
            "type": "string"
          },
          "imad": {
            "description": "The IMAD of a wire transfer",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 40
          },
          "omad": {
            "description": "The OMAD of a wire transfer",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 40
          },
          "description": {
            "description": "(ACH only) The description of the deposit that the customer sent",
            "type": "string"
          }
        }
      },
      "CreateLiquidationAddress": {
        "required": [
          "currency",
          "chain"
        ],
        "properties": {
          "chain": {
            "type": "string",
            "enum": [
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "solana",
              "stellar"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai"
            ]
          },
          "external_account_id": {
            "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "destination_wire_message": {
            "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "destination_sepa_reference": {
            "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
            "type": "string",
            "minLength": 6,
            "maxLength": 140
          },
          "destination_swift_reference": {
            "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "destination_payment_rail": {
            "description": "The payment rail that Bridge will use to send funds to the customer. Will default to ACH if not specified.\n\nIf `sepa` is specified:\n1. the destination currency must be `eur`;\n2. the Liquidation Address currency can only be `usdc`;\n\nIf `swift` is specified:\n1. the destination currency must be `usd`;\n2. the Liquidation Address currency can only be `usdc`",
            "type": "string",
            "enum": [
              "ach",
              "wire",
              "ach_push",
              "arbitrum",
              "avalanche_c_chain",
              "base",
              "ethereum",
              "optimism",
              "polygon",
              "sepa",
              "solana",
              "stellar",
              "swift"
            ]
          },
          "destination_currency": {
            "description": "The currency that Bridge will use to send funds to the customer. Will default to USD if not specified.\n\nIf `eur` is specified:\n1. the destination rail must be `sepa`;\n2. the Liquidation Address currency can only be `usdc`",
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd",
              "eur"
            ]
          },
          "destination_address": {
            "type": "string",
            "description": "The crypto wallet address that Bridge will use to send funds to the customer."
          },
          "destination_blockchain_memo": {
            "type": "string",
            "description": "The memo to include in the transaction, for blockchains that support memos only"
          },
          "custom_developer_fee_percent": {
            "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
            "type": "string",
            "nullable": true,
            "format": "number",
            "minimum": 0,
            "maximum": 100,
            "exclusiveMaximum": true,
            "example": "0.1"
          }
        }
      },
      "UpdateLiquidationAddress": {
        "properties": {
          "external_account_id": {
            "properties": {
              "external_account_id": {
                "description": "A UUID that uniquely identifies a resource",
                "type": "string",
                "pattern": "[a-z0-9]*",
                "minLength": 1,
                "maxLength": 42
              }
            }
          },
          "custom_developer_fee_percent": {
            "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
            "type": "string",
            "nullable": true,
            "format": "number",
            "minimum": 0,
            "maximum": 100,
            "exclusiveMaximum": true,
            "example": "0.1"
          }
        }
      },
      "UpdateExternalAccountId": {
        "properties": {
          "external_account_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          }
        }
      },
      "LiquidationAddressCustomDeveloperFeePercent": {
        "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
        "type": "string",
        "nullable": true,
        "format": "number",
        "minimum": 0,
        "maximum": 100,
        "exclusiveMaximum": true,
        "example": "0.1"
      },
      "CreateLiquidationAddressResponse": {
        "required": [
          "currency",
          "chain",
          "destination_payment_rail",
          "destination_currency"
        ],
        "allOf": [
          {
            "required": [
              "currency",
              "chain"
            ],
            "properties": {
              "chain": {
                "type": "string",
                "enum": [
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai"
                ]
              },
              "external_account_id": {
                "description": "External bank account to which Bridge will send the funds. The currency associated with the External Account must match the destination currency.",
                "type": "string",
                "pattern": "[a-z0-9]*",
                "minLength": 1,
                "maxLength": 42
              },
              "destination_wire_message": {
                "description": "A message to be sent with a wire transfer. It can have at most 3 lines (separated by \"\\n\"), each line with a max length of 35 chars",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "destination_sepa_reference": {
                "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are `a-z`, `A-Z`, `0-9`, spaces, ampersand (`&`), hyphen (`-`), full stop (`.`), and solidus (`/`).",
                "type": "string",
                "minLength": 6,
                "maxLength": 140
              },
              "destination_swift_reference": {
                "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are `a-z`, `A-Z`, `0-9`, special characters (`/` `-` `?` `:` `(` `)` `.` `,` `'` `+`), and space",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "destination_payment_rail": {
                "description": "The payment rail that Bridge will use to send funds to the customer. Will default to ACH if not specified.\n\nIf `sepa` is specified:\n1. the destination currency must be `eur`;\n2. the Liquidation Address currency can only be `usdc`;\n\nIf `swift` is specified:\n1. the destination currency must be `usd`;\n2. the Liquidation Address currency can only be `usdc`",
                "type": "string",
                "enum": [
                  "ach",
                  "wire",
                  "ach_push",
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "sepa",
                  "solana",
                  "stellar",
                  "swift"
                ]
              },
              "destination_currency": {
                "description": "The currency that Bridge will use to send funds to the customer. Will default to USD if not specified.\n\nIf `eur` is specified:\n1. the destination rail must be `sepa`;\n2. the Liquidation Address currency can only be `usdc`",
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai",
                  "usd",
                  "eur"
                ]
              },
              "destination_address": {
                "type": "string",
                "description": "The crypto wallet address that Bridge will use to send funds to the customer."
              },
              "destination_blockchain_memo": {
                "type": "string",
                "description": "The memo to include in the transaction, for blockchains that support memos only"
              },
              "custom_developer_fee_percent": {
                "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                "type": "string",
                "nullable": true,
                "format": "number",
                "minimum": 0,
                "maximum": 100,
                "exclusiveMaximum": true,
                "example": "0.1"
              }
            }
          },
          {
            "properties": {
              "external_account_id": {
                "description": "External bank account to which Bridge will send the funds."
              },
              "destination_wire_message": {
                "description": "A message to be sent with a wire transfer."
              },
              "destination_sepa_reference": {
                "description": "A reference message to be sent with a SEPA transaction."
              },
              "destination_swift_reference": {
                "description": "A payment reference message or remittance information to be included in a SWIFT transaction."
              },
              "destination_payment_rail": {
                "description": "The payment rail that Bridge will use to send funds to the customer."
              },
              "destination_currency": {
                "description": "The currency that Bridge will use to send funds to the customer."
              },
              "custom_developer_fee_percent": {
                "description": "The developer fee percent that will be applied to this Liquidation Address or null to use the default fee. The value is a base 100 percentage, i.e. 10.2% is 10.2 in the API.",
                "type": "string",
                "nullable": true,
                "format": "number",
                "minimum": 0,
                "maximum": 100,
                "exclusiveMaximum": true,
                "example": "0.1"
              }
            }
          }
        ]
      },
      "Drain": {
        "required": [
          "id",
          "customer_id",
          "liquidation_address_id",
          "amount",
          "currency",
          "state"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "amount": {
            "description": "Amount of the drain, represented as a dollar denominated string. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.01\" etc.",
            "type": "string"
          },
          "customer_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "liquidation_address_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "dai",
              "usd",
              "eur"
            ]
          },
          "state": {
            "description": "Status of the drain",
            "readOnly": true,
            "type": "string",
            "enum": [
              "awaiting_funds",
              "in_review",
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "canceled",
              "error",
              "returned",
              "refunded"
            ]
          },
          "created_at": {
            "readOnly": true,
            "type": "string",
            "description": "Time of creation of the drain",
            "format": "date-time"
          },
          "deposit_tx_hash": {
            "readOnly": true,
            "type": "string",
            "description": "Hash of the Liquidation Address deposit that triggered this drain"
          },
          "from_address": {
            "readOnly": true,
            "type": "string",
            "description": "The blockchain address that sent funds to the Liquidation Address"
          },
          "destination": {
            "readOnly": true,
            "description": "Destination information of a drain.",
            "required": [
              "payment_rail",
              "currency"
            ],
            "properties": {
              "payment_rail": {
                "type": "string",
                "enum": [
                  "ach",
                  "wire",
                  "ach_push",
                  "arbitrum",
                  "avalanche_c_chain",
                  "base",
                  "ethereum",
                  "optimism",
                  "polygon",
                  "solana",
                  "stellar"
                ]
              },
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai",
                  "usd"
                ]
              },
              "to_address": {
                "description": "The crypto wallet address that the customer will ultimately receive funds at",
                "type": "string"
              },
              "blockchain_memo": {
                "description": "The memo to include in the transaction, for blockchains that support memos only",
                "type": "string"
              },
              "external_account_id": {
                "description": "External bank account to which Bridge will send the funds.",
                "type": "string",
                "pattern": "[a-z0-9]*",
                "minLength": 1,
                "maxLength": 42
              },
              "wire_message": {
                "description": "A message to be sent with a wire transfer.",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "sepa_reference": {
                "description": "A reference message to be sent with a SEPA transaction.",
                "type": "string",
                "minLength": 6,
                "maxLength": 140
              },
              "swift_reference": {
                "description": "A payment reference message or remittance information to be included in a SWIFT transaction.",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "imad": {
                "description": "The IMAD of a wire transfer",
                "type": "string",
                "pattern": "[a-z0-9]*",
                "minLength": 1,
                "maxLength": 40
              },
              "trace_number": {
                "readOnly": true,
                "description": "The trace number of an ACH transfer",
                "type": "string",
                "pattern": "[0-9]",
                "minLength": 15,
                "maxLength": 15
              }
            }
          },
          "destination_tx_hash": {
            "readOnly": true,
            "type": "string",
            "description": "Hash of withdrawal of funds to the destination"
          },
          "return_details": {
            "readOnly": true,
            "description": "Return information, if the drain has been returned.",
            "properties": {
              "reason": {
                "description": "The reason for the return, as given by the returning financial institution.",
                "type": "string"
              }
            }
          },
          "receipt": {
            "readOnly": true,
            "description": "Receipt information of a drain.",
            "required": [
              "initial_amount",
              "developer_fee",
              "exchange_rate",
              "subtotal_amount",
              "converted_amount",
              "outgoing_amount",
              "destination_currency"
            ],
            "properties": {
              "initial_amount": {
                "description": "The initial amount of the drain, denominated in the fiat currency to which the currency of the Liquidation Address is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.000000000000000001\" etc.",
                "type": "string"
              },
              "developer_fee": {
                "description": "The developer fee, denominated in the fiat currency to which the currency of the Liquidation Address is pegged. This fee is a specific amount deducted from the initial total before conversion, rather than a percentage.",
                "type": "string"
              },
              "subtotal_amount": {
                "description": "The initial amount of the drain less the `developer_fee`, denominated in the fiat currency to which the Liquidation Address currency is pegged. Examples include \"100.25\", \"0.1\", \"1.234567\", \"1.000000000000000001\" etc.",
                "type": "string"
              },
              "gas_fee": {
                "description": "The fee that is deducted from the withdrawn amount to pay for gas.  Only included for crypto withdrawals that cost gas (e.g. USDT or DAI). It's denominated in the fiat currency to which the destination currency is pegged.",
                "type": "string"
              },
              "converted_amount": {
                "description": "The converted amount of the drain. It's denominated in the destination currency or its pegged fiat currency.",
                "type": "string"
              },
              "exchange_rate": {
                "description": "The effective exchange rate that can be calculated by dividing the converted amount by the amount available for conversion after deducting the developer fee."
              },
              "outgoing_amount": {
                "description": "The final amount of the drain, equal to the `converted_amount` minus any gas fees. It's denominated in the destination currency or its pegged fiat currency.",
                "type": "string"
              },
              "destination_currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "dai",
                  "usd"
                ],
                "description": "The currency of the fund sent to the customer."
              },
              "url": {
                "description": "The URL of a user-facing copy of the receipt.",
                "type": "string"
              }
            }
          }
        }
      },
      "Balance": {
        "properties": {
          "active_balance": {
            "description": "Active Balance (Money currently not being processed) of a Liquidation Address",
            "type": "string"
          },
          "pending_balance": {
            "description": "Pending Balance (Money being processed) of a Liquidation Address",
            "type": "string"
          }
        }
      },
      "BankAccountNumberType": {
        "type": "string",
        "enum": [
          "us",
          "iban"
        ]
      },
      "BankAccountOwnerType": {
        "type": "string",
        "enum": [
          "individual",
          "business"
        ]
      },
      "FiatCurrency": {
        "type": "string",
        "enum": [
          "usd"
        ]
      },
      "EuroInclusiveFiatCurrency": {
        "type": "string",
        "enum": [
          "usd",
          "eur"
        ]
      },
      "Currency": {
        "type": "string",
        "enum": [
          "usdc",
          "usdt",
          "dai",
          "usd"
        ]
      },
      "EuroInclusiveCurrency": {
        "type": "string",
        "enum": [
          "usdc",
          "usdt",
          "dai",
          "usd",
          "eur"
        ]
      },
      "CryptoCurrency": {
        "type": "string",
        "enum": [
          "usdc",
          "usdt",
          "dai"
        ]
      },
      "DeveloperFees": {
        "required": [
          "default_liquidation_address_fee_percent"
        ],
        "properties": {
          "default_liquidation_address_fee_percent": {
            "description": "The default fee percent that will be applied to all your Liquidation Addresses. The value is a base 100 percentage, i.e. 10.2% is \"10.2\" in the API.",
            "type": "string",
            "format": "float",
            "minimum": 0,
            "maximum": 1,
            "example": "0.5",
            "exclusiveMaximum": true
          }
        }
      },
      "OfframpChain": {
        "type": "string",
        "enum": [
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "optimism",
          "polygon",
          "solana",
          "stellar"
        ]
      },
      "PaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "optimism",
          "polygon",
          "solana",
          "stellar"
        ]
      },
      "SepaSwiftInclusivePaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "optimism",
          "polygon",
          "sepa",
          "solana",
          "stellar",
          "swift"
        ]
      },
      "OfframpPaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "optimism",
          "polygon",
          "solana",
          "stellar",
          "swift"
        ]
      },
      "SepaSwiftInclusiveOfframpPaymentRail": {
        "type": "string",
        "enum": [
          "ach",
          "wire",
          "ach_push",
          "arbitrum",
          "avalanche_c_chain",
          "base",
          "ethereum",
          "optimism",
          "polygon",
          "sepa",
          "solana",
          "stellar",
          "swift"
        ]
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "source": {
            "title": "ErrorSource",
            "required": [
              "location",
              "key"
            ],
            "properties": {
              "location": {
                "type": "string",
                "enum": [
                  "path",
                  "query",
                  "body",
                  "header"
                ]
              },
              "key": {
                "type": "string",
                "description": "Comma separated names of the properties or parameters causing the error"
              }
            }
          }
        }
      },
      "PlaidLinkRequest": {
        "properties": {
          "link_token": {
            "type": "string",
            "description": "Link token generated via the Plaid Link SDK"
          },
          "link_token_expires_at": {
            "type": "string",
            "description": "Expiration time of the link token",
            "format": "date-time"
          },
          "callback_url": {
            "type": "string",
            "description": "URL to call through Plaid Link Flow's onSuccess callback with the public token passed in the body of the request"
          }
        }
      },
      "IndividualKycLinkResponse": {
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the KYC link"
          },
          "customer_id": {
            "type": "string",
            "description": "ID of the customer. This will be nil until the customer is approved for both KYC and TOS."
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the customer, for a business, this would be the business entity's legal name"
          },
          "email": {
            "type": "string",
            "description": "Email of the customer"
          },
          "kyc_link": {
            "type": "string",
            "description": "Link to the KYC flow"
          },
          "kyc_status": {
            "type": "string",
            "description": "Status of the KYC flow. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
            "enum": [
              "not_started",
              "pending",
              "incomplete",
              "awaiting_ubo",
              "manual_review",
              "under_review",
              "approved",
              "rejected"
            ]
          },
          "rejection_reasons": {
            "readOnly": true,
            "description": "Reasons why a customer KYC was rejected",
            "type": "array",
            "minItems": 0,
            "items": {
              "description": "Reason why the kyc_status was rejected",
              "properties": {
                "developer_reason": {
                  "type": "string",
                  "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
                },
                "reason": {
                  "type": "string",
                  "description": "Reason for why a customer was rejected. To be shared with the customer."
                },
                "created_at": {
                  "type": "string",
                  "description": "Time of creation of the rejection reason"
                }
              }
            }
          },
          "tos_link": {
            "type": "string",
            "description": "Link to the TOS flow"
          },
          "tos_status": {
            "type": "string",
            "description": "Status of the TOS flow",
            "enum": [
              "pending",
              "approved"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Time of creation of the KYC link",
            "format": "date-time"
          }
        }
      },
      "PlaidExchangePublicToken": {
        "required": [
          "public_token"
        ],
        "properties": {
          "public_token": {
            "type": "string",
            "description": "Public token generated via the Plaid Link SDK"
          }
        }
      },
      "TransactionStatus": {
        "type": "string",
        "enum": [
          "awaiting_funds",
          "in_review",
          "funds_received",
          "payment_submitted",
          "payment_processed",
          "canceled",
          "error",
          "returned",
          "refunded"
        ]
      },
      "CustomerStatus": {
        "type": "string",
        "description": "Status of the customer. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
        "enum": [
          "not_started",
          "pending",
          "incomplete",
          "awaiting_ubo",
          "manual_review",
          "under_review",
          "active",
          "rejected"
        ]
      },
      "CustomerCapabilityState": {
        "type": "string",
        "description": "State of the customer capability",
        "enum": [
          "pending",
          "active",
          "inactive",
          "rejected"
        ]
      },
      "KycStatus": {
        "type": "string",
        "description": "Status of the KYC flow. `manual_review` is deprecated and getting transitioned to `under_review`. `pending` is also deprecated and getting transitioned to `not_started`.",
        "enum": [
          "not_started",
          "pending",
          "incomplete",
          "awaiting_ubo",
          "manual_review",
          "under_review",
          "approved",
          "rejected"
        ]
      },
      "RejectionReason": {
        "description": "Reason why the kyc_status was rejected",
        "properties": {
          "developer_reason": {
            "type": "string",
            "description": "Developer information for why a customer was rejected. Not to be shared with the customer."
          },
          "reason": {
            "type": "string",
            "description": "Reason for why a customer was rejected. To be shared with the customer."
          },
          "created_at": {
            "type": "string",
            "description": "Time of creation of the rejection reason"
          }
        }
      },
      "TosStatus": {
        "type": "string",
        "description": "Status of the TOS flow",
        "enum": [
          "pending",
          "approved"
        ]
      },
      "Webhook": {
        "required": [
          "id",
          "url",
          "status",
          "public_key"
        ],
        "properties": {
          "id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "The URL that the webhook will send events to"
          },
          "status": {
            "type": "string",
            "description": "The status of the webhook. Only active webhooks will receive events automatically.",
            "enum": [
              "active",
              "disabled",
              "deleted"
            ]
          },
          "public_key": {
            "type": "string",
            "description": "The public key (in PEM format) that should be used to verify the authenticity of webhook events"
          }
        }
      },
      "WebhookEvent": {
        "required": [
          "api_version",
          "event_id",
          "event_category",
          "event_type",
          "event_object_id",
          "event_object",
          "event_object_changes",
          "event_created_at"
        ],
        "properties": {
          "api_version": {
            "type": "string",
            "readOnly": true
          },
          "event_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "event_sequence": {
            "type": "integer",
            "readOnly": true
          },
          "event_category": {
            "type": "string",
            "enum": [
              "customer",
              "external_account",
              "kyc_link",
              "liquidation_address",
              "liquidation_address.drain",
              "static_memo",
              "transfer",
              "virtual_account",
              "virtual_account.activity"
            ]
          },
          "event_type": {
            "type": "string",
            "description": "The values here will be prefixed with the event_category. For example, a customer created event will be `customer.created`",
            "enum": [
              "created",
              "updated",
              "updated.status_transitioned",
              "deleted",
              "canceled"
            ]
          },
          "event_object_id": {
            "description": "A UUID that uniquely identifies a resource",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42,
            "readOnly": true
          },
          "event_object_status": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "not_started",
              "incomplete",
              "active",
              "rejected",
              "under_review",
              "manual_review",
              "awaiting_ubo",
              "approved",
              "awaiting_funds",
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "in_review",
              "canceled",
              "error",
              "returned",
              "refunded",
              "undeliverable"
            ]
          },
          "event_object": {
            "type": "object",
            "description": "The object that was affected by the event",
            "readOnly": true
          },
          "event_object_changes": {
            "type": "object",
            "description": "The changes that were made to the object",
            "readOnly": true
          },
          "event_created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "WebhookEventDeliveryLog": {
        "required": [
          "status",
          "event_id",
          "response_body",
          "created_at"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "description": "The status code of the delivery"
          },
          "event_id": {
            "description": "The id of the event for the delivery",
            "type": "string",
            "pattern": "[a-z0-9]*",
            "minLength": 1,
            "maxLength": 42
          },
          "response_body": {
            "type": "string",
            "description": "The response body of the delivery"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time of the delivery"
          }
        }
      },
      "CreateWebhook": {
        "required": [
          "url",
          "event_epoch"
        ],
        "properties": {
          "url": {
            "description": "The URL that the webhook will send events to. It must use the HTTPS scheme and have a valid X.509 certificate. The URL doesn't need to be live, but the host must be reachable.",
            "type": "string",
            "minLength": 1
          },
          "event_epoch": {
            "description": "Specifies the starting point from which this webhook will receive events. This should usually be set to \"webhook_creation\", unless there is a reason why this webhook needs to process events from before its creation. When this value is set to \"webhook_creation\", the webhook will receive a small number of events preceding its creation for convenience.",
            "type": "string",
            "enum": [
              "webhook_creation",
              "beginning_of_time"
            ]
          }
        }
      }
    },
    "parameters": {
      "CustomerIDParameter": {
        "name": "customerID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "TransferIDParameter": {
        "name": "transferID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "VirtualAccountIDParameter": {
        "name": "virtualAccountID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "StaticMemoIDParameter": {
        "name": "staticMemoID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "PrefundedAccountIDParameter": {
        "name": "prefundedAccountID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "TxHashParameter": {
        "name": "tx_hash",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The hash of the transaction"
      },
      "EventTypeParameter": {
        "name": "event_type",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "funds_received",
            "payment_submitted",
            "payment_processed",
            "in_review",
            "refund",
            "microdeposit",
            "account_update",
            "deactivation",
            "activation"
          ]
        },
        "description": "Filter history by event type"
      },
      "PayinIDParameter": {
        "name": "payinID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "PayoutIDParameter": {
        "name": "payoutID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "ExternalAccountIDParameter": {
        "name": "externalAccountID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "LiquidationAddressIDParameter": {
        "name": "liquidationAddressID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "IdempotencyKeyParameter": {
        "in": "header",
        "name": "Idempotency-Key",
        "schema": {
          "type": "string"
        }
      },
      "LimitParameter": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer"
        },
        "description": "The numbers of items to return (default of 10, max of 100)"
      },
      "StartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a transfer id. If this is specified, the next page that starts with a transfer right AFTER the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers older than the specified transfer id will be returned (shouldn't be set if ending_before is set)"
      },
      "EndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a transfer id. If this is specified, the previous page that ends with a transfer right BEFORE the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers newer than the specified transfer id will be returned (shouldn't be set if starting_after is set)"
      },
      "UpdatedAfterMsParameter": {
        "in": "query",
        "name": "updated_after_ms",
        "schema": {
          "type": "integer"
        },
        "description": "This is a unix timestamp in milliseconds. If this is specified, transfers updated AFTER the specified timestamp will be returned"
      },
      "UpdatedBeforeMsParameter": {
        "in": "query",
        "name": "updated_before_ms",
        "schema": {
          "type": "integer"
        },
        "description": "This is a unix timestamp in milliseconds. If this is specified, transfers updated BEFORE the specified timestamp will be returned"
      },
      "CustomerStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a customer id. If this is specified, the next page that starts with a customer right AFTER the specified customer id on the customer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that customers older than the specified customer id will be returned (shouldn't be set if ending_before is set)"
      },
      "CustomerEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a customer id. If this is specified, the previous page that ends with a customer right BEFORE the specified customer id on the customer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that customers newer than the specified customer id will be returned (shouldn't be set if starting_after is set)"
      },
      "EventStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is an event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
      },
      "EventEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is an event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
      },
      "PrefundedAccountHistoryStartingAfterParameter": {
        "in": "query",
        "name": "starting_after",
        "schema": {
          "type": "string"
        },
        "description": "This is a prefunded event id. If this is specified, the next page that starts with an event right AFTER the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events older than the specified event id will be returned (shouldn't be set if ending_before is set)"
      },
      "PrefundedAccountHistoryEndingBeforeParameter": {
        "in": "query",
        "name": "ending_before",
        "schema": {
          "type": "string"
        },
        "description": "This is a prefunded event id. If this is specified, the previous page that ends with an event right BEFORE the specified event id on the event timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that events newer than the specified event id will be returned (shouldn't be set if starting_after is set)"
      },
      "EndorsementParameter": {
        "in": "query",
        "name": "endorsement",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "sepa"
          ]
        },
        "description": "An endorsement is the approval required for a customer to use a particular product or service offered by Bridge"
      },
      "WebhookIDParameter": {
        "name": "webhookID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      },
      "KycLinkIDParameter": {
        "name": "kycLinkID",
        "in": "path",
        "required": true,
        "schema": {
          "description": "A UUID that uniquely identifies a resource",
          "type": "string",
          "pattern": "[a-z0-9]*",
          "minLength": 1,
          "maxLength": 42
        }
      }
    },
    "responses": {
      "BadRequestError": {
        "description": "Request containing missing or invalid parameters.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "source": {
                  "title": "ErrorSource",
                  "required": [
                    "location",
                    "key"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "enum": [
                        "path",
                        "query",
                        "body",
                        "header"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Comma separated names of the properties or parameters causing the error"
                    }
                  }
                }
              }
            },
            "examples": {
              "BadCustomerRequestErrorExample": {
                "summary": "Bad customer request",
                "value": {
                  "code": "bad_customer_request",
                  "message": "fields missing from customer body.",
                  "name": "first_name,ssn"
                }
              }
            }
          }
        }
      },
      "TransferAmlError": {
        "description": "The transfer has failed due to an AML violation (anti-money laundering).  Reach out to Bridge for more information",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "source": {
                  "title": "ErrorSource",
                  "required": [
                    "location",
                    "key"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "enum": [
                        "path",
                        "query",
                        "body",
                        "header"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Comma separated names of the properties or parameters causing the error"
                    }
                  }
                }
              }
            },
            "examples": {
              "TransferAmlErrorExample": {
                "summary": "An AML violation error response",
                "value": {
                  "code": "aml_violation",
                  "message": "Failed AML Screening"
                }
              }
            }
          }
        }
      },
      "UnverifiableInputError": {
        "description": "Request parameters not verified",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "source": {
                  "title": "ErrorSource",
                  "required": [
                    "location",
                    "key"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "enum": [
                        "path",
                        "query",
                        "body",
                        "header"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Comma separated names of the properties or parameters causing the error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "No resource found",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "source": {
                  "title": "ErrorSource",
                  "required": [
                    "location",
                    "key"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "enum": [
                        "path",
                        "query",
                        "body",
                        "header"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Comma separated names of the properties or parameters causing the error"
                    }
                  }
                }
              }
            },
            "examples": {
              "NotFoundErrorExample": {
                "summary": "Invalid customer id",
                "value": {
                  "code": "Invalid",
                  "message": "Unknown customer id"
                }
              }
            }
          }
        }
      },
      "UnexpectedError": {
        "description": "Unexpected error. User may try and send the request again.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "source": {
                  "title": "ErrorSource",
                  "required": [
                    "location",
                    "key"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "enum": [
                        "path",
                        "query",
                        "body",
                        "header"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Comma separated names of the properties or parameters causing the error"
                    }
                  }
                }
              }
            },
            "examples": {
              "UnexpectedError": {
                "summary": "An unexpected error",
                "value": {
                  "errors": [
                    {
                      "code": "unexpected",
                      "message": "An expected error occurred, you may try again later"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "AuthenticationError": {
        "description": "Missing or invalid API key",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "source": {
                  "title": "ErrorSource",
                  "required": [
                    "location",
                    "key"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "enum": [
                        "path",
                        "query",
                        "body",
                        "header"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Comma separated names of the properties or parameters causing the error"
                    }
                  }
                }
              }
            },
            "examples": {
              "MissingTokenError": {
                "summary": "No Api-Key header",
                "description": "The header may be missing or misspelled.",
                "value": {
                  "code": "required",
                  "location": "header",
                  "name": "Api-Key",
                  "message": "Missing Api-Key header"
                }
              },
              "InvalidTokenError": {
                "summary": "Invalid key in Api-Key header",
                "value": {
                  "code": "invalid",
                  "location": "header",
                  "name": "Api-Key",
                  "message": "Invalid Api-Key header"
                }
              }
            }
          }
        }
      },
      "BadExternalAccountUpdateError": {
        "description": "Request containing missing or invalid parameters.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 256
                },
                "message": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "source": {
                  "title": "ErrorSource",
                  "required": [
                    "location",
                    "key"
                  ],
                  "properties": {
                    "location": {
                      "type": "string",
                      "enum": [
                        "path",
                        "query",
                        "body",
                        "header"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Comma separated names of the properties or parameters causing the error"
                    }
                  }
                }
              }
            },
            "examples": {
              "BeneficiaryAddressAlreadyExistsExample": {
                "summary": "Beneficairy address already exists",
                "value": {
                  "code": "invalid_parameters",
                  "message": "Please resubmit the following parameters that are either missing or invalid.",
                  "source": {
                    "key": {
                      "address": "Beneficiary address already exists"
                    }
                  }
                }
              },
              "InvalidrequestExample": {
                "summary": "Bad External Account request",
                "value": {
                  "code": "invalid_parameters",
                  "message": "Please resubmit the following parameters that are either missing or invalid.",
                  "source": {
                    "key": {
                      "address.city": "must be set"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "name": "Api-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ]
}